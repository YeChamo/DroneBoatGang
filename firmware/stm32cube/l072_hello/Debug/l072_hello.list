
l072_hello.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039c4  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  08003a84  08003a84  00004a84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b54  08003b54  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003b54  08003b54  00004b54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003b5c  08003b5c  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b5c  08003b5c  00004b5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003b60  08003b60  00004b60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003b64  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000350  2000000c  08003b70  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000035c  08003b70  0000535c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009de0  00000000  00000000  00005034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c34  00000000  00000000  0000ee14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000828  00000000  00000000  00010a48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000639  00000000  00000000  00011270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013fff  00000000  00000000  000118a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b735  00000000  00000000  000258a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007a678  00000000  00000000  00030fdd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ab655  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001b64  00000000  00000000  000ab698  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  000ad1fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003a6c 	.word	0x08003a6c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08003a6c 	.word	0x08003a6c

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	@ 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			@ (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			@ (mov r8, r8)

08000230 <__aeabi_uldivmod>:
 8000230:	2b00      	cmp	r3, #0
 8000232:	d111      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000234:	2a00      	cmp	r2, #0
 8000236:	d10f      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000238:	2900      	cmp	r1, #0
 800023a:	d100      	bne.n	800023e <__aeabi_uldivmod+0xe>
 800023c:	2800      	cmp	r0, #0
 800023e:	d002      	beq.n	8000246 <__aeabi_uldivmod+0x16>
 8000240:	2100      	movs	r1, #0
 8000242:	43c9      	mvns	r1, r1
 8000244:	0008      	movs	r0, r1
 8000246:	b407      	push	{r0, r1, r2}
 8000248:	4802      	ldr	r0, [pc, #8]	@ (8000254 <__aeabi_uldivmod+0x24>)
 800024a:	a102      	add	r1, pc, #8	@ (adr r1, 8000254 <__aeabi_uldivmod+0x24>)
 800024c:	1840      	adds	r0, r0, r1
 800024e:	9002      	str	r0, [sp, #8]
 8000250:	bd03      	pop	{r0, r1, pc}
 8000252:	46c0      	nop			@ (mov r8, r8)
 8000254:	ffffffd9 	.word	0xffffffd9
 8000258:	b403      	push	{r0, r1}
 800025a:	4668      	mov	r0, sp
 800025c:	b501      	push	{r0, lr}
 800025e:	9802      	ldr	r0, [sp, #8]
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	9b01      	ldr	r3, [sp, #4]
 8000266:	469e      	mov	lr, r3
 8000268:	b002      	add	sp, #8
 800026a:	bc0c      	pop	{r2, r3}
 800026c:	4770      	bx	lr
 800026e:	46c0      	nop			@ (mov r8, r8)

08000270 <__udivmoddi4>:
 8000270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000272:	4657      	mov	r7, sl
 8000274:	464e      	mov	r6, r9
 8000276:	4645      	mov	r5, r8
 8000278:	46de      	mov	lr, fp
 800027a:	b5e0      	push	{r5, r6, r7, lr}
 800027c:	0004      	movs	r4, r0
 800027e:	000d      	movs	r5, r1
 8000280:	4692      	mov	sl, r2
 8000282:	4699      	mov	r9, r3
 8000284:	b083      	sub	sp, #12
 8000286:	428b      	cmp	r3, r1
 8000288:	d830      	bhi.n	80002ec <__udivmoddi4+0x7c>
 800028a:	d02d      	beq.n	80002e8 <__udivmoddi4+0x78>
 800028c:	4649      	mov	r1, r9
 800028e:	4650      	mov	r0, sl
 8000290:	f000 f8ba 	bl	8000408 <__clzdi2>
 8000294:	0029      	movs	r1, r5
 8000296:	0006      	movs	r6, r0
 8000298:	0020      	movs	r0, r4
 800029a:	f000 f8b5 	bl	8000408 <__clzdi2>
 800029e:	1a33      	subs	r3, r6, r0
 80002a0:	4698      	mov	r8, r3
 80002a2:	3b20      	subs	r3, #32
 80002a4:	d434      	bmi.n	8000310 <__udivmoddi4+0xa0>
 80002a6:	469b      	mov	fp, r3
 80002a8:	4653      	mov	r3, sl
 80002aa:	465a      	mov	r2, fp
 80002ac:	4093      	lsls	r3, r2
 80002ae:	4642      	mov	r2, r8
 80002b0:	001f      	movs	r7, r3
 80002b2:	4653      	mov	r3, sl
 80002b4:	4093      	lsls	r3, r2
 80002b6:	001e      	movs	r6, r3
 80002b8:	42af      	cmp	r7, r5
 80002ba:	d83b      	bhi.n	8000334 <__udivmoddi4+0xc4>
 80002bc:	42af      	cmp	r7, r5
 80002be:	d100      	bne.n	80002c2 <__udivmoddi4+0x52>
 80002c0:	e079      	b.n	80003b6 <__udivmoddi4+0x146>
 80002c2:	465b      	mov	r3, fp
 80002c4:	1ba4      	subs	r4, r4, r6
 80002c6:	41bd      	sbcs	r5, r7
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	da00      	bge.n	80002ce <__udivmoddi4+0x5e>
 80002cc:	e076      	b.n	80003bc <__udivmoddi4+0x14c>
 80002ce:	2200      	movs	r2, #0
 80002d0:	2300      	movs	r3, #0
 80002d2:	9200      	str	r2, [sp, #0]
 80002d4:	9301      	str	r3, [sp, #4]
 80002d6:	2301      	movs	r3, #1
 80002d8:	465a      	mov	r2, fp
 80002da:	4093      	lsls	r3, r2
 80002dc:	9301      	str	r3, [sp, #4]
 80002de:	2301      	movs	r3, #1
 80002e0:	4642      	mov	r2, r8
 80002e2:	4093      	lsls	r3, r2
 80002e4:	9300      	str	r3, [sp, #0]
 80002e6:	e029      	b.n	800033c <__udivmoddi4+0xcc>
 80002e8:	4282      	cmp	r2, r0
 80002ea:	d9cf      	bls.n	800028c <__udivmoddi4+0x1c>
 80002ec:	2200      	movs	r2, #0
 80002ee:	2300      	movs	r3, #0
 80002f0:	9200      	str	r2, [sp, #0]
 80002f2:	9301      	str	r3, [sp, #4]
 80002f4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d001      	beq.n	80002fe <__udivmoddi4+0x8e>
 80002fa:	601c      	str	r4, [r3, #0]
 80002fc:	605d      	str	r5, [r3, #4]
 80002fe:	9800      	ldr	r0, [sp, #0]
 8000300:	9901      	ldr	r1, [sp, #4]
 8000302:	b003      	add	sp, #12
 8000304:	bcf0      	pop	{r4, r5, r6, r7}
 8000306:	46bb      	mov	fp, r7
 8000308:	46b2      	mov	sl, r6
 800030a:	46a9      	mov	r9, r5
 800030c:	46a0      	mov	r8, r4
 800030e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000310:	4642      	mov	r2, r8
 8000312:	469b      	mov	fp, r3
 8000314:	2320      	movs	r3, #32
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	4652      	mov	r2, sl
 800031a:	40da      	lsrs	r2, r3
 800031c:	4641      	mov	r1, r8
 800031e:	0013      	movs	r3, r2
 8000320:	464a      	mov	r2, r9
 8000322:	408a      	lsls	r2, r1
 8000324:	0017      	movs	r7, r2
 8000326:	4642      	mov	r2, r8
 8000328:	431f      	orrs	r7, r3
 800032a:	4653      	mov	r3, sl
 800032c:	4093      	lsls	r3, r2
 800032e:	001e      	movs	r6, r3
 8000330:	42af      	cmp	r7, r5
 8000332:	d9c3      	bls.n	80002bc <__udivmoddi4+0x4c>
 8000334:	2200      	movs	r2, #0
 8000336:	2300      	movs	r3, #0
 8000338:	9200      	str	r2, [sp, #0]
 800033a:	9301      	str	r3, [sp, #4]
 800033c:	4643      	mov	r3, r8
 800033e:	2b00      	cmp	r3, #0
 8000340:	d0d8      	beq.n	80002f4 <__udivmoddi4+0x84>
 8000342:	07fb      	lsls	r3, r7, #31
 8000344:	0872      	lsrs	r2, r6, #1
 8000346:	431a      	orrs	r2, r3
 8000348:	4646      	mov	r6, r8
 800034a:	087b      	lsrs	r3, r7, #1
 800034c:	e00e      	b.n	800036c <__udivmoddi4+0xfc>
 800034e:	42ab      	cmp	r3, r5
 8000350:	d101      	bne.n	8000356 <__udivmoddi4+0xe6>
 8000352:	42a2      	cmp	r2, r4
 8000354:	d80c      	bhi.n	8000370 <__udivmoddi4+0x100>
 8000356:	1aa4      	subs	r4, r4, r2
 8000358:	419d      	sbcs	r5, r3
 800035a:	2001      	movs	r0, #1
 800035c:	1924      	adds	r4, r4, r4
 800035e:	416d      	adcs	r5, r5
 8000360:	2100      	movs	r1, #0
 8000362:	3e01      	subs	r6, #1
 8000364:	1824      	adds	r4, r4, r0
 8000366:	414d      	adcs	r5, r1
 8000368:	2e00      	cmp	r6, #0
 800036a:	d006      	beq.n	800037a <__udivmoddi4+0x10a>
 800036c:	42ab      	cmp	r3, r5
 800036e:	d9ee      	bls.n	800034e <__udivmoddi4+0xde>
 8000370:	3e01      	subs	r6, #1
 8000372:	1924      	adds	r4, r4, r4
 8000374:	416d      	adcs	r5, r5
 8000376:	2e00      	cmp	r6, #0
 8000378:	d1f8      	bne.n	800036c <__udivmoddi4+0xfc>
 800037a:	9800      	ldr	r0, [sp, #0]
 800037c:	9901      	ldr	r1, [sp, #4]
 800037e:	465b      	mov	r3, fp
 8000380:	1900      	adds	r0, r0, r4
 8000382:	4169      	adcs	r1, r5
 8000384:	2b00      	cmp	r3, #0
 8000386:	db24      	blt.n	80003d2 <__udivmoddi4+0x162>
 8000388:	002b      	movs	r3, r5
 800038a:	465a      	mov	r2, fp
 800038c:	4644      	mov	r4, r8
 800038e:	40d3      	lsrs	r3, r2
 8000390:	002a      	movs	r2, r5
 8000392:	40e2      	lsrs	r2, r4
 8000394:	001c      	movs	r4, r3
 8000396:	465b      	mov	r3, fp
 8000398:	0015      	movs	r5, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	db2a      	blt.n	80003f4 <__udivmoddi4+0x184>
 800039e:	0026      	movs	r6, r4
 80003a0:	409e      	lsls	r6, r3
 80003a2:	0033      	movs	r3, r6
 80003a4:	0026      	movs	r6, r4
 80003a6:	4647      	mov	r7, r8
 80003a8:	40be      	lsls	r6, r7
 80003aa:	0032      	movs	r2, r6
 80003ac:	1a80      	subs	r0, r0, r2
 80003ae:	4199      	sbcs	r1, r3
 80003b0:	9000      	str	r0, [sp, #0]
 80003b2:	9101      	str	r1, [sp, #4]
 80003b4:	e79e      	b.n	80002f4 <__udivmoddi4+0x84>
 80003b6:	42a3      	cmp	r3, r4
 80003b8:	d8bc      	bhi.n	8000334 <__udivmoddi4+0xc4>
 80003ba:	e782      	b.n	80002c2 <__udivmoddi4+0x52>
 80003bc:	4642      	mov	r2, r8
 80003be:	2320      	movs	r3, #32
 80003c0:	2100      	movs	r1, #0
 80003c2:	1a9b      	subs	r3, r3, r2
 80003c4:	2200      	movs	r2, #0
 80003c6:	9100      	str	r1, [sp, #0]
 80003c8:	9201      	str	r2, [sp, #4]
 80003ca:	2201      	movs	r2, #1
 80003cc:	40da      	lsrs	r2, r3
 80003ce:	9201      	str	r2, [sp, #4]
 80003d0:	e785      	b.n	80002de <__udivmoddi4+0x6e>
 80003d2:	4642      	mov	r2, r8
 80003d4:	2320      	movs	r3, #32
 80003d6:	1a9b      	subs	r3, r3, r2
 80003d8:	002a      	movs	r2, r5
 80003da:	4646      	mov	r6, r8
 80003dc:	409a      	lsls	r2, r3
 80003de:	0023      	movs	r3, r4
 80003e0:	40f3      	lsrs	r3, r6
 80003e2:	4644      	mov	r4, r8
 80003e4:	4313      	orrs	r3, r2
 80003e6:	002a      	movs	r2, r5
 80003e8:	40e2      	lsrs	r2, r4
 80003ea:	001c      	movs	r4, r3
 80003ec:	465b      	mov	r3, fp
 80003ee:	0015      	movs	r5, r2
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	dad4      	bge.n	800039e <__udivmoddi4+0x12e>
 80003f4:	4642      	mov	r2, r8
 80003f6:	002f      	movs	r7, r5
 80003f8:	2320      	movs	r3, #32
 80003fa:	0026      	movs	r6, r4
 80003fc:	4097      	lsls	r7, r2
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	40de      	lsrs	r6, r3
 8000402:	003b      	movs	r3, r7
 8000404:	4333      	orrs	r3, r6
 8000406:	e7cd      	b.n	80003a4 <__udivmoddi4+0x134>

08000408 <__clzdi2>:
 8000408:	b510      	push	{r4, lr}
 800040a:	2900      	cmp	r1, #0
 800040c:	d103      	bne.n	8000416 <__clzdi2+0xe>
 800040e:	f000 f807 	bl	8000420 <__clzsi2>
 8000412:	3020      	adds	r0, #32
 8000414:	e002      	b.n	800041c <__clzdi2+0x14>
 8000416:	0008      	movs	r0, r1
 8000418:	f000 f802 	bl	8000420 <__clzsi2>
 800041c:	bd10      	pop	{r4, pc}
 800041e:	46c0      	nop			@ (mov r8, r8)

08000420 <__clzsi2>:
 8000420:	211c      	movs	r1, #28
 8000422:	2301      	movs	r3, #1
 8000424:	041b      	lsls	r3, r3, #16
 8000426:	4298      	cmp	r0, r3
 8000428:	d301      	bcc.n	800042e <__clzsi2+0xe>
 800042a:	0c00      	lsrs	r0, r0, #16
 800042c:	3910      	subs	r1, #16
 800042e:	0a1b      	lsrs	r3, r3, #8
 8000430:	4298      	cmp	r0, r3
 8000432:	d301      	bcc.n	8000438 <__clzsi2+0x18>
 8000434:	0a00      	lsrs	r0, r0, #8
 8000436:	3908      	subs	r1, #8
 8000438:	091b      	lsrs	r3, r3, #4
 800043a:	4298      	cmp	r0, r3
 800043c:	d301      	bcc.n	8000442 <__clzsi2+0x22>
 800043e:	0900      	lsrs	r0, r0, #4
 8000440:	3904      	subs	r1, #4
 8000442:	a202      	add	r2, pc, #8	@ (adr r2, 800044c <__clzsi2+0x2c>)
 8000444:	5c10      	ldrb	r0, [r2, r0]
 8000446:	1840      	adds	r0, r0, r1
 8000448:	4770      	bx	lr
 800044a:	46c0      	nop			@ (mov r8, r8)
 800044c:	02020304 	.word	0x02020304
 8000450:	01010101 	.word	0x01010101
	...

0800045c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b082      	sub	sp, #8
 8000460:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000462:	4b0e      	ldr	r3, [pc, #56]	@ (800049c <MX_GPIO_Init+0x40>)
 8000464:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000466:	4b0d      	ldr	r3, [pc, #52]	@ (800049c <MX_GPIO_Init+0x40>)
 8000468:	2101      	movs	r1, #1
 800046a:	430a      	orrs	r2, r1
 800046c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800046e:	4b0b      	ldr	r3, [pc, #44]	@ (800049c <MX_GPIO_Init+0x40>)
 8000470:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000472:	2201      	movs	r2, #1
 8000474:	4013      	ands	r3, r2
 8000476:	607b      	str	r3, [r7, #4]
 8000478:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800047a:	4b08      	ldr	r3, [pc, #32]	@ (800049c <MX_GPIO_Init+0x40>)
 800047c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800047e:	4b07      	ldr	r3, [pc, #28]	@ (800049c <MX_GPIO_Init+0x40>)
 8000480:	2102      	movs	r1, #2
 8000482:	430a      	orrs	r2, r1
 8000484:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000486:	4b05      	ldr	r3, [pc, #20]	@ (800049c <MX_GPIO_Init+0x40>)
 8000488:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800048a:	2202      	movs	r2, #2
 800048c:	4013      	ands	r3, r2
 800048e:	603b      	str	r3, [r7, #0]
 8000490:	683b      	ldr	r3, [r7, #0]

}
 8000492:	46c0      	nop			@ (mov r8, r8)
 8000494:	46bd      	mov	sp, r7
 8000496:	b002      	add	sp, #8
 8000498:	bd80      	pop	{r7, pc}
 800049a:	46c0      	nop			@ (mov r8, r8)
 800049c:	40021000 	.word	0x40021000

080004a0 <dbg>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static void dbg(const char *s)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b082      	sub	sp, #8
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t*)s, strlen(s), HAL_MAX_DELAY);
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	0018      	movs	r0, r3
 80004ac:	f7ff fe2c 	bl	8000108 <strlen>
 80004b0:	0003      	movs	r3, r0
 80004b2:	b29a      	uxth	r2, r3
 80004b4:	2301      	movs	r3, #1
 80004b6:	425b      	negs	r3, r3
 80004b8:	6879      	ldr	r1, [r7, #4]
 80004ba:	4803      	ldr	r0, [pc, #12]	@ (80004c8 <dbg+0x28>)
 80004bc:	f001 feee 	bl	800229c <HAL_UART_Transmit>
}
 80004c0:	46c0      	nop			@ (mov r8, r8)
 80004c2:	46bd      	mov	sp, r7
 80004c4:	b002      	add	sp, #8
 80004c6:	bd80      	pop	{r7, pc}
 80004c8:	20000248 	.word	0x20000248

080004cc <StartLoRaRxIT>:

static void StartLoRaRxIT(void) { HAL_UART_Receive_IT(&huart1, &lora_rx_byte, 1); }
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
 80004d0:	4904      	ldr	r1, [pc, #16]	@ (80004e4 <StartLoRaRxIT+0x18>)
 80004d2:	4b05      	ldr	r3, [pc, #20]	@ (80004e8 <StartLoRaRxIT+0x1c>)
 80004d4:	2201      	movs	r2, #1
 80004d6:	0018      	movs	r0, r3
 80004d8:	f001 ff80 	bl	80023dc <HAL_UART_Receive_IT>
 80004dc:	46c0      	nop			@ (mov r8, r8)
 80004de:	46bd      	mov	sp, r7
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	46c0      	nop			@ (mov r8, r8)
 80004e4:	20000028 	.word	0x20000028
 80004e8:	200001c0 	.word	0x200001c0

080004ec <StartBLERxIT>:
static void StartBLERxIT(void)  { HAL_UART_Receive_IT(&huart4, &ble_rx_byte, 1); }
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
 80004f0:	4904      	ldr	r1, [pc, #16]	@ (8000504 <StartBLERxIT+0x18>)
 80004f2:	4b05      	ldr	r3, [pc, #20]	@ (8000508 <StartBLERxIT+0x1c>)
 80004f4:	2201      	movs	r2, #1
 80004f6:	0018      	movs	r0, r3
 80004f8:	f001 ff70 	bl	80023dc <HAL_UART_Receive_IT>
 80004fc:	46c0      	nop			@ (mov r8, r8)
 80004fe:	46bd      	mov	sp, r7
 8000500:	bd80      	pop	{r7, pc}
 8000502:	46c0      	nop			@ (mov r8, r8)
 8000504:	20000029 	.word	0x20000029
 8000508:	200002d0 	.word	0x200002d0

0800050c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000512:	f000 fbc3 	bl	8000c9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000516:	f000 f89d 	bl	8000654 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800051a:	f7ff ff9f 	bl	800045c <MX_GPIO_Init>
  MX_USART2_UART_Init();  //debug
 800051e:	f000 fa41 	bl	80009a4 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();  //Lora
 8000522:	f000 fa0f 	bl	8000944 <MX_USART1_UART_Init>
  MX_USART4_UART_Init();  //BLE
 8000526:	f000 fa6d 	bl	8000a04 <MX_USART4_UART_Init>
  MX_LPUART1_UART_Init(); //GPS
 800052a:	f000 f9dd 	bl	80008e8 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */
  const char *msg = "hello from STM32L0!\r\n";
 800052e:	4b3a      	ldr	r3, [pc, #232]	@ (8000618 <main+0x10c>)
 8000530:	607b      	str	r3, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	0018      	movs	r0, r3
 8000536:	f7ff fde7 	bl	8000108 <strlen>
 800053a:	0003      	movs	r3, r0
 800053c:	b29a      	uxth	r2, r3
 800053e:	2301      	movs	r3, #1
 8000540:	425b      	negs	r3, r3
 8000542:	6879      	ldr	r1, [r7, #4]
 8000544:	4835      	ldr	r0, [pc, #212]	@ (800061c <main+0x110>)
 8000546:	f001 fea9 	bl	800229c <HAL_UART_Transmit>

  StartLoRaRxIT();
 800054a:	f7ff ffbf 	bl	80004cc <StartLoRaRxIT>
  StartBLERxIT();
 800054e:	f7ff ffcd 	bl	80004ec <StartBLERxIT>

  dbg("LoRa=USART1, Debug=USART2, BLE=USART4\r\n");
 8000552:	4b33      	ldr	r3, [pc, #204]	@ (8000620 <main+0x114>)
 8000554:	0018      	movs	r0, r3
 8000556:	f7ff ffa3 	bl	80004a0 <dbg>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    HAL_Delay(1000);
 800055a:	23fa      	movs	r3, #250	@ 0xfa
 800055c:	009b      	lsls	r3, r3, #2
 800055e:	0018      	movs	r0, r3
 8000560:	f000 fc0c 	bl	8000d7c <HAL_Delay>
    dbg("tick\r\n");
 8000564:	4b2f      	ldr	r3, [pc, #188]	@ (8000624 <main+0x118>)
 8000566:	0018      	movs	r0, r3
 8000568:	f7ff ff9a 	bl	80004a0 <dbg>

    if(lora_ready) {
 800056c:	4b2e      	ldr	r3, [pc, #184]	@ (8000628 <main+0x11c>)
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	b2db      	uxtb	r3, r3
 8000572:	2b00      	cmp	r3, #0
 8000574:	d024      	beq.n	80005c0 <main+0xb4>
      dbg("LORA RX: "); dbg(lora_line); dbg("\r\n");
 8000576:	4b2d      	ldr	r3, [pc, #180]	@ (800062c <main+0x120>)
 8000578:	0018      	movs	r0, r3
 800057a:	f7ff ff91 	bl	80004a0 <dbg>
 800057e:	4b2c      	ldr	r3, [pc, #176]	@ (8000630 <main+0x124>)
 8000580:	0018      	movs	r0, r3
 8000582:	f7ff ff8d 	bl	80004a0 <dbg>
 8000586:	4b2b      	ldr	r3, [pc, #172]	@ (8000634 <main+0x128>)
 8000588:	0018      	movs	r0, r3
 800058a:	f7ff ff89 	bl	80004a0 <dbg>
      HAL_UART_Transmit(&huart4, (uint8_t*)lora_line, strlen(lora_line), HAL_MAX_DELAY);
 800058e:	4b28      	ldr	r3, [pc, #160]	@ (8000630 <main+0x124>)
 8000590:	0018      	movs	r0, r3
 8000592:	f7ff fdb9 	bl	8000108 <strlen>
 8000596:	0003      	movs	r3, r0
 8000598:	b29a      	uxth	r2, r3
 800059a:	2301      	movs	r3, #1
 800059c:	425b      	negs	r3, r3
 800059e:	4924      	ldr	r1, [pc, #144]	@ (8000630 <main+0x124>)
 80005a0:	4825      	ldr	r0, [pc, #148]	@ (8000638 <main+0x12c>)
 80005a2:	f001 fe7b 	bl	800229c <HAL_UART_Transmit>
      HAL_UART_Transmit(&huart4, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY);
 80005a6:	2301      	movs	r3, #1
 80005a8:	425b      	negs	r3, r3
 80005aa:	4922      	ldr	r1, [pc, #136]	@ (8000634 <main+0x128>)
 80005ac:	4822      	ldr	r0, [pc, #136]	@ (8000638 <main+0x12c>)
 80005ae:	2202      	movs	r2, #2
 80005b0:	f001 fe74 	bl	800229c <HAL_UART_Transmit>
      lora_len = 0; lora_ready = 0;
 80005b4:	4b21      	ldr	r3, [pc, #132]	@ (800063c <main+0x130>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	601a      	str	r2, [r3, #0]
 80005ba:	4b1b      	ldr	r3, [pc, #108]	@ (8000628 <main+0x11c>)
 80005bc:	2200      	movs	r2, #0
 80005be:	701a      	strb	r2, [r3, #0]
    }

    if(ble_ready) {
 80005c0:	4b1f      	ldr	r3, [pc, #124]	@ (8000640 <main+0x134>)
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	b2db      	uxtb	r3, r3
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d0c7      	beq.n	800055a <main+0x4e>
      dbg("BLE  RX: "); dbg(ble_line); dbg("\r\n");
 80005ca:	4b1e      	ldr	r3, [pc, #120]	@ (8000644 <main+0x138>)
 80005cc:	0018      	movs	r0, r3
 80005ce:	f7ff ff67 	bl	80004a0 <dbg>
 80005d2:	4b1d      	ldr	r3, [pc, #116]	@ (8000648 <main+0x13c>)
 80005d4:	0018      	movs	r0, r3
 80005d6:	f7ff ff63 	bl	80004a0 <dbg>
 80005da:	4b16      	ldr	r3, [pc, #88]	@ (8000634 <main+0x128>)
 80005dc:	0018      	movs	r0, r3
 80005de:	f7ff ff5f 	bl	80004a0 <dbg>
      HAL_UART_Transmit(&huart1, (uint8_t*)ble_line, strlen(ble_line), HAL_MAX_DELAY);
 80005e2:	4b19      	ldr	r3, [pc, #100]	@ (8000648 <main+0x13c>)
 80005e4:	0018      	movs	r0, r3
 80005e6:	f7ff fd8f 	bl	8000108 <strlen>
 80005ea:	0003      	movs	r3, r0
 80005ec:	b29a      	uxth	r2, r3
 80005ee:	2301      	movs	r3, #1
 80005f0:	425b      	negs	r3, r3
 80005f2:	4915      	ldr	r1, [pc, #84]	@ (8000648 <main+0x13c>)
 80005f4:	4815      	ldr	r0, [pc, #84]	@ (800064c <main+0x140>)
 80005f6:	f001 fe51 	bl	800229c <HAL_UART_Transmit>
      HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY);
 80005fa:	2301      	movs	r3, #1
 80005fc:	425b      	negs	r3, r3
 80005fe:	490d      	ldr	r1, [pc, #52]	@ (8000634 <main+0x128>)
 8000600:	4812      	ldr	r0, [pc, #72]	@ (800064c <main+0x140>)
 8000602:	2202      	movs	r2, #2
 8000604:	f001 fe4a 	bl	800229c <HAL_UART_Transmit>
      ble_len = 0; ble_ready = 0;
 8000608:	4b11      	ldr	r3, [pc, #68]	@ (8000650 <main+0x144>)
 800060a:	2200      	movs	r2, #0
 800060c:	601a      	str	r2, [r3, #0]
 800060e:	4b0c      	ldr	r3, [pc, #48]	@ (8000640 <main+0x134>)
 8000610:	2200      	movs	r2, #0
 8000612:	701a      	strb	r2, [r3, #0]
    HAL_Delay(1000);
 8000614:	e7a1      	b.n	800055a <main+0x4e>
 8000616:	46c0      	nop			@ (mov r8, r8)
 8000618:	08003a84 	.word	0x08003a84
 800061c:	20000248 	.word	0x20000248
 8000620:	08003a9c 	.word	0x08003a9c
 8000624:	08003ac4 	.word	0x08003ac4
 8000628:	20000134 	.word	0x20000134
 800062c:	08003acc 	.word	0x08003acc
 8000630:	2000002c 	.word	0x2000002c
 8000634:	08003ad8 	.word	0x08003ad8
 8000638:	200002d0 	.word	0x200002d0
 800063c:	2000012c 	.word	0x2000012c
 8000640:	20000135 	.word	0x20000135
 8000644:	08003adc 	.word	0x08003adc
 8000648:	200000ac 	.word	0x200000ac
 800064c:	200001c0 	.word	0x200001c0
 8000650:	20000130 	.word	0x20000130

08000654 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000654:	b590      	push	{r4, r7, lr}
 8000656:	b09d      	sub	sp, #116	@ 0x74
 8000658:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065a:	2438      	movs	r4, #56	@ 0x38
 800065c:	193b      	adds	r3, r7, r4
 800065e:	0018      	movs	r0, r3
 8000660:	2338      	movs	r3, #56	@ 0x38
 8000662:	001a      	movs	r2, r3
 8000664:	2100      	movs	r1, #0
 8000666:	f003 f9d5 	bl	8003a14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800066a:	2324      	movs	r3, #36	@ 0x24
 800066c:	18fb      	adds	r3, r7, r3
 800066e:	0018      	movs	r0, r3
 8000670:	2314      	movs	r3, #20
 8000672:	001a      	movs	r2, r3
 8000674:	2100      	movs	r1, #0
 8000676:	f003 f9cd 	bl	8003a14 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800067a:	003b      	movs	r3, r7
 800067c:	0018      	movs	r0, r3
 800067e:	2324      	movs	r3, #36	@ 0x24
 8000680:	001a      	movs	r2, r3
 8000682:	2100      	movs	r1, #0
 8000684:	f003 f9c6 	bl	8003a14 <memset>

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000688:	4b29      	ldr	r3, [pc, #164]	@ (8000730 <SystemClock_Config+0xdc>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a29      	ldr	r2, [pc, #164]	@ (8000734 <SystemClock_Config+0xe0>)
 800068e:	401a      	ands	r2, r3
 8000690:	4b27      	ldr	r3, [pc, #156]	@ (8000730 <SystemClock_Config+0xdc>)
 8000692:	2180      	movs	r1, #128	@ 0x80
 8000694:	0109      	lsls	r1, r1, #4
 8000696:	430a      	orrs	r2, r1
 8000698:	601a      	str	r2, [r3, #0]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800069a:	0021      	movs	r1, r4
 800069c:	187b      	adds	r3, r7, r1
 800069e:	2210      	movs	r2, #16
 80006a0:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006a2:	187b      	adds	r3, r7, r1
 80006a4:	2201      	movs	r2, #1
 80006a6:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80006a8:	187b      	adds	r3, r7, r1
 80006aa:	2200      	movs	r2, #0
 80006ac:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 80006ae:	187b      	adds	r3, r7, r1
 80006b0:	22a0      	movs	r2, #160	@ 0xa0
 80006b2:	0212      	lsls	r2, r2, #8
 80006b4:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006b6:	187b      	adds	r3, r7, r1
 80006b8:	2200      	movs	r2, #0
 80006ba:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006bc:	187b      	adds	r3, r7, r1
 80006be:	0018      	movs	r0, r3
 80006c0:	f000 fe64 	bl	800138c <HAL_RCC_OscConfig>
 80006c4:	1e03      	subs	r3, r0, #0
 80006c6:	d001      	beq.n	80006cc <SystemClock_Config+0x78>
  {
    Error_Handler();
 80006c8:	f000 f8b0 	bl	800082c <Error_Handler>
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006cc:	2124      	movs	r1, #36	@ 0x24
 80006ce:	187b      	adds	r3, r7, r1
 80006d0:	220f      	movs	r2, #15
 80006d2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80006d4:	187b      	adds	r3, r7, r1
 80006d6:	2200      	movs	r2, #0
 80006d8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006da:	187b      	adds	r3, r7, r1
 80006dc:	2200      	movs	r2, #0
 80006de:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006e0:	187b      	adds	r3, r7, r1
 80006e2:	2200      	movs	r2, #0
 80006e4:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006e6:	187b      	adds	r3, r7, r1
 80006e8:	2200      	movs	r2, #0
 80006ea:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006ec:	187b      	adds	r3, r7, r1
 80006ee:	2100      	movs	r1, #0
 80006f0:	0018      	movs	r0, r3
 80006f2:	f001 fa1f 	bl	8001b34 <HAL_RCC_ClockConfig>
 80006f6:	1e03      	subs	r3, r0, #0
 80006f8:	d001      	beq.n	80006fe <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80006fa:	f000 f897 	bl	800082c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 80006fe:	003b      	movs	r3, r7
 8000700:	2207      	movs	r2, #7
 8000702:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_LPUART1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000704:	003b      	movs	r3, r7
 8000706:	2200      	movs	r2, #0
 8000708:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800070a:	003b      	movs	r3, r7
 800070c:	2200      	movs	r2, #0
 800070e:	60da      	str	r2, [r3, #12]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000710:	003b      	movs	r3, r7
 8000712:	2200      	movs	r2, #0
 8000714:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000716:	003b      	movs	r3, r7
 8000718:	0018      	movs	r0, r3
 800071a:	f001 fc0f 	bl	8001f3c <HAL_RCCEx_PeriphCLKConfig>
 800071e:	1e03      	subs	r3, r0, #0
 8000720:	d001      	beq.n	8000726 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000722:	f000 f883 	bl	800082c <Error_Handler>
  }
}
 8000726:	46c0      	nop			@ (mov r8, r8)
 8000728:	46bd      	mov	sp, r7
 800072a:	b01d      	add	sp, #116	@ 0x74
 800072c:	bd90      	pop	{r4, r7, pc}
 800072e:	46c0      	nop			@ (mov r8, r8)
 8000730:	40007000 	.word	0x40007000
 8000734:	ffffe7ff 	.word	0xffffe7ff

08000738 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b084      	sub	sp, #16
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
  if(huart == &huart1) {
 8000740:	687a      	ldr	r2, [r7, #4]
 8000742:	4b30      	ldr	r3, [pc, #192]	@ (8000804 <HAL_UART_RxCpltCallback+0xcc>)
 8000744:	429a      	cmp	r2, r3
 8000746:	d12a      	bne.n	800079e <HAL_UART_RxCpltCallback+0x66>
    char c = (char)lora_rx_byte;
 8000748:	200e      	movs	r0, #14
 800074a:	183b      	adds	r3, r7, r0
 800074c:	4a2e      	ldr	r2, [pc, #184]	@ (8000808 <HAL_UART_RxCpltCallback+0xd0>)
 800074e:	7812      	ldrb	r2, [r2, #0]
 8000750:	701a      	strb	r2, [r3, #0]
    if(!lora_ready && lora_len < LBUF-1) lora_line[lora_len++] = c;
 8000752:	4b2e      	ldr	r3, [pc, #184]	@ (800080c <HAL_UART_RxCpltCallback+0xd4>)
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	b2db      	uxtb	r3, r3
 8000758:	2b00      	cmp	r3, #0
 800075a:	d10c      	bne.n	8000776 <HAL_UART_RxCpltCallback+0x3e>
 800075c:	4b2c      	ldr	r3, [pc, #176]	@ (8000810 <HAL_UART_RxCpltCallback+0xd8>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	2b7e      	cmp	r3, #126	@ 0x7e
 8000762:	d808      	bhi.n	8000776 <HAL_UART_RxCpltCallback+0x3e>
 8000764:	4b2a      	ldr	r3, [pc, #168]	@ (8000810 <HAL_UART_RxCpltCallback+0xd8>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	1c59      	adds	r1, r3, #1
 800076a:	4a29      	ldr	r2, [pc, #164]	@ (8000810 <HAL_UART_RxCpltCallback+0xd8>)
 800076c:	6011      	str	r1, [r2, #0]
 800076e:	4a29      	ldr	r2, [pc, #164]	@ (8000814 <HAL_UART_RxCpltCallback+0xdc>)
 8000770:	1839      	adds	r1, r7, r0
 8000772:	7809      	ldrb	r1, [r1, #0]
 8000774:	54d1      	strb	r1, [r2, r3]
    if(c == '\n' || c == '\r') { lora_line[lora_len] = 0; lora_ready = 1; }
 8000776:	220e      	movs	r2, #14
 8000778:	18bb      	adds	r3, r7, r2
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	2b0a      	cmp	r3, #10
 800077e:	d003      	beq.n	8000788 <HAL_UART_RxCpltCallback+0x50>
 8000780:	18bb      	adds	r3, r7, r2
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	2b0d      	cmp	r3, #13
 8000786:	d107      	bne.n	8000798 <HAL_UART_RxCpltCallback+0x60>
 8000788:	4b21      	ldr	r3, [pc, #132]	@ (8000810 <HAL_UART_RxCpltCallback+0xd8>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	4a21      	ldr	r2, [pc, #132]	@ (8000814 <HAL_UART_RxCpltCallback+0xdc>)
 800078e:	2100      	movs	r1, #0
 8000790:	54d1      	strb	r1, [r2, r3]
 8000792:	4b1e      	ldr	r3, [pc, #120]	@ (800080c <HAL_UART_RxCpltCallback+0xd4>)
 8000794:	2201      	movs	r2, #1
 8000796:	701a      	strb	r2, [r3, #0]
    StartLoRaRxIT();
 8000798:	f7ff fe98 	bl	80004cc <StartLoRaRxIT>
    char c = (char)ble_rx_byte;
    if(!ble_ready && ble_len < LBUF-1) ble_line[ble_len++] = c;
    if(c == '\n' || c == '\r') { ble_line[ble_len] = 0; ble_ready = 1; }
    StartBLERxIT();
  }
}
 800079c:	e02d      	b.n	80007fa <HAL_UART_RxCpltCallback+0xc2>
  else if(huart == &huart4) {
 800079e:	687a      	ldr	r2, [r7, #4]
 80007a0:	4b1d      	ldr	r3, [pc, #116]	@ (8000818 <HAL_UART_RxCpltCallback+0xe0>)
 80007a2:	429a      	cmp	r2, r3
 80007a4:	d129      	bne.n	80007fa <HAL_UART_RxCpltCallback+0xc2>
    char c = (char)ble_rx_byte;
 80007a6:	200f      	movs	r0, #15
 80007a8:	183b      	adds	r3, r7, r0
 80007aa:	4a1c      	ldr	r2, [pc, #112]	@ (800081c <HAL_UART_RxCpltCallback+0xe4>)
 80007ac:	7812      	ldrb	r2, [r2, #0]
 80007ae:	701a      	strb	r2, [r3, #0]
    if(!ble_ready && ble_len < LBUF-1) ble_line[ble_len++] = c;
 80007b0:	4b1b      	ldr	r3, [pc, #108]	@ (8000820 <HAL_UART_RxCpltCallback+0xe8>)
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	b2db      	uxtb	r3, r3
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d10c      	bne.n	80007d4 <HAL_UART_RxCpltCallback+0x9c>
 80007ba:	4b1a      	ldr	r3, [pc, #104]	@ (8000824 <HAL_UART_RxCpltCallback+0xec>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	2b7e      	cmp	r3, #126	@ 0x7e
 80007c0:	d808      	bhi.n	80007d4 <HAL_UART_RxCpltCallback+0x9c>
 80007c2:	4b18      	ldr	r3, [pc, #96]	@ (8000824 <HAL_UART_RxCpltCallback+0xec>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	1c59      	adds	r1, r3, #1
 80007c8:	4a16      	ldr	r2, [pc, #88]	@ (8000824 <HAL_UART_RxCpltCallback+0xec>)
 80007ca:	6011      	str	r1, [r2, #0]
 80007cc:	4a16      	ldr	r2, [pc, #88]	@ (8000828 <HAL_UART_RxCpltCallback+0xf0>)
 80007ce:	1839      	adds	r1, r7, r0
 80007d0:	7809      	ldrb	r1, [r1, #0]
 80007d2:	54d1      	strb	r1, [r2, r3]
    if(c == '\n' || c == '\r') { ble_line[ble_len] = 0; ble_ready = 1; }
 80007d4:	220f      	movs	r2, #15
 80007d6:	18bb      	adds	r3, r7, r2
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	2b0a      	cmp	r3, #10
 80007dc:	d003      	beq.n	80007e6 <HAL_UART_RxCpltCallback+0xae>
 80007de:	18bb      	adds	r3, r7, r2
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	2b0d      	cmp	r3, #13
 80007e4:	d107      	bne.n	80007f6 <HAL_UART_RxCpltCallback+0xbe>
 80007e6:	4b0f      	ldr	r3, [pc, #60]	@ (8000824 <HAL_UART_RxCpltCallback+0xec>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	4a0f      	ldr	r2, [pc, #60]	@ (8000828 <HAL_UART_RxCpltCallback+0xf0>)
 80007ec:	2100      	movs	r1, #0
 80007ee:	54d1      	strb	r1, [r2, r3]
 80007f0:	4b0b      	ldr	r3, [pc, #44]	@ (8000820 <HAL_UART_RxCpltCallback+0xe8>)
 80007f2:	2201      	movs	r2, #1
 80007f4:	701a      	strb	r2, [r3, #0]
    StartBLERxIT();
 80007f6:	f7ff fe79 	bl	80004ec <StartBLERxIT>
}
 80007fa:	46c0      	nop			@ (mov r8, r8)
 80007fc:	46bd      	mov	sp, r7
 80007fe:	b004      	add	sp, #16
 8000800:	bd80      	pop	{r7, pc}
 8000802:	46c0      	nop			@ (mov r8, r8)
 8000804:	200001c0 	.word	0x200001c0
 8000808:	20000028 	.word	0x20000028
 800080c:	20000134 	.word	0x20000134
 8000810:	2000012c 	.word	0x2000012c
 8000814:	2000002c 	.word	0x2000002c
 8000818:	200002d0 	.word	0x200002d0
 800081c:	20000029 	.word	0x20000029
 8000820:	20000135 	.word	0x20000135
 8000824:	20000130 	.word	0x20000130
 8000828:	200000ac 	.word	0x200000ac

0800082c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000830:	b672      	cpsid	i
}
 8000832:	46c0      	nop			@ (mov r8, r8)
  __disable_irq();
  while (1)
 8000834:	46c0      	nop			@ (mov r8, r8)
 8000836:	e7fd      	b.n	8000834 <Error_Handler+0x8>

08000838 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800083c:	4b07      	ldr	r3, [pc, #28]	@ (800085c <HAL_MspInit+0x24>)
 800083e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000840:	4b06      	ldr	r3, [pc, #24]	@ (800085c <HAL_MspInit+0x24>)
 8000842:	2101      	movs	r1, #1
 8000844:	430a      	orrs	r2, r1
 8000846:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000848:	4b04      	ldr	r3, [pc, #16]	@ (800085c <HAL_MspInit+0x24>)
 800084a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800084c:	4b03      	ldr	r3, [pc, #12]	@ (800085c <HAL_MspInit+0x24>)
 800084e:	2180      	movs	r1, #128	@ 0x80
 8000850:	0549      	lsls	r1, r1, #21
 8000852:	430a      	orrs	r2, r1
 8000854:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000856:	46c0      	nop			@ (mov r8, r8)
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	40021000 	.word	0x40021000

08000860 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000864:	46c0      	nop			@ (mov r8, r8)
 8000866:	e7fd      	b.n	8000864 <NMI_Handler+0x4>

08000868 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800086c:	46c0      	nop			@ (mov r8, r8)
 800086e:	e7fd      	b.n	800086c <HardFault_Handler+0x4>

08000870 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000874:	46c0      	nop			@ (mov r8, r8)
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}

0800087a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800087a:	b580      	push	{r7, lr}
 800087c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800087e:	46c0      	nop			@ (mov r8, r8)
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}

08000884 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000888:	f000 fa5c 	bl	8000d44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800088c:	46c0      	nop			@ (mov r8, r8)
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
	...

08000894 <USART4_5_IRQHandler>:

/**
  * @brief This function handles USART4 and USART5 interrupt.
  */
void USART4_5_IRQHandler(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART4_5_IRQn 0 */

  /* USER CODE END USART4_5_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8000898:	4b03      	ldr	r3, [pc, #12]	@ (80008a8 <USART4_5_IRQHandler+0x14>)
 800089a:	0018      	movs	r0, r3
 800089c:	f001 fdfc 	bl	8002498 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART4_5_IRQn 1 */

  /* USER CODE END USART4_5_IRQn 1 */
}
 80008a0:	46c0      	nop			@ (mov r8, r8)
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	46c0      	nop			@ (mov r8, r8)
 80008a8:	200002d0 	.word	0x200002d0

080008ac <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80008b0:	4b03      	ldr	r3, [pc, #12]	@ (80008c0 <USART1_IRQHandler+0x14>)
 80008b2:	0018      	movs	r0, r3
 80008b4:	f001 fdf0 	bl	8002498 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80008b8:	46c0      	nop			@ (mov r8, r8)
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	46c0      	nop			@ (mov r8, r8)
 80008c0:	200001c0 	.word	0x200001c0

080008c4 <RNG_LPUART1_IRQHandler>:

/**
  * @brief This function handles RNG and LPUART1 Interrupts / LPUART1 wake-up interrupt through EXTI line 28.
  */
void RNG_LPUART1_IRQHandler(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RNG_LPUART1_IRQn 0 */

  /* USER CODE END RNG_LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80008c8:	4b03      	ldr	r3, [pc, #12]	@ (80008d8 <RNG_LPUART1_IRQHandler+0x14>)
 80008ca:	0018      	movs	r0, r3
 80008cc:	f001 fde4 	bl	8002498 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN RNG_LPUART1_IRQn 1 */

  /* USER CODE END RNG_LPUART1_IRQn 1 */
}
 80008d0:	46c0      	nop			@ (mov r8, r8)
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	46c0      	nop			@ (mov r8, r8)
 80008d8:	20000138 	.word	0x20000138

080008dc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008e0:	46c0      	nop			@ (mov r8, r8)
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
	...

080008e8 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef huart4;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80008ec:	4b13      	ldr	r3, [pc, #76]	@ (800093c <MX_LPUART1_UART_Init+0x54>)
 80008ee:	4a14      	ldr	r2, [pc, #80]	@ (8000940 <MX_LPUART1_UART_Init+0x58>)
 80008f0:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 9600;
 80008f2:	4b12      	ldr	r3, [pc, #72]	@ (800093c <MX_LPUART1_UART_Init+0x54>)
 80008f4:	2296      	movs	r2, #150	@ 0x96
 80008f6:	0192      	lsls	r2, r2, #6
 80008f8:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 80008fa:	4b10      	ldr	r3, [pc, #64]	@ (800093c <MX_LPUART1_UART_Init+0x54>)
 80008fc:	2280      	movs	r2, #128	@ 0x80
 80008fe:	0552      	lsls	r2, r2, #21
 8000900:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000902:	4b0e      	ldr	r3, [pc, #56]	@ (800093c <MX_LPUART1_UART_Init+0x54>)
 8000904:	2200      	movs	r2, #0
 8000906:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000908:	4b0c      	ldr	r3, [pc, #48]	@ (800093c <MX_LPUART1_UART_Init+0x54>)
 800090a:	2200      	movs	r2, #0
 800090c:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800090e:	4b0b      	ldr	r3, [pc, #44]	@ (800093c <MX_LPUART1_UART_Init+0x54>)
 8000910:	220c      	movs	r2, #12
 8000912:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000914:	4b09      	ldr	r3, [pc, #36]	@ (800093c <MX_LPUART1_UART_Init+0x54>)
 8000916:	2200      	movs	r2, #0
 8000918:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800091a:	4b08      	ldr	r3, [pc, #32]	@ (800093c <MX_LPUART1_UART_Init+0x54>)
 800091c:	2200      	movs	r2, #0
 800091e:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000920:	4b06      	ldr	r3, [pc, #24]	@ (800093c <MX_LPUART1_UART_Init+0x54>)
 8000922:	2200      	movs	r2, #0
 8000924:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000926:	4b05      	ldr	r3, [pc, #20]	@ (800093c <MX_LPUART1_UART_Init+0x54>)
 8000928:	0018      	movs	r0, r3
 800092a:	f001 fc63 	bl	80021f4 <HAL_UART_Init>
 800092e:	1e03      	subs	r3, r0, #0
 8000930:	d001      	beq.n	8000936 <MX_LPUART1_UART_Init+0x4e>
  {
    Error_Handler();
 8000932:	f7ff ff7b 	bl	800082c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000936:	46c0      	nop			@ (mov r8, r8)
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	20000138 	.word	0x20000138
 8000940:	40004800 	.word	0x40004800

08000944 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000948:	4b14      	ldr	r3, [pc, #80]	@ (800099c <MX_USART1_UART_Init+0x58>)
 800094a:	4a15      	ldr	r2, [pc, #84]	@ (80009a0 <MX_USART1_UART_Init+0x5c>)
 800094c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800094e:	4b13      	ldr	r3, [pc, #76]	@ (800099c <MX_USART1_UART_Init+0x58>)
 8000950:	22e1      	movs	r2, #225	@ 0xe1
 8000952:	0252      	lsls	r2, r2, #9
 8000954:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000956:	4b11      	ldr	r3, [pc, #68]	@ (800099c <MX_USART1_UART_Init+0x58>)
 8000958:	2200      	movs	r2, #0
 800095a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800095c:	4b0f      	ldr	r3, [pc, #60]	@ (800099c <MX_USART1_UART_Init+0x58>)
 800095e:	2200      	movs	r2, #0
 8000960:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000962:	4b0e      	ldr	r3, [pc, #56]	@ (800099c <MX_USART1_UART_Init+0x58>)
 8000964:	2200      	movs	r2, #0
 8000966:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000968:	4b0c      	ldr	r3, [pc, #48]	@ (800099c <MX_USART1_UART_Init+0x58>)
 800096a:	220c      	movs	r2, #12
 800096c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800096e:	4b0b      	ldr	r3, [pc, #44]	@ (800099c <MX_USART1_UART_Init+0x58>)
 8000970:	2200      	movs	r2, #0
 8000972:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000974:	4b09      	ldr	r3, [pc, #36]	@ (800099c <MX_USART1_UART_Init+0x58>)
 8000976:	2200      	movs	r2, #0
 8000978:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800097a:	4b08      	ldr	r3, [pc, #32]	@ (800099c <MX_USART1_UART_Init+0x58>)
 800097c:	2200      	movs	r2, #0
 800097e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000980:	4b06      	ldr	r3, [pc, #24]	@ (800099c <MX_USART1_UART_Init+0x58>)
 8000982:	2200      	movs	r2, #0
 8000984:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000986:	4b05      	ldr	r3, [pc, #20]	@ (800099c <MX_USART1_UART_Init+0x58>)
 8000988:	0018      	movs	r0, r3
 800098a:	f001 fc33 	bl	80021f4 <HAL_UART_Init>
 800098e:	1e03      	subs	r3, r0, #0
 8000990:	d001      	beq.n	8000996 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000992:	f7ff ff4b 	bl	800082c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000996:	46c0      	nop			@ (mov r8, r8)
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	200001c0 	.word	0x200001c0
 80009a0:	40013800 	.word	0x40013800

080009a4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009a8:	4b14      	ldr	r3, [pc, #80]	@ (80009fc <MX_USART2_UART_Init+0x58>)
 80009aa:	4a15      	ldr	r2, [pc, #84]	@ (8000a00 <MX_USART2_UART_Init+0x5c>)
 80009ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009ae:	4b13      	ldr	r3, [pc, #76]	@ (80009fc <MX_USART2_UART_Init+0x58>)
 80009b0:	22e1      	movs	r2, #225	@ 0xe1
 80009b2:	0252      	lsls	r2, r2, #9
 80009b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009b6:	4b11      	ldr	r3, [pc, #68]	@ (80009fc <MX_USART2_UART_Init+0x58>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009bc:	4b0f      	ldr	r3, [pc, #60]	@ (80009fc <MX_USART2_UART_Init+0x58>)
 80009be:	2200      	movs	r2, #0
 80009c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009c2:	4b0e      	ldr	r3, [pc, #56]	@ (80009fc <MX_USART2_UART_Init+0x58>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009c8:	4b0c      	ldr	r3, [pc, #48]	@ (80009fc <MX_USART2_UART_Init+0x58>)
 80009ca:	220c      	movs	r2, #12
 80009cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ce:	4b0b      	ldr	r3, [pc, #44]	@ (80009fc <MX_USART2_UART_Init+0x58>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009d4:	4b09      	ldr	r3, [pc, #36]	@ (80009fc <MX_USART2_UART_Init+0x58>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009da:	4b08      	ldr	r3, [pc, #32]	@ (80009fc <MX_USART2_UART_Init+0x58>)
 80009dc:	2200      	movs	r2, #0
 80009de:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009e0:	4b06      	ldr	r3, [pc, #24]	@ (80009fc <MX_USART2_UART_Init+0x58>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009e6:	4b05      	ldr	r3, [pc, #20]	@ (80009fc <MX_USART2_UART_Init+0x58>)
 80009e8:	0018      	movs	r0, r3
 80009ea:	f001 fc03 	bl	80021f4 <HAL_UART_Init>
 80009ee:	1e03      	subs	r3, r0, #0
 80009f0:	d001      	beq.n	80009f6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80009f2:	f7ff ff1b 	bl	800082c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009f6:	46c0      	nop			@ (mov r8, r8)
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	20000248 	.word	0x20000248
 8000a00:	40004400 	.word	0x40004400

08000a04 <MX_USART4_UART_Init>:
/* USART4 init function */

void MX_USART4_UART_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 8000a08:	4b14      	ldr	r3, [pc, #80]	@ (8000a5c <MX_USART4_UART_Init+0x58>)
 8000a0a:	4a15      	ldr	r2, [pc, #84]	@ (8000a60 <MX_USART4_UART_Init+0x5c>)
 8000a0c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8000a0e:	4b13      	ldr	r3, [pc, #76]	@ (8000a5c <MX_USART4_UART_Init+0x58>)
 8000a10:	2296      	movs	r2, #150	@ 0x96
 8000a12:	0192      	lsls	r2, r2, #6
 8000a14:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000a16:	4b11      	ldr	r3, [pc, #68]	@ (8000a5c <MX_USART4_UART_Init+0x58>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000a1c:	4b0f      	ldr	r3, [pc, #60]	@ (8000a5c <MX_USART4_UART_Init+0x58>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000a22:	4b0e      	ldr	r3, [pc, #56]	@ (8000a5c <MX_USART4_UART_Init+0x58>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000a28:	4b0c      	ldr	r3, [pc, #48]	@ (8000a5c <MX_USART4_UART_Init+0x58>)
 8000a2a:	220c      	movs	r2, #12
 8000a2c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a2e:	4b0b      	ldr	r3, [pc, #44]	@ (8000a5c <MX_USART4_UART_Init+0x58>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a34:	4b09      	ldr	r3, [pc, #36]	@ (8000a5c <MX_USART4_UART_Init+0x58>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a3a:	4b08      	ldr	r3, [pc, #32]	@ (8000a5c <MX_USART4_UART_Init+0x58>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a40:	4b06      	ldr	r3, [pc, #24]	@ (8000a5c <MX_USART4_UART_Init+0x58>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000a46:	4b05      	ldr	r3, [pc, #20]	@ (8000a5c <MX_USART4_UART_Init+0x58>)
 8000a48:	0018      	movs	r0, r3
 8000a4a:	f001 fbd3 	bl	80021f4 <HAL_UART_Init>
 8000a4e:	1e03      	subs	r3, r0, #0
 8000a50:	d001      	beq.n	8000a56 <MX_USART4_UART_Init+0x52>
  {
    Error_Handler();
 8000a52:	f7ff feeb 	bl	800082c <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 8000a56:	46c0      	nop			@ (mov r8, r8)
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	200002d0 	.word	0x200002d0
 8000a60:	40004c00 	.word	0x40004c00

08000a64 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000a64:	b590      	push	{r4, r7, lr}
 8000a66:	b08d      	sub	sp, #52	@ 0x34
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a6c:	241c      	movs	r4, #28
 8000a6e:	193b      	adds	r3, r7, r4
 8000a70:	0018      	movs	r0, r3
 8000a72:	2314      	movs	r3, #20
 8000a74:	001a      	movs	r2, r3
 8000a76:	2100      	movs	r1, #0
 8000a78:	f002 ffcc 	bl	8003a14 <memset>
  if(uartHandle->Instance==LPUART1)
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a6b      	ldr	r2, [pc, #428]	@ (8000c30 <HAL_UART_MspInit+0x1cc>)
 8000a82:	4293      	cmp	r3, r2
 8000a84:	d132      	bne.n	8000aec <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000a86:	4b6b      	ldr	r3, [pc, #428]	@ (8000c34 <HAL_UART_MspInit+0x1d0>)
 8000a88:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000a8a:	4b6a      	ldr	r3, [pc, #424]	@ (8000c34 <HAL_UART_MspInit+0x1d0>)
 8000a8c:	2180      	movs	r1, #128	@ 0x80
 8000a8e:	02c9      	lsls	r1, r1, #11
 8000a90:	430a      	orrs	r2, r1
 8000a92:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a94:	4b67      	ldr	r3, [pc, #412]	@ (8000c34 <HAL_UART_MspInit+0x1d0>)
 8000a96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000a98:	4b66      	ldr	r3, [pc, #408]	@ (8000c34 <HAL_UART_MspInit+0x1d0>)
 8000a9a:	2102      	movs	r1, #2
 8000a9c:	430a      	orrs	r2, r1
 8000a9e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000aa0:	4b64      	ldr	r3, [pc, #400]	@ (8000c34 <HAL_UART_MspInit+0x1d0>)
 8000aa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000aa4:	2202      	movs	r2, #2
 8000aa6:	4013      	ands	r3, r2
 8000aa8:	61bb      	str	r3, [r7, #24]
 8000aaa:	69bb      	ldr	r3, [r7, #24]
    /**LPUART1 GPIO Configuration
    PB10     ------> LPUART1_RX
    PB11     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000aac:	193b      	adds	r3, r7, r4
 8000aae:	22c0      	movs	r2, #192	@ 0xc0
 8000ab0:	0112      	lsls	r2, r2, #4
 8000ab2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab4:	0021      	movs	r1, r4
 8000ab6:	187b      	adds	r3, r7, r1
 8000ab8:	2202      	movs	r2, #2
 8000aba:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abc:	187b      	adds	r3, r7, r1
 8000abe:	2200      	movs	r2, #0
 8000ac0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ac2:	187b      	adds	r3, r7, r1
 8000ac4:	2203      	movs	r2, #3
 8000ac6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_LPUART1;
 8000ac8:	187b      	adds	r3, r7, r1
 8000aca:	2207      	movs	r2, #7
 8000acc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ace:	187b      	adds	r3, r7, r1
 8000ad0:	4a59      	ldr	r2, [pc, #356]	@ (8000c38 <HAL_UART_MspInit+0x1d4>)
 8000ad2:	0019      	movs	r1, r3
 8000ad4:	0010      	movs	r0, r2
 8000ad6:	f000 fadb 	bl	8001090 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(RNG_LPUART1_IRQn, 0, 0);
 8000ada:	2200      	movs	r2, #0
 8000adc:	2100      	movs	r1, #0
 8000ade:	201d      	movs	r0, #29
 8000ae0:	f000 fa1c 	bl	8000f1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RNG_LPUART1_IRQn);
 8000ae4:	201d      	movs	r0, #29
 8000ae6:	f000 fa2e 	bl	8000f46 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }
}
 8000aea:	e09d      	b.n	8000c28 <HAL_UART_MspInit+0x1c4>
  else if(uartHandle->Instance==USART1)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a52      	ldr	r2, [pc, #328]	@ (8000c3c <HAL_UART_MspInit+0x1d8>)
 8000af2:	4293      	cmp	r3, r2
 8000af4:	d131      	bne.n	8000b5a <HAL_UART_MspInit+0xf6>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000af6:	4b4f      	ldr	r3, [pc, #316]	@ (8000c34 <HAL_UART_MspInit+0x1d0>)
 8000af8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000afa:	4b4e      	ldr	r3, [pc, #312]	@ (8000c34 <HAL_UART_MspInit+0x1d0>)
 8000afc:	2180      	movs	r1, #128	@ 0x80
 8000afe:	01c9      	lsls	r1, r1, #7
 8000b00:	430a      	orrs	r2, r1
 8000b02:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b04:	4b4b      	ldr	r3, [pc, #300]	@ (8000c34 <HAL_UART_MspInit+0x1d0>)
 8000b06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000b08:	4b4a      	ldr	r3, [pc, #296]	@ (8000c34 <HAL_UART_MspInit+0x1d0>)
 8000b0a:	2102      	movs	r1, #2
 8000b0c:	430a      	orrs	r2, r1
 8000b0e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000b10:	4b48      	ldr	r3, [pc, #288]	@ (8000c34 <HAL_UART_MspInit+0x1d0>)
 8000b12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b14:	2202      	movs	r2, #2
 8000b16:	4013      	ands	r3, r2
 8000b18:	617b      	str	r3, [r7, #20]
 8000b1a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b1c:	211c      	movs	r1, #28
 8000b1e:	187b      	adds	r3, r7, r1
 8000b20:	22c0      	movs	r2, #192	@ 0xc0
 8000b22:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b24:	187b      	adds	r3, r7, r1
 8000b26:	2202      	movs	r2, #2
 8000b28:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2a:	187b      	adds	r3, r7, r1
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b30:	187b      	adds	r3, r7, r1
 8000b32:	2203      	movs	r2, #3
 8000b34:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8000b36:	187b      	adds	r3, r7, r1
 8000b38:	2200      	movs	r2, #0
 8000b3a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b3c:	187b      	adds	r3, r7, r1
 8000b3e:	4a3e      	ldr	r2, [pc, #248]	@ (8000c38 <HAL_UART_MspInit+0x1d4>)
 8000b40:	0019      	movs	r1, r3
 8000b42:	0010      	movs	r0, r2
 8000b44:	f000 faa4 	bl	8001090 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000b48:	2200      	movs	r2, #0
 8000b4a:	2100      	movs	r1, #0
 8000b4c:	201b      	movs	r0, #27
 8000b4e:	f000 f9e5 	bl	8000f1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000b52:	201b      	movs	r0, #27
 8000b54:	f000 f9f7 	bl	8000f46 <HAL_NVIC_EnableIRQ>
}
 8000b58:	e066      	b.n	8000c28 <HAL_UART_MspInit+0x1c4>
  else if(uartHandle->Instance==USART2)
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	4a38      	ldr	r2, [pc, #224]	@ (8000c40 <HAL_UART_MspInit+0x1dc>)
 8000b60:	4293      	cmp	r3, r2
 8000b62:	d12a      	bne.n	8000bba <HAL_UART_MspInit+0x156>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b64:	4b33      	ldr	r3, [pc, #204]	@ (8000c34 <HAL_UART_MspInit+0x1d0>)
 8000b66:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000b68:	4b32      	ldr	r3, [pc, #200]	@ (8000c34 <HAL_UART_MspInit+0x1d0>)
 8000b6a:	2180      	movs	r1, #128	@ 0x80
 8000b6c:	0289      	lsls	r1, r1, #10
 8000b6e:	430a      	orrs	r2, r1
 8000b70:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b72:	4b30      	ldr	r3, [pc, #192]	@ (8000c34 <HAL_UART_MspInit+0x1d0>)
 8000b74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000b76:	4b2f      	ldr	r3, [pc, #188]	@ (8000c34 <HAL_UART_MspInit+0x1d0>)
 8000b78:	2101      	movs	r1, #1
 8000b7a:	430a      	orrs	r2, r1
 8000b7c:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000b7e:	4b2d      	ldr	r3, [pc, #180]	@ (8000c34 <HAL_UART_MspInit+0x1d0>)
 8000b80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b82:	2201      	movs	r2, #1
 8000b84:	4013      	ands	r3, r2
 8000b86:	613b      	str	r3, [r7, #16]
 8000b88:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b8a:	211c      	movs	r1, #28
 8000b8c:	187b      	adds	r3, r7, r1
 8000b8e:	220c      	movs	r2, #12
 8000b90:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b92:	187b      	adds	r3, r7, r1
 8000b94:	2202      	movs	r2, #2
 8000b96:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b98:	187b      	adds	r3, r7, r1
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b9e:	187b      	adds	r3, r7, r1
 8000ba0:	2203      	movs	r2, #3
 8000ba2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000ba4:	187b      	adds	r3, r7, r1
 8000ba6:	2204      	movs	r2, #4
 8000ba8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000baa:	187a      	adds	r2, r7, r1
 8000bac:	23a0      	movs	r3, #160	@ 0xa0
 8000bae:	05db      	lsls	r3, r3, #23
 8000bb0:	0011      	movs	r1, r2
 8000bb2:	0018      	movs	r0, r3
 8000bb4:	f000 fa6c 	bl	8001090 <HAL_GPIO_Init>
}
 8000bb8:	e036      	b.n	8000c28 <HAL_UART_MspInit+0x1c4>
  else if(uartHandle->Instance==USART4)
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	4a21      	ldr	r2, [pc, #132]	@ (8000c44 <HAL_UART_MspInit+0x1e0>)
 8000bc0:	4293      	cmp	r3, r2
 8000bc2:	d131      	bne.n	8000c28 <HAL_UART_MspInit+0x1c4>
    __HAL_RCC_USART4_CLK_ENABLE();
 8000bc4:	4b1b      	ldr	r3, [pc, #108]	@ (8000c34 <HAL_UART_MspInit+0x1d0>)
 8000bc6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000bc8:	4b1a      	ldr	r3, [pc, #104]	@ (8000c34 <HAL_UART_MspInit+0x1d0>)
 8000bca:	2180      	movs	r1, #128	@ 0x80
 8000bcc:	0309      	lsls	r1, r1, #12
 8000bce:	430a      	orrs	r2, r1
 8000bd0:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bd2:	4b18      	ldr	r3, [pc, #96]	@ (8000c34 <HAL_UART_MspInit+0x1d0>)
 8000bd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000bd6:	4b17      	ldr	r3, [pc, #92]	@ (8000c34 <HAL_UART_MspInit+0x1d0>)
 8000bd8:	2101      	movs	r1, #1
 8000bda:	430a      	orrs	r2, r1
 8000bdc:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000bde:	4b15      	ldr	r3, [pc, #84]	@ (8000c34 <HAL_UART_MspInit+0x1d0>)
 8000be0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000be2:	2201      	movs	r2, #1
 8000be4:	4013      	ands	r3, r2
 8000be6:	60fb      	str	r3, [r7, #12]
 8000be8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000bea:	211c      	movs	r1, #28
 8000bec:	187b      	adds	r3, r7, r1
 8000bee:	2203      	movs	r2, #3
 8000bf0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf2:	187b      	adds	r3, r7, r1
 8000bf4:	2202      	movs	r2, #2
 8000bf6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf8:	187b      	adds	r3, r7, r1
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bfe:	187b      	adds	r3, r7, r1
 8000c00:	2203      	movs	r2, #3
 8000c02:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 8000c04:	187b      	adds	r3, r7, r1
 8000c06:	2206      	movs	r2, #6
 8000c08:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c0a:	187a      	adds	r2, r7, r1
 8000c0c:	23a0      	movs	r3, #160	@ 0xa0
 8000c0e:	05db      	lsls	r3, r3, #23
 8000c10:	0011      	movs	r1, r2
 8000c12:	0018      	movs	r0, r3
 8000c14:	f000 fa3c 	bl	8001090 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART4_5_IRQn, 0, 0);
 8000c18:	2200      	movs	r2, #0
 8000c1a:	2100      	movs	r1, #0
 8000c1c:	200e      	movs	r0, #14
 8000c1e:	f000 f97d 	bl	8000f1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
 8000c22:	200e      	movs	r0, #14
 8000c24:	f000 f98f 	bl	8000f46 <HAL_NVIC_EnableIRQ>
}
 8000c28:	46c0      	nop			@ (mov r8, r8)
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	b00d      	add	sp, #52	@ 0x34
 8000c2e:	bd90      	pop	{r4, r7, pc}
 8000c30:	40004800 	.word	0x40004800
 8000c34:	40021000 	.word	0x40021000
 8000c38:	50000400 	.word	0x50000400
 8000c3c:	40013800 	.word	0x40013800
 8000c40:	40004400 	.word	0x40004400
 8000c44:	40004c00 	.word	0x40004c00

08000c48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000c48:	480d      	ldr	r0, [pc, #52]	@ (8000c80 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000c4a:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c4c:	f7ff fe46 	bl	80008dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c50:	480c      	ldr	r0, [pc, #48]	@ (8000c84 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c52:	490d      	ldr	r1, [pc, #52]	@ (8000c88 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c54:	4a0d      	ldr	r2, [pc, #52]	@ (8000c8c <LoopForever+0xe>)
  movs r3, #0
 8000c56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c58:	e002      	b.n	8000c60 <LoopCopyDataInit>

08000c5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c5e:	3304      	adds	r3, #4

08000c60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c64:	d3f9      	bcc.n	8000c5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c66:	4a0a      	ldr	r2, [pc, #40]	@ (8000c90 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c68:	4c0a      	ldr	r4, [pc, #40]	@ (8000c94 <LoopForever+0x16>)
  movs r3, #0
 8000c6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c6c:	e001      	b.n	8000c72 <LoopFillZerobss>

08000c6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c70:	3204      	adds	r2, #4

08000c72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c74:	d3fb      	bcc.n	8000c6e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c76:	f002 fed5 	bl	8003a24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c7a:	f7ff fc47 	bl	800050c <main>

08000c7e <LoopForever>:

LoopForever:
    b LoopForever
 8000c7e:	e7fe      	b.n	8000c7e <LoopForever>
   ldr   r0, =_estack
 8000c80:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000c84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c88:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c8c:	08003b64 	.word	0x08003b64
  ldr r2, =_sbss
 8000c90:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c94:	2000035c 	.word	0x2000035c

08000c98 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c98:	e7fe      	b.n	8000c98 <ADC1_COMP_IRQHandler>
	...

08000c9c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ca2:	1dfb      	adds	r3, r7, #7
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000ca8:	4b0b      	ldr	r3, [pc, #44]	@ (8000cd8 <HAL_Init+0x3c>)
 8000caa:	681a      	ldr	r2, [r3, #0]
 8000cac:	4b0a      	ldr	r3, [pc, #40]	@ (8000cd8 <HAL_Init+0x3c>)
 8000cae:	2140      	movs	r1, #64	@ 0x40
 8000cb0:	430a      	orrs	r2, r1
 8000cb2:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cb4:	2003      	movs	r0, #3
 8000cb6:	f000 f811 	bl	8000cdc <HAL_InitTick>
 8000cba:	1e03      	subs	r3, r0, #0
 8000cbc:	d003      	beq.n	8000cc6 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000cbe:	1dfb      	adds	r3, r7, #7
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	701a      	strb	r2, [r3, #0]
 8000cc4:	e001      	b.n	8000cca <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000cc6:	f7ff fdb7 	bl	8000838 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000cca:	1dfb      	adds	r3, r7, #7
 8000ccc:	781b      	ldrb	r3, [r3, #0]
}
 8000cce:	0018      	movs	r0, r3
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	b002      	add	sp, #8
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	46c0      	nop			@ (mov r8, r8)
 8000cd8:	40022000 	.word	0x40022000

08000cdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cdc:	b590      	push	{r4, r7, lr}
 8000cde:	b083      	sub	sp, #12
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ce4:	4b14      	ldr	r3, [pc, #80]	@ (8000d38 <HAL_InitTick+0x5c>)
 8000ce6:	681c      	ldr	r4, [r3, #0]
 8000ce8:	4b14      	ldr	r3, [pc, #80]	@ (8000d3c <HAL_InitTick+0x60>)
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	0019      	movs	r1, r3
 8000cee:	23fa      	movs	r3, #250	@ 0xfa
 8000cf0:	0098      	lsls	r0, r3, #2
 8000cf2:	f7ff fa11 	bl	8000118 <__udivsi3>
 8000cf6:	0003      	movs	r3, r0
 8000cf8:	0019      	movs	r1, r3
 8000cfa:	0020      	movs	r0, r4
 8000cfc:	f7ff fa0c 	bl	8000118 <__udivsi3>
 8000d00:	0003      	movs	r3, r0
 8000d02:	0018      	movs	r0, r3
 8000d04:	f000 f92f 	bl	8000f66 <HAL_SYSTICK_Config>
 8000d08:	1e03      	subs	r3, r0, #0
 8000d0a:	d001      	beq.n	8000d10 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	e00f      	b.n	8000d30 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	2b03      	cmp	r3, #3
 8000d14:	d80b      	bhi.n	8000d2e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d16:	6879      	ldr	r1, [r7, #4]
 8000d18:	2301      	movs	r3, #1
 8000d1a:	425b      	negs	r3, r3
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	0018      	movs	r0, r3
 8000d20:	f000 f8fc 	bl	8000f1c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d24:	4b06      	ldr	r3, [pc, #24]	@ (8000d40 <HAL_InitTick+0x64>)
 8000d26:	687a      	ldr	r2, [r7, #4]
 8000d28:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	e000      	b.n	8000d30 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000d2e:	2301      	movs	r3, #1
}
 8000d30:	0018      	movs	r0, r3
 8000d32:	46bd      	mov	sp, r7
 8000d34:	b003      	add	sp, #12
 8000d36:	bd90      	pop	{r4, r7, pc}
 8000d38:	20000000 	.word	0x20000000
 8000d3c:	20000008 	.word	0x20000008
 8000d40:	20000004 	.word	0x20000004

08000d44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d48:	4b05      	ldr	r3, [pc, #20]	@ (8000d60 <HAL_IncTick+0x1c>)
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	001a      	movs	r2, r3
 8000d4e:	4b05      	ldr	r3, [pc, #20]	@ (8000d64 <HAL_IncTick+0x20>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	18d2      	adds	r2, r2, r3
 8000d54:	4b03      	ldr	r3, [pc, #12]	@ (8000d64 <HAL_IncTick+0x20>)
 8000d56:	601a      	str	r2, [r3, #0]
}
 8000d58:	46c0      	nop			@ (mov r8, r8)
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	46c0      	nop			@ (mov r8, r8)
 8000d60:	20000008 	.word	0x20000008
 8000d64:	20000358 	.word	0x20000358

08000d68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d6c:	4b02      	ldr	r3, [pc, #8]	@ (8000d78 <HAL_GetTick+0x10>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
}
 8000d70:	0018      	movs	r0, r3
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	46c0      	nop			@ (mov r8, r8)
 8000d78:	20000358 	.word	0x20000358

08000d7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b084      	sub	sp, #16
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d84:	f7ff fff0 	bl	8000d68 <HAL_GetTick>
 8000d88:	0003      	movs	r3, r0
 8000d8a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	3301      	adds	r3, #1
 8000d94:	d005      	beq.n	8000da2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d96:	4b0a      	ldr	r3, [pc, #40]	@ (8000dc0 <HAL_Delay+0x44>)
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	001a      	movs	r2, r3
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	189b      	adds	r3, r3, r2
 8000da0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000da2:	46c0      	nop			@ (mov r8, r8)
 8000da4:	f7ff ffe0 	bl	8000d68 <HAL_GetTick>
 8000da8:	0002      	movs	r2, r0
 8000daa:	68bb      	ldr	r3, [r7, #8]
 8000dac:	1ad3      	subs	r3, r2, r3
 8000dae:	68fa      	ldr	r2, [r7, #12]
 8000db0:	429a      	cmp	r2, r3
 8000db2:	d8f7      	bhi.n	8000da4 <HAL_Delay+0x28>
  {
  }
}
 8000db4:	46c0      	nop			@ (mov r8, r8)
 8000db6:	46c0      	nop			@ (mov r8, r8)
 8000db8:	46bd      	mov	sp, r7
 8000dba:	b004      	add	sp, #16
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	46c0      	nop			@ (mov r8, r8)
 8000dc0:	20000008 	.word	0x20000008

08000dc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	0002      	movs	r2, r0
 8000dcc:	1dfb      	adds	r3, r7, #7
 8000dce:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000dd0:	1dfb      	adds	r3, r7, #7
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	2b7f      	cmp	r3, #127	@ 0x7f
 8000dd6:	d809      	bhi.n	8000dec <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dd8:	1dfb      	adds	r3, r7, #7
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	001a      	movs	r2, r3
 8000dde:	231f      	movs	r3, #31
 8000de0:	401a      	ands	r2, r3
 8000de2:	4b04      	ldr	r3, [pc, #16]	@ (8000df4 <__NVIC_EnableIRQ+0x30>)
 8000de4:	2101      	movs	r1, #1
 8000de6:	4091      	lsls	r1, r2
 8000de8:	000a      	movs	r2, r1
 8000dea:	601a      	str	r2, [r3, #0]
  }
}
 8000dec:	46c0      	nop			@ (mov r8, r8)
 8000dee:	46bd      	mov	sp, r7
 8000df0:	b002      	add	sp, #8
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	e000e100 	.word	0xe000e100

08000df8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000df8:	b590      	push	{r4, r7, lr}
 8000dfa:	b083      	sub	sp, #12
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	0002      	movs	r2, r0
 8000e00:	6039      	str	r1, [r7, #0]
 8000e02:	1dfb      	adds	r3, r7, #7
 8000e04:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000e06:	1dfb      	adds	r3, r7, #7
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	2b7f      	cmp	r3, #127	@ 0x7f
 8000e0c:	d828      	bhi.n	8000e60 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e0e:	4a2f      	ldr	r2, [pc, #188]	@ (8000ecc <__NVIC_SetPriority+0xd4>)
 8000e10:	1dfb      	adds	r3, r7, #7
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	b25b      	sxtb	r3, r3
 8000e16:	089b      	lsrs	r3, r3, #2
 8000e18:	33c0      	adds	r3, #192	@ 0xc0
 8000e1a:	009b      	lsls	r3, r3, #2
 8000e1c:	589b      	ldr	r3, [r3, r2]
 8000e1e:	1dfa      	adds	r2, r7, #7
 8000e20:	7812      	ldrb	r2, [r2, #0]
 8000e22:	0011      	movs	r1, r2
 8000e24:	2203      	movs	r2, #3
 8000e26:	400a      	ands	r2, r1
 8000e28:	00d2      	lsls	r2, r2, #3
 8000e2a:	21ff      	movs	r1, #255	@ 0xff
 8000e2c:	4091      	lsls	r1, r2
 8000e2e:	000a      	movs	r2, r1
 8000e30:	43d2      	mvns	r2, r2
 8000e32:	401a      	ands	r2, r3
 8000e34:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	019b      	lsls	r3, r3, #6
 8000e3a:	22ff      	movs	r2, #255	@ 0xff
 8000e3c:	401a      	ands	r2, r3
 8000e3e:	1dfb      	adds	r3, r7, #7
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	0018      	movs	r0, r3
 8000e44:	2303      	movs	r3, #3
 8000e46:	4003      	ands	r3, r0
 8000e48:	00db      	lsls	r3, r3, #3
 8000e4a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e4c:	481f      	ldr	r0, [pc, #124]	@ (8000ecc <__NVIC_SetPriority+0xd4>)
 8000e4e:	1dfb      	adds	r3, r7, #7
 8000e50:	781b      	ldrb	r3, [r3, #0]
 8000e52:	b25b      	sxtb	r3, r3
 8000e54:	089b      	lsrs	r3, r3, #2
 8000e56:	430a      	orrs	r2, r1
 8000e58:	33c0      	adds	r3, #192	@ 0xc0
 8000e5a:	009b      	lsls	r3, r3, #2
 8000e5c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000e5e:	e031      	b.n	8000ec4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e60:	4a1b      	ldr	r2, [pc, #108]	@ (8000ed0 <__NVIC_SetPriority+0xd8>)
 8000e62:	1dfb      	adds	r3, r7, #7
 8000e64:	781b      	ldrb	r3, [r3, #0]
 8000e66:	0019      	movs	r1, r3
 8000e68:	230f      	movs	r3, #15
 8000e6a:	400b      	ands	r3, r1
 8000e6c:	3b08      	subs	r3, #8
 8000e6e:	089b      	lsrs	r3, r3, #2
 8000e70:	3306      	adds	r3, #6
 8000e72:	009b      	lsls	r3, r3, #2
 8000e74:	18d3      	adds	r3, r2, r3
 8000e76:	3304      	adds	r3, #4
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	1dfa      	adds	r2, r7, #7
 8000e7c:	7812      	ldrb	r2, [r2, #0]
 8000e7e:	0011      	movs	r1, r2
 8000e80:	2203      	movs	r2, #3
 8000e82:	400a      	ands	r2, r1
 8000e84:	00d2      	lsls	r2, r2, #3
 8000e86:	21ff      	movs	r1, #255	@ 0xff
 8000e88:	4091      	lsls	r1, r2
 8000e8a:	000a      	movs	r2, r1
 8000e8c:	43d2      	mvns	r2, r2
 8000e8e:	401a      	ands	r2, r3
 8000e90:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	019b      	lsls	r3, r3, #6
 8000e96:	22ff      	movs	r2, #255	@ 0xff
 8000e98:	401a      	ands	r2, r3
 8000e9a:	1dfb      	adds	r3, r7, #7
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	0018      	movs	r0, r3
 8000ea0:	2303      	movs	r3, #3
 8000ea2:	4003      	ands	r3, r0
 8000ea4:	00db      	lsls	r3, r3, #3
 8000ea6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ea8:	4809      	ldr	r0, [pc, #36]	@ (8000ed0 <__NVIC_SetPriority+0xd8>)
 8000eaa:	1dfb      	adds	r3, r7, #7
 8000eac:	781b      	ldrb	r3, [r3, #0]
 8000eae:	001c      	movs	r4, r3
 8000eb0:	230f      	movs	r3, #15
 8000eb2:	4023      	ands	r3, r4
 8000eb4:	3b08      	subs	r3, #8
 8000eb6:	089b      	lsrs	r3, r3, #2
 8000eb8:	430a      	orrs	r2, r1
 8000eba:	3306      	adds	r3, #6
 8000ebc:	009b      	lsls	r3, r3, #2
 8000ebe:	18c3      	adds	r3, r0, r3
 8000ec0:	3304      	adds	r3, #4
 8000ec2:	601a      	str	r2, [r3, #0]
}
 8000ec4:	46c0      	nop			@ (mov r8, r8)
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	b003      	add	sp, #12
 8000eca:	bd90      	pop	{r4, r7, pc}
 8000ecc:	e000e100 	.word	0xe000e100
 8000ed0:	e000ed00 	.word	0xe000ed00

08000ed4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	1e5a      	subs	r2, r3, #1
 8000ee0:	2380      	movs	r3, #128	@ 0x80
 8000ee2:	045b      	lsls	r3, r3, #17
 8000ee4:	429a      	cmp	r2, r3
 8000ee6:	d301      	bcc.n	8000eec <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ee8:	2301      	movs	r3, #1
 8000eea:	e010      	b.n	8000f0e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eec:	4b0a      	ldr	r3, [pc, #40]	@ (8000f18 <SysTick_Config+0x44>)
 8000eee:	687a      	ldr	r2, [r7, #4]
 8000ef0:	3a01      	subs	r2, #1
 8000ef2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	425b      	negs	r3, r3
 8000ef8:	2103      	movs	r1, #3
 8000efa:	0018      	movs	r0, r3
 8000efc:	f7ff ff7c 	bl	8000df8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f00:	4b05      	ldr	r3, [pc, #20]	@ (8000f18 <SysTick_Config+0x44>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f06:	4b04      	ldr	r3, [pc, #16]	@ (8000f18 <SysTick_Config+0x44>)
 8000f08:	2207      	movs	r2, #7
 8000f0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f0c:	2300      	movs	r3, #0
}
 8000f0e:	0018      	movs	r0, r3
 8000f10:	46bd      	mov	sp, r7
 8000f12:	b002      	add	sp, #8
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	46c0      	nop			@ (mov r8, r8)
 8000f18:	e000e010 	.word	0xe000e010

08000f1c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b084      	sub	sp, #16
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	60b9      	str	r1, [r7, #8]
 8000f24:	607a      	str	r2, [r7, #4]
 8000f26:	210f      	movs	r1, #15
 8000f28:	187b      	adds	r3, r7, r1
 8000f2a:	1c02      	adds	r2, r0, #0
 8000f2c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000f2e:	68ba      	ldr	r2, [r7, #8]
 8000f30:	187b      	adds	r3, r7, r1
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	b25b      	sxtb	r3, r3
 8000f36:	0011      	movs	r1, r2
 8000f38:	0018      	movs	r0, r3
 8000f3a:	f7ff ff5d 	bl	8000df8 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

}
 8000f3e:	46c0      	nop			@ (mov r8, r8)
 8000f40:	46bd      	mov	sp, r7
 8000f42:	b004      	add	sp, #16
 8000f44:	bd80      	pop	{r7, pc}

08000f46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f46:	b580      	push	{r7, lr}
 8000f48:	b082      	sub	sp, #8
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	0002      	movs	r2, r0
 8000f4e:	1dfb      	adds	r3, r7, #7
 8000f50:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f52:	1dfb      	adds	r3, r7, #7
 8000f54:	781b      	ldrb	r3, [r3, #0]
 8000f56:	b25b      	sxtb	r3, r3
 8000f58:	0018      	movs	r0, r3
 8000f5a:	f7ff ff33 	bl	8000dc4 <__NVIC_EnableIRQ>
}
 8000f5e:	46c0      	nop			@ (mov r8, r8)
 8000f60:	46bd      	mov	sp, r7
 8000f62:	b002      	add	sp, #8
 8000f64:	bd80      	pop	{r7, pc}

08000f66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f66:	b580      	push	{r7, lr}
 8000f68:	b082      	sub	sp, #8
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	0018      	movs	r0, r3
 8000f72:	f7ff ffaf 	bl	8000ed4 <SysTick_Config>
 8000f76:	0003      	movs	r3, r0
}
 8000f78:	0018      	movs	r0, r3
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	b002      	add	sp, #8
 8000f7e:	bd80      	pop	{r7, pc}

08000f80 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f88:	230f      	movs	r3, #15
 8000f8a:	18fb      	adds	r3, r7, r3
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2225      	movs	r2, #37	@ 0x25
 8000f94:	5c9b      	ldrb	r3, [r3, r2]
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	2b02      	cmp	r3, #2
 8000f9a:	d008      	beq.n	8000fae <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2204      	movs	r2, #4
 8000fa0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2224      	movs	r2, #36	@ 0x24
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8000faa:	2301      	movs	r3, #1
 8000fac:	e024      	b.n	8000ff8 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	681a      	ldr	r2, [r3, #0]
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	210e      	movs	r1, #14
 8000fba:	438a      	bics	r2, r1
 8000fbc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	681a      	ldr	r2, [r3, #0]
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	2101      	movs	r1, #1
 8000fca:	438a      	bics	r2, r1
 8000fcc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fd2:	221c      	movs	r2, #28
 8000fd4:	401a      	ands	r2, r3
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fda:	2101      	movs	r1, #1
 8000fdc:	4091      	lsls	r1, r2
 8000fde:	000a      	movs	r2, r1
 8000fe0:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	2225      	movs	r2, #37	@ 0x25
 8000fe6:	2101      	movs	r1, #1
 8000fe8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2224      	movs	r2, #36	@ 0x24
 8000fee:	2100      	movs	r1, #0
 8000ff0:	5499      	strb	r1, [r3, r2]

    return status;
 8000ff2:	230f      	movs	r3, #15
 8000ff4:	18fb      	adds	r3, r7, r3
 8000ff6:	781b      	ldrb	r3, [r3, #0]
  }
}
 8000ff8:	0018      	movs	r0, r3
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	b004      	add	sp, #16
 8000ffe:	bd80      	pop	{r7, pc}

08001000 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b084      	sub	sp, #16
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001008:	210f      	movs	r1, #15
 800100a:	187b      	adds	r3, r7, r1
 800100c:	2200      	movs	r2, #0
 800100e:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2225      	movs	r2, #37	@ 0x25
 8001014:	5c9b      	ldrb	r3, [r3, r2]
 8001016:	b2db      	uxtb	r3, r3
 8001018:	2b02      	cmp	r3, #2
 800101a:	d006      	beq.n	800102a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2204      	movs	r2, #4
 8001020:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001022:	187b      	adds	r3, r7, r1
 8001024:	2201      	movs	r2, #1
 8001026:	701a      	strb	r2, [r3, #0]
 8001028:	e02a      	b.n	8001080 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	681a      	ldr	r2, [r3, #0]
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	210e      	movs	r1, #14
 8001036:	438a      	bics	r2, r1
 8001038:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	681a      	ldr	r2, [r3, #0]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	2101      	movs	r1, #1
 8001046:	438a      	bics	r2, r1
 8001048:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800104e:	221c      	movs	r2, #28
 8001050:	401a      	ands	r2, r3
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001056:	2101      	movs	r1, #1
 8001058:	4091      	lsls	r1, r2
 800105a:	000a      	movs	r2, r1
 800105c:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2225      	movs	r2, #37	@ 0x25
 8001062:	2101      	movs	r1, #1
 8001064:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2224      	movs	r2, #36	@ 0x24
 800106a:	2100      	movs	r1, #0
 800106c:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001072:	2b00      	cmp	r3, #0
 8001074:	d004      	beq.n	8001080 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800107a:	687a      	ldr	r2, [r7, #4]
 800107c:	0010      	movs	r0, r2
 800107e:	4798      	blx	r3
    }
  }
  return status;
 8001080:	230f      	movs	r3, #15
 8001082:	18fb      	adds	r3, r7, r3
 8001084:	781b      	ldrb	r3, [r3, #0]
}
 8001086:	0018      	movs	r0, r3
 8001088:	46bd      	mov	sp, r7
 800108a:	b004      	add	sp, #16
 800108c:	bd80      	pop	{r7, pc}
	...

08001090 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b086      	sub	sp, #24
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800109a:	2300      	movs	r3, #0
 800109c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800109e:	2300      	movs	r3, #0
 80010a0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80010a2:	2300      	movs	r3, #0
 80010a4:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80010a6:	e155      	b.n	8001354 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	2101      	movs	r1, #1
 80010ae:	697a      	ldr	r2, [r7, #20]
 80010b0:	4091      	lsls	r1, r2
 80010b2:	000a      	movs	r2, r1
 80010b4:	4013      	ands	r3, r2
 80010b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d100      	bne.n	80010c0 <HAL_GPIO_Init+0x30>
 80010be:	e146      	b.n	800134e <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	2203      	movs	r2, #3
 80010c6:	4013      	ands	r3, r2
 80010c8:	2b01      	cmp	r3, #1
 80010ca:	d005      	beq.n	80010d8 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	2203      	movs	r2, #3
 80010d2:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80010d4:	2b02      	cmp	r3, #2
 80010d6:	d130      	bne.n	800113a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	689b      	ldr	r3, [r3, #8]
 80010dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	005b      	lsls	r3, r3, #1
 80010e2:	2203      	movs	r2, #3
 80010e4:	409a      	lsls	r2, r3
 80010e6:	0013      	movs	r3, r2
 80010e8:	43da      	mvns	r2, r3
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	4013      	ands	r3, r2
 80010ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	68da      	ldr	r2, [r3, #12]
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	005b      	lsls	r3, r3, #1
 80010f8:	409a      	lsls	r2, r3
 80010fa:	0013      	movs	r3, r2
 80010fc:	693a      	ldr	r2, [r7, #16]
 80010fe:	4313      	orrs	r3, r2
 8001100:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	693a      	ldr	r2, [r7, #16]
 8001106:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800110e:	2201      	movs	r2, #1
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	409a      	lsls	r2, r3
 8001114:	0013      	movs	r3, r2
 8001116:	43da      	mvns	r2, r3
 8001118:	693b      	ldr	r3, [r7, #16]
 800111a:	4013      	ands	r3, r2
 800111c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	091b      	lsrs	r3, r3, #4
 8001124:	2201      	movs	r2, #1
 8001126:	401a      	ands	r2, r3
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	409a      	lsls	r2, r3
 800112c:	0013      	movs	r3, r2
 800112e:	693a      	ldr	r2, [r7, #16]
 8001130:	4313      	orrs	r3, r2
 8001132:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	693a      	ldr	r2, [r7, #16]
 8001138:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	2203      	movs	r2, #3
 8001140:	4013      	ands	r3, r2
 8001142:	2b03      	cmp	r3, #3
 8001144:	d017      	beq.n	8001176 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	68db      	ldr	r3, [r3, #12]
 800114a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	005b      	lsls	r3, r3, #1
 8001150:	2203      	movs	r2, #3
 8001152:	409a      	lsls	r2, r3
 8001154:	0013      	movs	r3, r2
 8001156:	43da      	mvns	r2, r3
 8001158:	693b      	ldr	r3, [r7, #16]
 800115a:	4013      	ands	r3, r2
 800115c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	689a      	ldr	r2, [r3, #8]
 8001162:	697b      	ldr	r3, [r7, #20]
 8001164:	005b      	lsls	r3, r3, #1
 8001166:	409a      	lsls	r2, r3
 8001168:	0013      	movs	r3, r2
 800116a:	693a      	ldr	r2, [r7, #16]
 800116c:	4313      	orrs	r3, r2
 800116e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	693a      	ldr	r2, [r7, #16]
 8001174:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	2203      	movs	r2, #3
 800117c:	4013      	ands	r3, r2
 800117e:	2b02      	cmp	r3, #2
 8001180:	d123      	bne.n	80011ca <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	08da      	lsrs	r2, r3, #3
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	3208      	adds	r2, #8
 800118a:	0092      	lsls	r2, r2, #2
 800118c:	58d3      	ldr	r3, [r2, r3]
 800118e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	2207      	movs	r2, #7
 8001194:	4013      	ands	r3, r2
 8001196:	009b      	lsls	r3, r3, #2
 8001198:	220f      	movs	r2, #15
 800119a:	409a      	lsls	r2, r3
 800119c:	0013      	movs	r3, r2
 800119e:	43da      	mvns	r2, r3
 80011a0:	693b      	ldr	r3, [r7, #16]
 80011a2:	4013      	ands	r3, r2
 80011a4:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	691a      	ldr	r2, [r3, #16]
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	2107      	movs	r1, #7
 80011ae:	400b      	ands	r3, r1
 80011b0:	009b      	lsls	r3, r3, #2
 80011b2:	409a      	lsls	r2, r3
 80011b4:	0013      	movs	r3, r2
 80011b6:	693a      	ldr	r2, [r7, #16]
 80011b8:	4313      	orrs	r3, r2
 80011ba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	08da      	lsrs	r2, r3, #3
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	3208      	adds	r2, #8
 80011c4:	0092      	lsls	r2, r2, #2
 80011c6:	6939      	ldr	r1, [r7, #16]
 80011c8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	005b      	lsls	r3, r3, #1
 80011d4:	2203      	movs	r2, #3
 80011d6:	409a      	lsls	r2, r3
 80011d8:	0013      	movs	r3, r2
 80011da:	43da      	mvns	r2, r3
 80011dc:	693b      	ldr	r3, [r7, #16]
 80011de:	4013      	ands	r3, r2
 80011e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	2203      	movs	r2, #3
 80011e8:	401a      	ands	r2, r3
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	005b      	lsls	r3, r3, #1
 80011ee:	409a      	lsls	r2, r3
 80011f0:	0013      	movs	r3, r2
 80011f2:	693a      	ldr	r2, [r7, #16]
 80011f4:	4313      	orrs	r3, r2
 80011f6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	693a      	ldr	r2, [r7, #16]
 80011fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	685a      	ldr	r2, [r3, #4]
 8001202:	23c0      	movs	r3, #192	@ 0xc0
 8001204:	029b      	lsls	r3, r3, #10
 8001206:	4013      	ands	r3, r2
 8001208:	d100      	bne.n	800120c <HAL_GPIO_Init+0x17c>
 800120a:	e0a0      	b.n	800134e <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800120c:	4b57      	ldr	r3, [pc, #348]	@ (800136c <HAL_GPIO_Init+0x2dc>)
 800120e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001210:	4b56      	ldr	r3, [pc, #344]	@ (800136c <HAL_GPIO_Init+0x2dc>)
 8001212:	2101      	movs	r1, #1
 8001214:	430a      	orrs	r2, r1
 8001216:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001218:	4a55      	ldr	r2, [pc, #340]	@ (8001370 <HAL_GPIO_Init+0x2e0>)
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	089b      	lsrs	r3, r3, #2
 800121e:	3302      	adds	r3, #2
 8001220:	009b      	lsls	r3, r3, #2
 8001222:	589b      	ldr	r3, [r3, r2]
 8001224:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	2203      	movs	r2, #3
 800122a:	4013      	ands	r3, r2
 800122c:	009b      	lsls	r3, r3, #2
 800122e:	220f      	movs	r2, #15
 8001230:	409a      	lsls	r2, r3
 8001232:	0013      	movs	r3, r2
 8001234:	43da      	mvns	r2, r3
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	4013      	ands	r3, r2
 800123a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800123c:	687a      	ldr	r2, [r7, #4]
 800123e:	23a0      	movs	r3, #160	@ 0xa0
 8001240:	05db      	lsls	r3, r3, #23
 8001242:	429a      	cmp	r2, r3
 8001244:	d01f      	beq.n	8001286 <HAL_GPIO_Init+0x1f6>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4a4a      	ldr	r2, [pc, #296]	@ (8001374 <HAL_GPIO_Init+0x2e4>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d019      	beq.n	8001282 <HAL_GPIO_Init+0x1f2>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4a49      	ldr	r2, [pc, #292]	@ (8001378 <HAL_GPIO_Init+0x2e8>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d013      	beq.n	800127e <HAL_GPIO_Init+0x1ee>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4a48      	ldr	r2, [pc, #288]	@ (800137c <HAL_GPIO_Init+0x2ec>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d00d      	beq.n	800127a <HAL_GPIO_Init+0x1ea>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4a47      	ldr	r2, [pc, #284]	@ (8001380 <HAL_GPIO_Init+0x2f0>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d007      	beq.n	8001276 <HAL_GPIO_Init+0x1e6>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4a46      	ldr	r2, [pc, #280]	@ (8001384 <HAL_GPIO_Init+0x2f4>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d101      	bne.n	8001272 <HAL_GPIO_Init+0x1e2>
 800126e:	2305      	movs	r3, #5
 8001270:	e00a      	b.n	8001288 <HAL_GPIO_Init+0x1f8>
 8001272:	2306      	movs	r3, #6
 8001274:	e008      	b.n	8001288 <HAL_GPIO_Init+0x1f8>
 8001276:	2304      	movs	r3, #4
 8001278:	e006      	b.n	8001288 <HAL_GPIO_Init+0x1f8>
 800127a:	2303      	movs	r3, #3
 800127c:	e004      	b.n	8001288 <HAL_GPIO_Init+0x1f8>
 800127e:	2302      	movs	r3, #2
 8001280:	e002      	b.n	8001288 <HAL_GPIO_Init+0x1f8>
 8001282:	2301      	movs	r3, #1
 8001284:	e000      	b.n	8001288 <HAL_GPIO_Init+0x1f8>
 8001286:	2300      	movs	r3, #0
 8001288:	697a      	ldr	r2, [r7, #20]
 800128a:	2103      	movs	r1, #3
 800128c:	400a      	ands	r2, r1
 800128e:	0092      	lsls	r2, r2, #2
 8001290:	4093      	lsls	r3, r2
 8001292:	693a      	ldr	r2, [r7, #16]
 8001294:	4313      	orrs	r3, r2
 8001296:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001298:	4935      	ldr	r1, [pc, #212]	@ (8001370 <HAL_GPIO_Init+0x2e0>)
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	089b      	lsrs	r3, r3, #2
 800129e:	3302      	adds	r3, #2
 80012a0:	009b      	lsls	r3, r3, #2
 80012a2:	693a      	ldr	r2, [r7, #16]
 80012a4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012a6:	4b38      	ldr	r3, [pc, #224]	@ (8001388 <HAL_GPIO_Init+0x2f8>)
 80012a8:	689b      	ldr	r3, [r3, #8]
 80012aa:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	43da      	mvns	r2, r3
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	4013      	ands	r3, r2
 80012b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	685a      	ldr	r2, [r3, #4]
 80012ba:	2380      	movs	r3, #128	@ 0x80
 80012bc:	035b      	lsls	r3, r3, #13
 80012be:	4013      	ands	r3, r2
 80012c0:	d003      	beq.n	80012ca <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 80012c2:	693a      	ldr	r2, [r7, #16]
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	4313      	orrs	r3, r2
 80012c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80012ca:	4b2f      	ldr	r3, [pc, #188]	@ (8001388 <HAL_GPIO_Init+0x2f8>)
 80012cc:	693a      	ldr	r2, [r7, #16]
 80012ce:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80012d0:	4b2d      	ldr	r3, [pc, #180]	@ (8001388 <HAL_GPIO_Init+0x2f8>)
 80012d2:	68db      	ldr	r3, [r3, #12]
 80012d4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	43da      	mvns	r2, r3
 80012da:	693b      	ldr	r3, [r7, #16]
 80012dc:	4013      	ands	r3, r2
 80012de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	685a      	ldr	r2, [r3, #4]
 80012e4:	2380      	movs	r3, #128	@ 0x80
 80012e6:	039b      	lsls	r3, r3, #14
 80012e8:	4013      	ands	r3, r2
 80012ea:	d003      	beq.n	80012f4 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80012ec:	693a      	ldr	r2, [r7, #16]
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	4313      	orrs	r3, r2
 80012f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80012f4:	4b24      	ldr	r3, [pc, #144]	@ (8001388 <HAL_GPIO_Init+0x2f8>)
 80012f6:	693a      	ldr	r2, [r7, #16]
 80012f8:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 80012fa:	4b23      	ldr	r3, [pc, #140]	@ (8001388 <HAL_GPIO_Init+0x2f8>)
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	43da      	mvns	r2, r3
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	4013      	ands	r3, r2
 8001308:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	685a      	ldr	r2, [r3, #4]
 800130e:	2380      	movs	r3, #128	@ 0x80
 8001310:	029b      	lsls	r3, r3, #10
 8001312:	4013      	ands	r3, r2
 8001314:	d003      	beq.n	800131e <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8001316:	693a      	ldr	r2, [r7, #16]
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	4313      	orrs	r3, r2
 800131c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800131e:	4b1a      	ldr	r3, [pc, #104]	@ (8001388 <HAL_GPIO_Init+0x2f8>)
 8001320:	693a      	ldr	r2, [r7, #16]
 8001322:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001324:	4b18      	ldr	r3, [pc, #96]	@ (8001388 <HAL_GPIO_Init+0x2f8>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	43da      	mvns	r2, r3
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	4013      	ands	r3, r2
 8001332:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	685a      	ldr	r2, [r3, #4]
 8001338:	2380      	movs	r3, #128	@ 0x80
 800133a:	025b      	lsls	r3, r3, #9
 800133c:	4013      	ands	r3, r2
 800133e:	d003      	beq.n	8001348 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8001340:	693a      	ldr	r2, [r7, #16]
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	4313      	orrs	r3, r2
 8001346:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001348:	4b0f      	ldr	r3, [pc, #60]	@ (8001388 <HAL_GPIO_Init+0x2f8>)
 800134a:	693a      	ldr	r2, [r7, #16]
 800134c:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	3301      	adds	r3, #1
 8001352:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	40da      	lsrs	r2, r3
 800135c:	1e13      	subs	r3, r2, #0
 800135e:	d000      	beq.n	8001362 <HAL_GPIO_Init+0x2d2>
 8001360:	e6a2      	b.n	80010a8 <HAL_GPIO_Init+0x18>
  }
}
 8001362:	46c0      	nop			@ (mov r8, r8)
 8001364:	46c0      	nop			@ (mov r8, r8)
 8001366:	46bd      	mov	sp, r7
 8001368:	b006      	add	sp, #24
 800136a:	bd80      	pop	{r7, pc}
 800136c:	40021000 	.word	0x40021000
 8001370:	40010000 	.word	0x40010000
 8001374:	50000400 	.word	0x50000400
 8001378:	50000800 	.word	0x50000800
 800137c:	50000c00 	.word	0x50000c00
 8001380:	50001000 	.word	0x50001000
 8001384:	50001c00 	.word	0x50001c00
 8001388:	40010400 	.word	0x40010400

0800138c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800138c:	b5b0      	push	{r4, r5, r7, lr}
 800138e:	b08a      	sub	sp, #40	@ 0x28
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d102      	bne.n	80013a0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	f000 fbbf 	bl	8001b1e <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013a0:	4bc9      	ldr	r3, [pc, #804]	@ (80016c8 <HAL_RCC_OscConfig+0x33c>)
 80013a2:	68db      	ldr	r3, [r3, #12]
 80013a4:	220c      	movs	r2, #12
 80013a6:	4013      	ands	r3, r2
 80013a8:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80013aa:	4bc7      	ldr	r3, [pc, #796]	@ (80016c8 <HAL_RCC_OscConfig+0x33c>)
 80013ac:	68da      	ldr	r2, [r3, #12]
 80013ae:	2380      	movs	r3, #128	@ 0x80
 80013b0:	025b      	lsls	r3, r3, #9
 80013b2:	4013      	ands	r3, r2
 80013b4:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	2201      	movs	r2, #1
 80013bc:	4013      	ands	r3, r2
 80013be:	d100      	bne.n	80013c2 <HAL_RCC_OscConfig+0x36>
 80013c0:	e07e      	b.n	80014c0 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	2b08      	cmp	r3, #8
 80013c6:	d007      	beq.n	80013d8 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80013c8:	69fb      	ldr	r3, [r7, #28]
 80013ca:	2b0c      	cmp	r3, #12
 80013cc:	d112      	bne.n	80013f4 <HAL_RCC_OscConfig+0x68>
 80013ce:	69ba      	ldr	r2, [r7, #24]
 80013d0:	2380      	movs	r3, #128	@ 0x80
 80013d2:	025b      	lsls	r3, r3, #9
 80013d4:	429a      	cmp	r2, r3
 80013d6:	d10d      	bne.n	80013f4 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013d8:	4bbb      	ldr	r3, [pc, #748]	@ (80016c8 <HAL_RCC_OscConfig+0x33c>)
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	2380      	movs	r3, #128	@ 0x80
 80013de:	029b      	lsls	r3, r3, #10
 80013e0:	4013      	ands	r3, r2
 80013e2:	d100      	bne.n	80013e6 <HAL_RCC_OscConfig+0x5a>
 80013e4:	e06b      	b.n	80014be <HAL_RCC_OscConfig+0x132>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d167      	bne.n	80014be <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80013ee:	2301      	movs	r3, #1
 80013f0:	f000 fb95 	bl	8001b1e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	685a      	ldr	r2, [r3, #4]
 80013f8:	2380      	movs	r3, #128	@ 0x80
 80013fa:	025b      	lsls	r3, r3, #9
 80013fc:	429a      	cmp	r2, r3
 80013fe:	d107      	bne.n	8001410 <HAL_RCC_OscConfig+0x84>
 8001400:	4bb1      	ldr	r3, [pc, #708]	@ (80016c8 <HAL_RCC_OscConfig+0x33c>)
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	4bb0      	ldr	r3, [pc, #704]	@ (80016c8 <HAL_RCC_OscConfig+0x33c>)
 8001406:	2180      	movs	r1, #128	@ 0x80
 8001408:	0249      	lsls	r1, r1, #9
 800140a:	430a      	orrs	r2, r1
 800140c:	601a      	str	r2, [r3, #0]
 800140e:	e027      	b.n	8001460 <HAL_RCC_OscConfig+0xd4>
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	685a      	ldr	r2, [r3, #4]
 8001414:	23a0      	movs	r3, #160	@ 0xa0
 8001416:	02db      	lsls	r3, r3, #11
 8001418:	429a      	cmp	r2, r3
 800141a:	d10e      	bne.n	800143a <HAL_RCC_OscConfig+0xae>
 800141c:	4baa      	ldr	r3, [pc, #680]	@ (80016c8 <HAL_RCC_OscConfig+0x33c>)
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	4ba9      	ldr	r3, [pc, #676]	@ (80016c8 <HAL_RCC_OscConfig+0x33c>)
 8001422:	2180      	movs	r1, #128	@ 0x80
 8001424:	02c9      	lsls	r1, r1, #11
 8001426:	430a      	orrs	r2, r1
 8001428:	601a      	str	r2, [r3, #0]
 800142a:	4ba7      	ldr	r3, [pc, #668]	@ (80016c8 <HAL_RCC_OscConfig+0x33c>)
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	4ba6      	ldr	r3, [pc, #664]	@ (80016c8 <HAL_RCC_OscConfig+0x33c>)
 8001430:	2180      	movs	r1, #128	@ 0x80
 8001432:	0249      	lsls	r1, r1, #9
 8001434:	430a      	orrs	r2, r1
 8001436:	601a      	str	r2, [r3, #0]
 8001438:	e012      	b.n	8001460 <HAL_RCC_OscConfig+0xd4>
 800143a:	4ba3      	ldr	r3, [pc, #652]	@ (80016c8 <HAL_RCC_OscConfig+0x33c>)
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	4ba2      	ldr	r3, [pc, #648]	@ (80016c8 <HAL_RCC_OscConfig+0x33c>)
 8001440:	49a2      	ldr	r1, [pc, #648]	@ (80016cc <HAL_RCC_OscConfig+0x340>)
 8001442:	400a      	ands	r2, r1
 8001444:	601a      	str	r2, [r3, #0]
 8001446:	4ba0      	ldr	r3, [pc, #640]	@ (80016c8 <HAL_RCC_OscConfig+0x33c>)
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	2380      	movs	r3, #128	@ 0x80
 800144c:	025b      	lsls	r3, r3, #9
 800144e:	4013      	ands	r3, r2
 8001450:	60fb      	str	r3, [r7, #12]
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	4b9c      	ldr	r3, [pc, #624]	@ (80016c8 <HAL_RCC_OscConfig+0x33c>)
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	4b9b      	ldr	r3, [pc, #620]	@ (80016c8 <HAL_RCC_OscConfig+0x33c>)
 800145a:	499d      	ldr	r1, [pc, #628]	@ (80016d0 <HAL_RCC_OscConfig+0x344>)
 800145c:	400a      	ands	r2, r1
 800145e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d015      	beq.n	8001494 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001468:	f7ff fc7e 	bl	8000d68 <HAL_GetTick>
 800146c:	0003      	movs	r3, r0
 800146e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001470:	e009      	b.n	8001486 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001472:	f7ff fc79 	bl	8000d68 <HAL_GetTick>
 8001476:	0002      	movs	r2, r0
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	1ad3      	subs	r3, r2, r3
 800147c:	2b64      	cmp	r3, #100	@ 0x64
 800147e:	d902      	bls.n	8001486 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001480:	2303      	movs	r3, #3
 8001482:	f000 fb4c 	bl	8001b1e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001486:	4b90      	ldr	r3, [pc, #576]	@ (80016c8 <HAL_RCC_OscConfig+0x33c>)
 8001488:	681a      	ldr	r2, [r3, #0]
 800148a:	2380      	movs	r3, #128	@ 0x80
 800148c:	029b      	lsls	r3, r3, #10
 800148e:	4013      	ands	r3, r2
 8001490:	d0ef      	beq.n	8001472 <HAL_RCC_OscConfig+0xe6>
 8001492:	e015      	b.n	80014c0 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001494:	f7ff fc68 	bl	8000d68 <HAL_GetTick>
 8001498:	0003      	movs	r3, r0
 800149a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800149c:	e008      	b.n	80014b0 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800149e:	f7ff fc63 	bl	8000d68 <HAL_GetTick>
 80014a2:	0002      	movs	r2, r0
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	1ad3      	subs	r3, r2, r3
 80014a8:	2b64      	cmp	r3, #100	@ 0x64
 80014aa:	d901      	bls.n	80014b0 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80014ac:	2303      	movs	r3, #3
 80014ae:	e336      	b.n	8001b1e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80014b0:	4b85      	ldr	r3, [pc, #532]	@ (80016c8 <HAL_RCC_OscConfig+0x33c>)
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	2380      	movs	r3, #128	@ 0x80
 80014b6:	029b      	lsls	r3, r3, #10
 80014b8:	4013      	ands	r3, r2
 80014ba:	d1f0      	bne.n	800149e <HAL_RCC_OscConfig+0x112>
 80014bc:	e000      	b.n	80014c0 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014be:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	2202      	movs	r2, #2
 80014c6:	4013      	ands	r3, r2
 80014c8:	d100      	bne.n	80014cc <HAL_RCC_OscConfig+0x140>
 80014ca:	e099      	b.n	8001600 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	68db      	ldr	r3, [r3, #12]
 80014d0:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80014d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014d4:	2220      	movs	r2, #32
 80014d6:	4013      	ands	r3, r2
 80014d8:	d009      	beq.n	80014ee <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80014da:	4b7b      	ldr	r3, [pc, #492]	@ (80016c8 <HAL_RCC_OscConfig+0x33c>)
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	4b7a      	ldr	r3, [pc, #488]	@ (80016c8 <HAL_RCC_OscConfig+0x33c>)
 80014e0:	2120      	movs	r1, #32
 80014e2:	430a      	orrs	r2, r1
 80014e4:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 80014e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014e8:	2220      	movs	r2, #32
 80014ea:	4393      	bics	r3, r2
 80014ec:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	2b04      	cmp	r3, #4
 80014f2:	d005      	beq.n	8001500 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80014f4:	69fb      	ldr	r3, [r7, #28]
 80014f6:	2b0c      	cmp	r3, #12
 80014f8:	d13e      	bne.n	8001578 <HAL_RCC_OscConfig+0x1ec>
 80014fa:	69bb      	ldr	r3, [r7, #24]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d13b      	bne.n	8001578 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001500:	4b71      	ldr	r3, [pc, #452]	@ (80016c8 <HAL_RCC_OscConfig+0x33c>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	2204      	movs	r2, #4
 8001506:	4013      	ands	r3, r2
 8001508:	d004      	beq.n	8001514 <HAL_RCC_OscConfig+0x188>
 800150a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800150c:	2b00      	cmp	r3, #0
 800150e:	d101      	bne.n	8001514 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001510:	2301      	movs	r3, #1
 8001512:	e304      	b.n	8001b1e <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001514:	4b6c      	ldr	r3, [pc, #432]	@ (80016c8 <HAL_RCC_OscConfig+0x33c>)
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	4a6e      	ldr	r2, [pc, #440]	@ (80016d4 <HAL_RCC_OscConfig+0x348>)
 800151a:	4013      	ands	r3, r2
 800151c:	0019      	movs	r1, r3
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	691b      	ldr	r3, [r3, #16]
 8001522:	021a      	lsls	r2, r3, #8
 8001524:	4b68      	ldr	r3, [pc, #416]	@ (80016c8 <HAL_RCC_OscConfig+0x33c>)
 8001526:	430a      	orrs	r2, r1
 8001528:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800152a:	4b67      	ldr	r3, [pc, #412]	@ (80016c8 <HAL_RCC_OscConfig+0x33c>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	2209      	movs	r2, #9
 8001530:	4393      	bics	r3, r2
 8001532:	0019      	movs	r1, r3
 8001534:	4b64      	ldr	r3, [pc, #400]	@ (80016c8 <HAL_RCC_OscConfig+0x33c>)
 8001536:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001538:	430a      	orrs	r2, r1
 800153a:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800153c:	f000 fc42 	bl	8001dc4 <HAL_RCC_GetSysClockFreq>
 8001540:	0001      	movs	r1, r0
 8001542:	4b61      	ldr	r3, [pc, #388]	@ (80016c8 <HAL_RCC_OscConfig+0x33c>)
 8001544:	68db      	ldr	r3, [r3, #12]
 8001546:	091b      	lsrs	r3, r3, #4
 8001548:	220f      	movs	r2, #15
 800154a:	4013      	ands	r3, r2
 800154c:	4a62      	ldr	r2, [pc, #392]	@ (80016d8 <HAL_RCC_OscConfig+0x34c>)
 800154e:	5cd3      	ldrb	r3, [r2, r3]
 8001550:	000a      	movs	r2, r1
 8001552:	40da      	lsrs	r2, r3
 8001554:	4b61      	ldr	r3, [pc, #388]	@ (80016dc <HAL_RCC_OscConfig+0x350>)
 8001556:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001558:	4b61      	ldr	r3, [pc, #388]	@ (80016e0 <HAL_RCC_OscConfig+0x354>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	2513      	movs	r5, #19
 800155e:	197c      	adds	r4, r7, r5
 8001560:	0018      	movs	r0, r3
 8001562:	f7ff fbbb 	bl	8000cdc <HAL_InitTick>
 8001566:	0003      	movs	r3, r0
 8001568:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800156a:	197b      	adds	r3, r7, r5
 800156c:	781b      	ldrb	r3, [r3, #0]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d046      	beq.n	8001600 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8001572:	197b      	adds	r3, r7, r5
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	e2d2      	b.n	8001b1e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800157a:	2b00      	cmp	r3, #0
 800157c:	d027      	beq.n	80015ce <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800157e:	4b52      	ldr	r3, [pc, #328]	@ (80016c8 <HAL_RCC_OscConfig+0x33c>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	2209      	movs	r2, #9
 8001584:	4393      	bics	r3, r2
 8001586:	0019      	movs	r1, r3
 8001588:	4b4f      	ldr	r3, [pc, #316]	@ (80016c8 <HAL_RCC_OscConfig+0x33c>)
 800158a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800158c:	430a      	orrs	r2, r1
 800158e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001590:	f7ff fbea 	bl	8000d68 <HAL_GetTick>
 8001594:	0003      	movs	r3, r0
 8001596:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001598:	e008      	b.n	80015ac <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800159a:	f7ff fbe5 	bl	8000d68 <HAL_GetTick>
 800159e:	0002      	movs	r2, r0
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	1ad3      	subs	r3, r2, r3
 80015a4:	2b02      	cmp	r3, #2
 80015a6:	d901      	bls.n	80015ac <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 80015a8:	2303      	movs	r3, #3
 80015aa:	e2b8      	b.n	8001b1e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80015ac:	4b46      	ldr	r3, [pc, #280]	@ (80016c8 <HAL_RCC_OscConfig+0x33c>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	2204      	movs	r2, #4
 80015b2:	4013      	ands	r3, r2
 80015b4:	d0f1      	beq.n	800159a <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015b6:	4b44      	ldr	r3, [pc, #272]	@ (80016c8 <HAL_RCC_OscConfig+0x33c>)
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	4a46      	ldr	r2, [pc, #280]	@ (80016d4 <HAL_RCC_OscConfig+0x348>)
 80015bc:	4013      	ands	r3, r2
 80015be:	0019      	movs	r1, r3
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	691b      	ldr	r3, [r3, #16]
 80015c4:	021a      	lsls	r2, r3, #8
 80015c6:	4b40      	ldr	r3, [pc, #256]	@ (80016c8 <HAL_RCC_OscConfig+0x33c>)
 80015c8:	430a      	orrs	r2, r1
 80015ca:	605a      	str	r2, [r3, #4]
 80015cc:	e018      	b.n	8001600 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015ce:	4b3e      	ldr	r3, [pc, #248]	@ (80016c8 <HAL_RCC_OscConfig+0x33c>)
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	4b3d      	ldr	r3, [pc, #244]	@ (80016c8 <HAL_RCC_OscConfig+0x33c>)
 80015d4:	2101      	movs	r1, #1
 80015d6:	438a      	bics	r2, r1
 80015d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015da:	f7ff fbc5 	bl	8000d68 <HAL_GetTick>
 80015de:	0003      	movs	r3, r0
 80015e0:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80015e2:	e008      	b.n	80015f6 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015e4:	f7ff fbc0 	bl	8000d68 <HAL_GetTick>
 80015e8:	0002      	movs	r2, r0
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	2b02      	cmp	r3, #2
 80015f0:	d901      	bls.n	80015f6 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 80015f2:	2303      	movs	r3, #3
 80015f4:	e293      	b.n	8001b1e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80015f6:	4b34      	ldr	r3, [pc, #208]	@ (80016c8 <HAL_RCC_OscConfig+0x33c>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	2204      	movs	r2, #4
 80015fc:	4013      	ands	r3, r2
 80015fe:	d1f1      	bne.n	80015e4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	2210      	movs	r2, #16
 8001606:	4013      	ands	r3, r2
 8001608:	d100      	bne.n	800160c <HAL_RCC_OscConfig+0x280>
 800160a:	e0a2      	b.n	8001752 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800160c:	69fb      	ldr	r3, [r7, #28]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d140      	bne.n	8001694 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001612:	4b2d      	ldr	r3, [pc, #180]	@ (80016c8 <HAL_RCC_OscConfig+0x33c>)
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	2380      	movs	r3, #128	@ 0x80
 8001618:	009b      	lsls	r3, r3, #2
 800161a:	4013      	ands	r3, r2
 800161c:	d005      	beq.n	800162a <HAL_RCC_OscConfig+0x29e>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	69db      	ldr	r3, [r3, #28]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d101      	bne.n	800162a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8001626:	2301      	movs	r3, #1
 8001628:	e279      	b.n	8001b1e <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800162a:	4b27      	ldr	r3, [pc, #156]	@ (80016c8 <HAL_RCC_OscConfig+0x33c>)
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	4a2d      	ldr	r2, [pc, #180]	@ (80016e4 <HAL_RCC_OscConfig+0x358>)
 8001630:	4013      	ands	r3, r2
 8001632:	0019      	movs	r1, r3
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001638:	4b23      	ldr	r3, [pc, #140]	@ (80016c8 <HAL_RCC_OscConfig+0x33c>)
 800163a:	430a      	orrs	r2, r1
 800163c:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800163e:	4b22      	ldr	r3, [pc, #136]	@ (80016c8 <HAL_RCC_OscConfig+0x33c>)
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	021b      	lsls	r3, r3, #8
 8001644:	0a19      	lsrs	r1, r3, #8
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6a1b      	ldr	r3, [r3, #32]
 800164a:	061a      	lsls	r2, r3, #24
 800164c:	4b1e      	ldr	r3, [pc, #120]	@ (80016c8 <HAL_RCC_OscConfig+0x33c>)
 800164e:	430a      	orrs	r2, r1
 8001650:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001656:	0b5b      	lsrs	r3, r3, #13
 8001658:	3301      	adds	r3, #1
 800165a:	2280      	movs	r2, #128	@ 0x80
 800165c:	0212      	lsls	r2, r2, #8
 800165e:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001660:	4b19      	ldr	r3, [pc, #100]	@ (80016c8 <HAL_RCC_OscConfig+0x33c>)
 8001662:	68db      	ldr	r3, [r3, #12]
 8001664:	091b      	lsrs	r3, r3, #4
 8001666:	210f      	movs	r1, #15
 8001668:	400b      	ands	r3, r1
 800166a:	491b      	ldr	r1, [pc, #108]	@ (80016d8 <HAL_RCC_OscConfig+0x34c>)
 800166c:	5ccb      	ldrb	r3, [r1, r3]
 800166e:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001670:	4b1a      	ldr	r3, [pc, #104]	@ (80016dc <HAL_RCC_OscConfig+0x350>)
 8001672:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001674:	4b1a      	ldr	r3, [pc, #104]	@ (80016e0 <HAL_RCC_OscConfig+0x354>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	2513      	movs	r5, #19
 800167a:	197c      	adds	r4, r7, r5
 800167c:	0018      	movs	r0, r3
 800167e:	f7ff fb2d 	bl	8000cdc <HAL_InitTick>
 8001682:	0003      	movs	r3, r0
 8001684:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001686:	197b      	adds	r3, r7, r5
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d061      	beq.n	8001752 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 800168e:	197b      	adds	r3, r7, r5
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	e244      	b.n	8001b1e <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	69db      	ldr	r3, [r3, #28]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d040      	beq.n	800171e <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800169c:	4b0a      	ldr	r3, [pc, #40]	@ (80016c8 <HAL_RCC_OscConfig+0x33c>)
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	4b09      	ldr	r3, [pc, #36]	@ (80016c8 <HAL_RCC_OscConfig+0x33c>)
 80016a2:	2180      	movs	r1, #128	@ 0x80
 80016a4:	0049      	lsls	r1, r1, #1
 80016a6:	430a      	orrs	r2, r1
 80016a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016aa:	f7ff fb5d 	bl	8000d68 <HAL_GetTick>
 80016ae:	0003      	movs	r3, r0
 80016b0:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80016b2:	e019      	b.n	80016e8 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80016b4:	f7ff fb58 	bl	8000d68 <HAL_GetTick>
 80016b8:	0002      	movs	r2, r0
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	2b02      	cmp	r3, #2
 80016c0:	d912      	bls.n	80016e8 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 80016c2:	2303      	movs	r3, #3
 80016c4:	e22b      	b.n	8001b1e <HAL_RCC_OscConfig+0x792>
 80016c6:	46c0      	nop			@ (mov r8, r8)
 80016c8:	40021000 	.word	0x40021000
 80016cc:	fffeffff 	.word	0xfffeffff
 80016d0:	fffbffff 	.word	0xfffbffff
 80016d4:	ffffe0ff 	.word	0xffffe0ff
 80016d8:	08003ae8 	.word	0x08003ae8
 80016dc:	20000000 	.word	0x20000000
 80016e0:	20000004 	.word	0x20000004
 80016e4:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80016e8:	4bca      	ldr	r3, [pc, #808]	@ (8001a14 <HAL_RCC_OscConfig+0x688>)
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	2380      	movs	r3, #128	@ 0x80
 80016ee:	009b      	lsls	r3, r3, #2
 80016f0:	4013      	ands	r3, r2
 80016f2:	d0df      	beq.n	80016b4 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016f4:	4bc7      	ldr	r3, [pc, #796]	@ (8001a14 <HAL_RCC_OscConfig+0x688>)
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	4ac7      	ldr	r2, [pc, #796]	@ (8001a18 <HAL_RCC_OscConfig+0x68c>)
 80016fa:	4013      	ands	r3, r2
 80016fc:	0019      	movs	r1, r3
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001702:	4bc4      	ldr	r3, [pc, #784]	@ (8001a14 <HAL_RCC_OscConfig+0x688>)
 8001704:	430a      	orrs	r2, r1
 8001706:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001708:	4bc2      	ldr	r3, [pc, #776]	@ (8001a14 <HAL_RCC_OscConfig+0x688>)
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	021b      	lsls	r3, r3, #8
 800170e:	0a19      	lsrs	r1, r3, #8
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6a1b      	ldr	r3, [r3, #32]
 8001714:	061a      	lsls	r2, r3, #24
 8001716:	4bbf      	ldr	r3, [pc, #764]	@ (8001a14 <HAL_RCC_OscConfig+0x688>)
 8001718:	430a      	orrs	r2, r1
 800171a:	605a      	str	r2, [r3, #4]
 800171c:	e019      	b.n	8001752 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800171e:	4bbd      	ldr	r3, [pc, #756]	@ (8001a14 <HAL_RCC_OscConfig+0x688>)
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	4bbc      	ldr	r3, [pc, #752]	@ (8001a14 <HAL_RCC_OscConfig+0x688>)
 8001724:	49bd      	ldr	r1, [pc, #756]	@ (8001a1c <HAL_RCC_OscConfig+0x690>)
 8001726:	400a      	ands	r2, r1
 8001728:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800172a:	f7ff fb1d 	bl	8000d68 <HAL_GetTick>
 800172e:	0003      	movs	r3, r0
 8001730:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001732:	e008      	b.n	8001746 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001734:	f7ff fb18 	bl	8000d68 <HAL_GetTick>
 8001738:	0002      	movs	r2, r0
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	2b02      	cmp	r3, #2
 8001740:	d901      	bls.n	8001746 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8001742:	2303      	movs	r3, #3
 8001744:	e1eb      	b.n	8001b1e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001746:	4bb3      	ldr	r3, [pc, #716]	@ (8001a14 <HAL_RCC_OscConfig+0x688>)
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	2380      	movs	r3, #128	@ 0x80
 800174c:	009b      	lsls	r3, r3, #2
 800174e:	4013      	ands	r3, r2
 8001750:	d1f0      	bne.n	8001734 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	2208      	movs	r2, #8
 8001758:	4013      	ands	r3, r2
 800175a:	d036      	beq.n	80017ca <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	695b      	ldr	r3, [r3, #20]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d019      	beq.n	8001798 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001764:	4bab      	ldr	r3, [pc, #684]	@ (8001a14 <HAL_RCC_OscConfig+0x688>)
 8001766:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001768:	4baa      	ldr	r3, [pc, #680]	@ (8001a14 <HAL_RCC_OscConfig+0x688>)
 800176a:	2101      	movs	r1, #1
 800176c:	430a      	orrs	r2, r1
 800176e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001770:	f7ff fafa 	bl	8000d68 <HAL_GetTick>
 8001774:	0003      	movs	r3, r0
 8001776:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001778:	e008      	b.n	800178c <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800177a:	f7ff faf5 	bl	8000d68 <HAL_GetTick>
 800177e:	0002      	movs	r2, r0
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	1ad3      	subs	r3, r2, r3
 8001784:	2b02      	cmp	r3, #2
 8001786:	d901      	bls.n	800178c <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8001788:	2303      	movs	r3, #3
 800178a:	e1c8      	b.n	8001b1e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800178c:	4ba1      	ldr	r3, [pc, #644]	@ (8001a14 <HAL_RCC_OscConfig+0x688>)
 800178e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001790:	2202      	movs	r2, #2
 8001792:	4013      	ands	r3, r2
 8001794:	d0f1      	beq.n	800177a <HAL_RCC_OscConfig+0x3ee>
 8001796:	e018      	b.n	80017ca <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001798:	4b9e      	ldr	r3, [pc, #632]	@ (8001a14 <HAL_RCC_OscConfig+0x688>)
 800179a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800179c:	4b9d      	ldr	r3, [pc, #628]	@ (8001a14 <HAL_RCC_OscConfig+0x688>)
 800179e:	2101      	movs	r1, #1
 80017a0:	438a      	bics	r2, r1
 80017a2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017a4:	f7ff fae0 	bl	8000d68 <HAL_GetTick>
 80017a8:	0003      	movs	r3, r0
 80017aa:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80017ac:	e008      	b.n	80017c0 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017ae:	f7ff fadb 	bl	8000d68 <HAL_GetTick>
 80017b2:	0002      	movs	r2, r0
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	1ad3      	subs	r3, r2, r3
 80017b8:	2b02      	cmp	r3, #2
 80017ba:	d901      	bls.n	80017c0 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 80017bc:	2303      	movs	r3, #3
 80017be:	e1ae      	b.n	8001b1e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80017c0:	4b94      	ldr	r3, [pc, #592]	@ (8001a14 <HAL_RCC_OscConfig+0x688>)
 80017c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80017c4:	2202      	movs	r2, #2
 80017c6:	4013      	ands	r3, r2
 80017c8:	d1f1      	bne.n	80017ae <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	2204      	movs	r2, #4
 80017d0:	4013      	ands	r3, r2
 80017d2:	d100      	bne.n	80017d6 <HAL_RCC_OscConfig+0x44a>
 80017d4:	e0ae      	b.n	8001934 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017d6:	2023      	movs	r0, #35	@ 0x23
 80017d8:	183b      	adds	r3, r7, r0
 80017da:	2200      	movs	r2, #0
 80017dc:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017de:	4b8d      	ldr	r3, [pc, #564]	@ (8001a14 <HAL_RCC_OscConfig+0x688>)
 80017e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80017e2:	2380      	movs	r3, #128	@ 0x80
 80017e4:	055b      	lsls	r3, r3, #21
 80017e6:	4013      	ands	r3, r2
 80017e8:	d109      	bne.n	80017fe <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017ea:	4b8a      	ldr	r3, [pc, #552]	@ (8001a14 <HAL_RCC_OscConfig+0x688>)
 80017ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80017ee:	4b89      	ldr	r3, [pc, #548]	@ (8001a14 <HAL_RCC_OscConfig+0x688>)
 80017f0:	2180      	movs	r1, #128	@ 0x80
 80017f2:	0549      	lsls	r1, r1, #21
 80017f4:	430a      	orrs	r2, r1
 80017f6:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 80017f8:	183b      	adds	r3, r7, r0
 80017fa:	2201      	movs	r2, #1
 80017fc:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017fe:	4b88      	ldr	r3, [pc, #544]	@ (8001a20 <HAL_RCC_OscConfig+0x694>)
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	2380      	movs	r3, #128	@ 0x80
 8001804:	005b      	lsls	r3, r3, #1
 8001806:	4013      	ands	r3, r2
 8001808:	d11a      	bne.n	8001840 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800180a:	4b85      	ldr	r3, [pc, #532]	@ (8001a20 <HAL_RCC_OscConfig+0x694>)
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	4b84      	ldr	r3, [pc, #528]	@ (8001a20 <HAL_RCC_OscConfig+0x694>)
 8001810:	2180      	movs	r1, #128	@ 0x80
 8001812:	0049      	lsls	r1, r1, #1
 8001814:	430a      	orrs	r2, r1
 8001816:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001818:	f7ff faa6 	bl	8000d68 <HAL_GetTick>
 800181c:	0003      	movs	r3, r0
 800181e:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001820:	e008      	b.n	8001834 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001822:	f7ff faa1 	bl	8000d68 <HAL_GetTick>
 8001826:	0002      	movs	r2, r0
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	1ad3      	subs	r3, r2, r3
 800182c:	2b64      	cmp	r3, #100	@ 0x64
 800182e:	d901      	bls.n	8001834 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8001830:	2303      	movs	r3, #3
 8001832:	e174      	b.n	8001b1e <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001834:	4b7a      	ldr	r3, [pc, #488]	@ (8001a20 <HAL_RCC_OscConfig+0x694>)
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	2380      	movs	r3, #128	@ 0x80
 800183a:	005b      	lsls	r3, r3, #1
 800183c:	4013      	ands	r3, r2
 800183e:	d0f0      	beq.n	8001822 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	689a      	ldr	r2, [r3, #8]
 8001844:	2380      	movs	r3, #128	@ 0x80
 8001846:	005b      	lsls	r3, r3, #1
 8001848:	429a      	cmp	r2, r3
 800184a:	d107      	bne.n	800185c <HAL_RCC_OscConfig+0x4d0>
 800184c:	4b71      	ldr	r3, [pc, #452]	@ (8001a14 <HAL_RCC_OscConfig+0x688>)
 800184e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001850:	4b70      	ldr	r3, [pc, #448]	@ (8001a14 <HAL_RCC_OscConfig+0x688>)
 8001852:	2180      	movs	r1, #128	@ 0x80
 8001854:	0049      	lsls	r1, r1, #1
 8001856:	430a      	orrs	r2, r1
 8001858:	651a      	str	r2, [r3, #80]	@ 0x50
 800185a:	e031      	b.n	80018c0 <HAL_RCC_OscConfig+0x534>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d10c      	bne.n	800187e <HAL_RCC_OscConfig+0x4f2>
 8001864:	4b6b      	ldr	r3, [pc, #428]	@ (8001a14 <HAL_RCC_OscConfig+0x688>)
 8001866:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001868:	4b6a      	ldr	r3, [pc, #424]	@ (8001a14 <HAL_RCC_OscConfig+0x688>)
 800186a:	496c      	ldr	r1, [pc, #432]	@ (8001a1c <HAL_RCC_OscConfig+0x690>)
 800186c:	400a      	ands	r2, r1
 800186e:	651a      	str	r2, [r3, #80]	@ 0x50
 8001870:	4b68      	ldr	r3, [pc, #416]	@ (8001a14 <HAL_RCC_OscConfig+0x688>)
 8001872:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001874:	4b67      	ldr	r3, [pc, #412]	@ (8001a14 <HAL_RCC_OscConfig+0x688>)
 8001876:	496b      	ldr	r1, [pc, #428]	@ (8001a24 <HAL_RCC_OscConfig+0x698>)
 8001878:	400a      	ands	r2, r1
 800187a:	651a      	str	r2, [r3, #80]	@ 0x50
 800187c:	e020      	b.n	80018c0 <HAL_RCC_OscConfig+0x534>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	689a      	ldr	r2, [r3, #8]
 8001882:	23a0      	movs	r3, #160	@ 0xa0
 8001884:	00db      	lsls	r3, r3, #3
 8001886:	429a      	cmp	r2, r3
 8001888:	d10e      	bne.n	80018a8 <HAL_RCC_OscConfig+0x51c>
 800188a:	4b62      	ldr	r3, [pc, #392]	@ (8001a14 <HAL_RCC_OscConfig+0x688>)
 800188c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800188e:	4b61      	ldr	r3, [pc, #388]	@ (8001a14 <HAL_RCC_OscConfig+0x688>)
 8001890:	2180      	movs	r1, #128	@ 0x80
 8001892:	00c9      	lsls	r1, r1, #3
 8001894:	430a      	orrs	r2, r1
 8001896:	651a      	str	r2, [r3, #80]	@ 0x50
 8001898:	4b5e      	ldr	r3, [pc, #376]	@ (8001a14 <HAL_RCC_OscConfig+0x688>)
 800189a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800189c:	4b5d      	ldr	r3, [pc, #372]	@ (8001a14 <HAL_RCC_OscConfig+0x688>)
 800189e:	2180      	movs	r1, #128	@ 0x80
 80018a0:	0049      	lsls	r1, r1, #1
 80018a2:	430a      	orrs	r2, r1
 80018a4:	651a      	str	r2, [r3, #80]	@ 0x50
 80018a6:	e00b      	b.n	80018c0 <HAL_RCC_OscConfig+0x534>
 80018a8:	4b5a      	ldr	r3, [pc, #360]	@ (8001a14 <HAL_RCC_OscConfig+0x688>)
 80018aa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80018ac:	4b59      	ldr	r3, [pc, #356]	@ (8001a14 <HAL_RCC_OscConfig+0x688>)
 80018ae:	495b      	ldr	r1, [pc, #364]	@ (8001a1c <HAL_RCC_OscConfig+0x690>)
 80018b0:	400a      	ands	r2, r1
 80018b2:	651a      	str	r2, [r3, #80]	@ 0x50
 80018b4:	4b57      	ldr	r3, [pc, #348]	@ (8001a14 <HAL_RCC_OscConfig+0x688>)
 80018b6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80018b8:	4b56      	ldr	r3, [pc, #344]	@ (8001a14 <HAL_RCC_OscConfig+0x688>)
 80018ba:	495a      	ldr	r1, [pc, #360]	@ (8001a24 <HAL_RCC_OscConfig+0x698>)
 80018bc:	400a      	ands	r2, r1
 80018be:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d015      	beq.n	80018f4 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018c8:	f7ff fa4e 	bl	8000d68 <HAL_GetTick>
 80018cc:	0003      	movs	r3, r0
 80018ce:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80018d0:	e009      	b.n	80018e6 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018d2:	f7ff fa49 	bl	8000d68 <HAL_GetTick>
 80018d6:	0002      	movs	r2, r0
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	1ad3      	subs	r3, r2, r3
 80018dc:	4a52      	ldr	r2, [pc, #328]	@ (8001a28 <HAL_RCC_OscConfig+0x69c>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d901      	bls.n	80018e6 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 80018e2:	2303      	movs	r3, #3
 80018e4:	e11b      	b.n	8001b1e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80018e6:	4b4b      	ldr	r3, [pc, #300]	@ (8001a14 <HAL_RCC_OscConfig+0x688>)
 80018e8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80018ea:	2380      	movs	r3, #128	@ 0x80
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	4013      	ands	r3, r2
 80018f0:	d0ef      	beq.n	80018d2 <HAL_RCC_OscConfig+0x546>
 80018f2:	e014      	b.n	800191e <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018f4:	f7ff fa38 	bl	8000d68 <HAL_GetTick>
 80018f8:	0003      	movs	r3, r0
 80018fa:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80018fc:	e009      	b.n	8001912 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018fe:	f7ff fa33 	bl	8000d68 <HAL_GetTick>
 8001902:	0002      	movs	r2, r0
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	1ad3      	subs	r3, r2, r3
 8001908:	4a47      	ldr	r2, [pc, #284]	@ (8001a28 <HAL_RCC_OscConfig+0x69c>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d901      	bls.n	8001912 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 800190e:	2303      	movs	r3, #3
 8001910:	e105      	b.n	8001b1e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001912:	4b40      	ldr	r3, [pc, #256]	@ (8001a14 <HAL_RCC_OscConfig+0x688>)
 8001914:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001916:	2380      	movs	r3, #128	@ 0x80
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	4013      	ands	r3, r2
 800191c:	d1ef      	bne.n	80018fe <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800191e:	2323      	movs	r3, #35	@ 0x23
 8001920:	18fb      	adds	r3, r7, r3
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	2b01      	cmp	r3, #1
 8001926:	d105      	bne.n	8001934 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001928:	4b3a      	ldr	r3, [pc, #232]	@ (8001a14 <HAL_RCC_OscConfig+0x688>)
 800192a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800192c:	4b39      	ldr	r3, [pc, #228]	@ (8001a14 <HAL_RCC_OscConfig+0x688>)
 800192e:	493f      	ldr	r1, [pc, #252]	@ (8001a2c <HAL_RCC_OscConfig+0x6a0>)
 8001930:	400a      	ands	r2, r1
 8001932:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	2220      	movs	r2, #32
 800193a:	4013      	ands	r3, r2
 800193c:	d049      	beq.n	80019d2 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	699b      	ldr	r3, [r3, #24]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d026      	beq.n	8001994 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001946:	4b33      	ldr	r3, [pc, #204]	@ (8001a14 <HAL_RCC_OscConfig+0x688>)
 8001948:	689a      	ldr	r2, [r3, #8]
 800194a:	4b32      	ldr	r3, [pc, #200]	@ (8001a14 <HAL_RCC_OscConfig+0x688>)
 800194c:	2101      	movs	r1, #1
 800194e:	430a      	orrs	r2, r1
 8001950:	609a      	str	r2, [r3, #8]
 8001952:	4b30      	ldr	r3, [pc, #192]	@ (8001a14 <HAL_RCC_OscConfig+0x688>)
 8001954:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001956:	4b2f      	ldr	r3, [pc, #188]	@ (8001a14 <HAL_RCC_OscConfig+0x688>)
 8001958:	2101      	movs	r1, #1
 800195a:	430a      	orrs	r2, r1
 800195c:	635a      	str	r2, [r3, #52]	@ 0x34
 800195e:	4b34      	ldr	r3, [pc, #208]	@ (8001a30 <HAL_RCC_OscConfig+0x6a4>)
 8001960:	6a1a      	ldr	r2, [r3, #32]
 8001962:	4b33      	ldr	r3, [pc, #204]	@ (8001a30 <HAL_RCC_OscConfig+0x6a4>)
 8001964:	2180      	movs	r1, #128	@ 0x80
 8001966:	0189      	lsls	r1, r1, #6
 8001968:	430a      	orrs	r2, r1
 800196a:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800196c:	f7ff f9fc 	bl	8000d68 <HAL_GetTick>
 8001970:	0003      	movs	r3, r0
 8001972:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001974:	e008      	b.n	8001988 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001976:	f7ff f9f7 	bl	8000d68 <HAL_GetTick>
 800197a:	0002      	movs	r2, r0
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	1ad3      	subs	r3, r2, r3
 8001980:	2b02      	cmp	r3, #2
 8001982:	d901      	bls.n	8001988 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8001984:	2303      	movs	r3, #3
 8001986:	e0ca      	b.n	8001b1e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001988:	4b22      	ldr	r3, [pc, #136]	@ (8001a14 <HAL_RCC_OscConfig+0x688>)
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	2202      	movs	r2, #2
 800198e:	4013      	ands	r3, r2
 8001990:	d0f1      	beq.n	8001976 <HAL_RCC_OscConfig+0x5ea>
 8001992:	e01e      	b.n	80019d2 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001994:	4b1f      	ldr	r3, [pc, #124]	@ (8001a14 <HAL_RCC_OscConfig+0x688>)
 8001996:	689a      	ldr	r2, [r3, #8]
 8001998:	4b1e      	ldr	r3, [pc, #120]	@ (8001a14 <HAL_RCC_OscConfig+0x688>)
 800199a:	2101      	movs	r1, #1
 800199c:	438a      	bics	r2, r1
 800199e:	609a      	str	r2, [r3, #8]
 80019a0:	4b23      	ldr	r3, [pc, #140]	@ (8001a30 <HAL_RCC_OscConfig+0x6a4>)
 80019a2:	6a1a      	ldr	r2, [r3, #32]
 80019a4:	4b22      	ldr	r3, [pc, #136]	@ (8001a30 <HAL_RCC_OscConfig+0x6a4>)
 80019a6:	4923      	ldr	r1, [pc, #140]	@ (8001a34 <HAL_RCC_OscConfig+0x6a8>)
 80019a8:	400a      	ands	r2, r1
 80019aa:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ac:	f7ff f9dc 	bl	8000d68 <HAL_GetTick>
 80019b0:	0003      	movs	r3, r0
 80019b2:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80019b4:	e008      	b.n	80019c8 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80019b6:	f7ff f9d7 	bl	8000d68 <HAL_GetTick>
 80019ba:	0002      	movs	r2, r0
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	1ad3      	subs	r3, r2, r3
 80019c0:	2b02      	cmp	r3, #2
 80019c2:	d901      	bls.n	80019c8 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 80019c4:	2303      	movs	r3, #3
 80019c6:	e0aa      	b.n	8001b1e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80019c8:	4b12      	ldr	r3, [pc, #72]	@ (8001a14 <HAL_RCC_OscConfig+0x688>)
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	2202      	movs	r2, #2
 80019ce:	4013      	ands	r3, r2
 80019d0:	d1f1      	bne.n	80019b6 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d100      	bne.n	80019dc <HAL_RCC_OscConfig+0x650>
 80019da:	e09f      	b.n	8001b1c <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019dc:	69fb      	ldr	r3, [r7, #28]
 80019de:	2b0c      	cmp	r3, #12
 80019e0:	d100      	bne.n	80019e4 <HAL_RCC_OscConfig+0x658>
 80019e2:	e078      	b.n	8001ad6 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019e8:	2b02      	cmp	r3, #2
 80019ea:	d159      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019ec:	4b09      	ldr	r3, [pc, #36]	@ (8001a14 <HAL_RCC_OscConfig+0x688>)
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	4b08      	ldr	r3, [pc, #32]	@ (8001a14 <HAL_RCC_OscConfig+0x688>)
 80019f2:	4911      	ldr	r1, [pc, #68]	@ (8001a38 <HAL_RCC_OscConfig+0x6ac>)
 80019f4:	400a      	ands	r2, r1
 80019f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019f8:	f7ff f9b6 	bl	8000d68 <HAL_GetTick>
 80019fc:	0003      	movs	r3, r0
 80019fe:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001a00:	e01c      	b.n	8001a3c <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a02:	f7ff f9b1 	bl	8000d68 <HAL_GetTick>
 8001a06:	0002      	movs	r2, r0
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	1ad3      	subs	r3, r2, r3
 8001a0c:	2b02      	cmp	r3, #2
 8001a0e:	d915      	bls.n	8001a3c <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8001a10:	2303      	movs	r3, #3
 8001a12:	e084      	b.n	8001b1e <HAL_RCC_OscConfig+0x792>
 8001a14:	40021000 	.word	0x40021000
 8001a18:	ffff1fff 	.word	0xffff1fff
 8001a1c:	fffffeff 	.word	0xfffffeff
 8001a20:	40007000 	.word	0x40007000
 8001a24:	fffffbff 	.word	0xfffffbff
 8001a28:	00001388 	.word	0x00001388
 8001a2c:	efffffff 	.word	0xefffffff
 8001a30:	40010000 	.word	0x40010000
 8001a34:	ffffdfff 	.word	0xffffdfff
 8001a38:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001a3c:	4b3a      	ldr	r3, [pc, #232]	@ (8001b28 <HAL_RCC_OscConfig+0x79c>)
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	2380      	movs	r3, #128	@ 0x80
 8001a42:	049b      	lsls	r3, r3, #18
 8001a44:	4013      	ands	r3, r2
 8001a46:	d1dc      	bne.n	8001a02 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a48:	4b37      	ldr	r3, [pc, #220]	@ (8001b28 <HAL_RCC_OscConfig+0x79c>)
 8001a4a:	68db      	ldr	r3, [r3, #12]
 8001a4c:	4a37      	ldr	r2, [pc, #220]	@ (8001b2c <HAL_RCC_OscConfig+0x7a0>)
 8001a4e:	4013      	ands	r3, r2
 8001a50:	0019      	movs	r1, r3
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a5a:	431a      	orrs	r2, r3
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a60:	431a      	orrs	r2, r3
 8001a62:	4b31      	ldr	r3, [pc, #196]	@ (8001b28 <HAL_RCC_OscConfig+0x79c>)
 8001a64:	430a      	orrs	r2, r1
 8001a66:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a68:	4b2f      	ldr	r3, [pc, #188]	@ (8001b28 <HAL_RCC_OscConfig+0x79c>)
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	4b2e      	ldr	r3, [pc, #184]	@ (8001b28 <HAL_RCC_OscConfig+0x79c>)
 8001a6e:	2180      	movs	r1, #128	@ 0x80
 8001a70:	0449      	lsls	r1, r1, #17
 8001a72:	430a      	orrs	r2, r1
 8001a74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a76:	f7ff f977 	bl	8000d68 <HAL_GetTick>
 8001a7a:	0003      	movs	r3, r0
 8001a7c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001a7e:	e008      	b.n	8001a92 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a80:	f7ff f972 	bl	8000d68 <HAL_GetTick>
 8001a84:	0002      	movs	r2, r0
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	2b02      	cmp	r3, #2
 8001a8c:	d901      	bls.n	8001a92 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	e045      	b.n	8001b1e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001a92:	4b25      	ldr	r3, [pc, #148]	@ (8001b28 <HAL_RCC_OscConfig+0x79c>)
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	2380      	movs	r3, #128	@ 0x80
 8001a98:	049b      	lsls	r3, r3, #18
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	d0f0      	beq.n	8001a80 <HAL_RCC_OscConfig+0x6f4>
 8001a9e:	e03d      	b.n	8001b1c <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001aa0:	4b21      	ldr	r3, [pc, #132]	@ (8001b28 <HAL_RCC_OscConfig+0x79c>)
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	4b20      	ldr	r3, [pc, #128]	@ (8001b28 <HAL_RCC_OscConfig+0x79c>)
 8001aa6:	4922      	ldr	r1, [pc, #136]	@ (8001b30 <HAL_RCC_OscConfig+0x7a4>)
 8001aa8:	400a      	ands	r2, r1
 8001aaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aac:	f7ff f95c 	bl	8000d68 <HAL_GetTick>
 8001ab0:	0003      	movs	r3, r0
 8001ab2:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001ab4:	e008      	b.n	8001ac8 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ab6:	f7ff f957 	bl	8000d68 <HAL_GetTick>
 8001aba:	0002      	movs	r2, r0
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	1ad3      	subs	r3, r2, r3
 8001ac0:	2b02      	cmp	r3, #2
 8001ac2:	d901      	bls.n	8001ac8 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8001ac4:	2303      	movs	r3, #3
 8001ac6:	e02a      	b.n	8001b1e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001ac8:	4b17      	ldr	r3, [pc, #92]	@ (8001b28 <HAL_RCC_OscConfig+0x79c>)
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	2380      	movs	r3, #128	@ 0x80
 8001ace:	049b      	lsls	r3, r3, #18
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	d1f0      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x72a>
 8001ad4:	e022      	b.n	8001b1c <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d101      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e01d      	b.n	8001b1e <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ae2:	4b11      	ldr	r3, [pc, #68]	@ (8001b28 <HAL_RCC_OscConfig+0x79c>)
 8001ae4:	68db      	ldr	r3, [r3, #12]
 8001ae6:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ae8:	69ba      	ldr	r2, [r7, #24]
 8001aea:	2380      	movs	r3, #128	@ 0x80
 8001aec:	025b      	lsls	r3, r3, #9
 8001aee:	401a      	ands	r2, r3
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001af4:	429a      	cmp	r2, r3
 8001af6:	d10f      	bne.n	8001b18 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001af8:	69ba      	ldr	r2, [r7, #24]
 8001afa:	23f0      	movs	r3, #240	@ 0xf0
 8001afc:	039b      	lsls	r3, r3, #14
 8001afe:	401a      	ands	r2, r3
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d107      	bne.n	8001b18 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001b08:	69ba      	ldr	r2, [r7, #24]
 8001b0a:	23c0      	movs	r3, #192	@ 0xc0
 8001b0c:	041b      	lsls	r3, r3, #16
 8001b0e:	401a      	ands	r2, r3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d001      	beq.n	8001b1c <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	e000      	b.n	8001b1e <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8001b1c:	2300      	movs	r3, #0
}
 8001b1e:	0018      	movs	r0, r3
 8001b20:	46bd      	mov	sp, r7
 8001b22:	b00a      	add	sp, #40	@ 0x28
 8001b24:	bdb0      	pop	{r4, r5, r7, pc}
 8001b26:	46c0      	nop			@ (mov r8, r8)
 8001b28:	40021000 	.word	0x40021000
 8001b2c:	ff02ffff 	.word	0xff02ffff
 8001b30:	feffffff 	.word	0xfeffffff

08001b34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b34:	b5b0      	push	{r4, r5, r7, lr}
 8001b36:	b084      	sub	sp, #16
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d101      	bne.n	8001b48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
 8001b46:	e128      	b.n	8001d9a <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b48:	4b96      	ldr	r3, [pc, #600]	@ (8001da4 <HAL_RCC_ClockConfig+0x270>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	4013      	ands	r3, r2
 8001b50:	683a      	ldr	r2, [r7, #0]
 8001b52:	429a      	cmp	r2, r3
 8001b54:	d91e      	bls.n	8001b94 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b56:	4b93      	ldr	r3, [pc, #588]	@ (8001da4 <HAL_RCC_ClockConfig+0x270>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	4393      	bics	r3, r2
 8001b5e:	0019      	movs	r1, r3
 8001b60:	4b90      	ldr	r3, [pc, #576]	@ (8001da4 <HAL_RCC_ClockConfig+0x270>)
 8001b62:	683a      	ldr	r2, [r7, #0]
 8001b64:	430a      	orrs	r2, r1
 8001b66:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001b68:	f7ff f8fe 	bl	8000d68 <HAL_GetTick>
 8001b6c:	0003      	movs	r3, r0
 8001b6e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b70:	e009      	b.n	8001b86 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b72:	f7ff f8f9 	bl	8000d68 <HAL_GetTick>
 8001b76:	0002      	movs	r2, r0
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	4a8a      	ldr	r2, [pc, #552]	@ (8001da8 <HAL_RCC_ClockConfig+0x274>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d901      	bls.n	8001b86 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001b82:	2303      	movs	r3, #3
 8001b84:	e109      	b.n	8001d9a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b86:	4b87      	ldr	r3, [pc, #540]	@ (8001da4 <HAL_RCC_ClockConfig+0x270>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	683a      	ldr	r2, [r7, #0]
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d1ee      	bne.n	8001b72 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	2202      	movs	r2, #2
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	d009      	beq.n	8001bb2 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b9e:	4b83      	ldr	r3, [pc, #524]	@ (8001dac <HAL_RCC_ClockConfig+0x278>)
 8001ba0:	68db      	ldr	r3, [r3, #12]
 8001ba2:	22f0      	movs	r2, #240	@ 0xf0
 8001ba4:	4393      	bics	r3, r2
 8001ba6:	0019      	movs	r1, r3
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	689a      	ldr	r2, [r3, #8]
 8001bac:	4b7f      	ldr	r3, [pc, #508]	@ (8001dac <HAL_RCC_ClockConfig+0x278>)
 8001bae:	430a      	orrs	r2, r1
 8001bb0:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	4013      	ands	r3, r2
 8001bba:	d100      	bne.n	8001bbe <HAL_RCC_ClockConfig+0x8a>
 8001bbc:	e089      	b.n	8001cd2 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	2b02      	cmp	r3, #2
 8001bc4:	d107      	bne.n	8001bd6 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001bc6:	4b79      	ldr	r3, [pc, #484]	@ (8001dac <HAL_RCC_ClockConfig+0x278>)
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	2380      	movs	r3, #128	@ 0x80
 8001bcc:	029b      	lsls	r3, r3, #10
 8001bce:	4013      	ands	r3, r2
 8001bd0:	d120      	bne.n	8001c14 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e0e1      	b.n	8001d9a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	2b03      	cmp	r3, #3
 8001bdc:	d107      	bne.n	8001bee <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001bde:	4b73      	ldr	r3, [pc, #460]	@ (8001dac <HAL_RCC_ClockConfig+0x278>)
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	2380      	movs	r3, #128	@ 0x80
 8001be4:	049b      	lsls	r3, r3, #18
 8001be6:	4013      	ands	r3, r2
 8001be8:	d114      	bne.n	8001c14 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e0d5      	b.n	8001d9a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	2b01      	cmp	r3, #1
 8001bf4:	d106      	bne.n	8001c04 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001bf6:	4b6d      	ldr	r3, [pc, #436]	@ (8001dac <HAL_RCC_ClockConfig+0x278>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	2204      	movs	r2, #4
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	d109      	bne.n	8001c14 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	e0ca      	b.n	8001d9a <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001c04:	4b69      	ldr	r3, [pc, #420]	@ (8001dac <HAL_RCC_ClockConfig+0x278>)
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	2380      	movs	r3, #128	@ 0x80
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	d101      	bne.n	8001c14 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	e0c2      	b.n	8001d9a <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c14:	4b65      	ldr	r3, [pc, #404]	@ (8001dac <HAL_RCC_ClockConfig+0x278>)
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	2203      	movs	r2, #3
 8001c1a:	4393      	bics	r3, r2
 8001c1c:	0019      	movs	r1, r3
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	685a      	ldr	r2, [r3, #4]
 8001c22:	4b62      	ldr	r3, [pc, #392]	@ (8001dac <HAL_RCC_ClockConfig+0x278>)
 8001c24:	430a      	orrs	r2, r1
 8001c26:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c28:	f7ff f89e 	bl	8000d68 <HAL_GetTick>
 8001c2c:	0003      	movs	r3, r0
 8001c2e:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	2b02      	cmp	r3, #2
 8001c36:	d111      	bne.n	8001c5c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c38:	e009      	b.n	8001c4e <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c3a:	f7ff f895 	bl	8000d68 <HAL_GetTick>
 8001c3e:	0002      	movs	r2, r0
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	1ad3      	subs	r3, r2, r3
 8001c44:	4a58      	ldr	r2, [pc, #352]	@ (8001da8 <HAL_RCC_ClockConfig+0x274>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d901      	bls.n	8001c4e <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	e0a5      	b.n	8001d9a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c4e:	4b57      	ldr	r3, [pc, #348]	@ (8001dac <HAL_RCC_ClockConfig+0x278>)
 8001c50:	68db      	ldr	r3, [r3, #12]
 8001c52:	220c      	movs	r2, #12
 8001c54:	4013      	ands	r3, r2
 8001c56:	2b08      	cmp	r3, #8
 8001c58:	d1ef      	bne.n	8001c3a <HAL_RCC_ClockConfig+0x106>
 8001c5a:	e03a      	b.n	8001cd2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	2b03      	cmp	r3, #3
 8001c62:	d111      	bne.n	8001c88 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c64:	e009      	b.n	8001c7a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c66:	f7ff f87f 	bl	8000d68 <HAL_GetTick>
 8001c6a:	0002      	movs	r2, r0
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	1ad3      	subs	r3, r2, r3
 8001c70:	4a4d      	ldr	r2, [pc, #308]	@ (8001da8 <HAL_RCC_ClockConfig+0x274>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d901      	bls.n	8001c7a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001c76:	2303      	movs	r3, #3
 8001c78:	e08f      	b.n	8001d9a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c7a:	4b4c      	ldr	r3, [pc, #304]	@ (8001dac <HAL_RCC_ClockConfig+0x278>)
 8001c7c:	68db      	ldr	r3, [r3, #12]
 8001c7e:	220c      	movs	r2, #12
 8001c80:	4013      	ands	r3, r2
 8001c82:	2b0c      	cmp	r3, #12
 8001c84:	d1ef      	bne.n	8001c66 <HAL_RCC_ClockConfig+0x132>
 8001c86:	e024      	b.n	8001cd2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d11b      	bne.n	8001cc8 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c90:	e009      	b.n	8001ca6 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c92:	f7ff f869 	bl	8000d68 <HAL_GetTick>
 8001c96:	0002      	movs	r2, r0
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	1ad3      	subs	r3, r2, r3
 8001c9c:	4a42      	ldr	r2, [pc, #264]	@ (8001da8 <HAL_RCC_ClockConfig+0x274>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d901      	bls.n	8001ca6 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	e079      	b.n	8001d9a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ca6:	4b41      	ldr	r3, [pc, #260]	@ (8001dac <HAL_RCC_ClockConfig+0x278>)
 8001ca8:	68db      	ldr	r3, [r3, #12]
 8001caa:	220c      	movs	r2, #12
 8001cac:	4013      	ands	r3, r2
 8001cae:	2b04      	cmp	r3, #4
 8001cb0:	d1ef      	bne.n	8001c92 <HAL_RCC_ClockConfig+0x15e>
 8001cb2:	e00e      	b.n	8001cd2 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cb4:	f7ff f858 	bl	8000d68 <HAL_GetTick>
 8001cb8:	0002      	movs	r2, r0
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	4a3a      	ldr	r2, [pc, #232]	@ (8001da8 <HAL_RCC_ClockConfig+0x274>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d901      	bls.n	8001cc8 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	e068      	b.n	8001d9a <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001cc8:	4b38      	ldr	r3, [pc, #224]	@ (8001dac <HAL_RCC_ClockConfig+0x278>)
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	220c      	movs	r2, #12
 8001cce:	4013      	ands	r3, r2
 8001cd0:	d1f0      	bne.n	8001cb4 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001cd2:	4b34      	ldr	r3, [pc, #208]	@ (8001da4 <HAL_RCC_ClockConfig+0x270>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	4013      	ands	r3, r2
 8001cda:	683a      	ldr	r2, [r7, #0]
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d21e      	bcs.n	8001d1e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ce0:	4b30      	ldr	r3, [pc, #192]	@ (8001da4 <HAL_RCC_ClockConfig+0x270>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	4393      	bics	r3, r2
 8001ce8:	0019      	movs	r1, r3
 8001cea:	4b2e      	ldr	r3, [pc, #184]	@ (8001da4 <HAL_RCC_ClockConfig+0x270>)
 8001cec:	683a      	ldr	r2, [r7, #0]
 8001cee:	430a      	orrs	r2, r1
 8001cf0:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001cf2:	f7ff f839 	bl	8000d68 <HAL_GetTick>
 8001cf6:	0003      	movs	r3, r0
 8001cf8:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cfa:	e009      	b.n	8001d10 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cfc:	f7ff f834 	bl	8000d68 <HAL_GetTick>
 8001d00:	0002      	movs	r2, r0
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	4a28      	ldr	r2, [pc, #160]	@ (8001da8 <HAL_RCC_ClockConfig+0x274>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d901      	bls.n	8001d10 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001d0c:	2303      	movs	r3, #3
 8001d0e:	e044      	b.n	8001d9a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d10:	4b24      	ldr	r3, [pc, #144]	@ (8001da4 <HAL_RCC_ClockConfig+0x270>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	2201      	movs	r2, #1
 8001d16:	4013      	ands	r3, r2
 8001d18:	683a      	ldr	r2, [r7, #0]
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	d1ee      	bne.n	8001cfc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	2204      	movs	r2, #4
 8001d24:	4013      	ands	r3, r2
 8001d26:	d009      	beq.n	8001d3c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d28:	4b20      	ldr	r3, [pc, #128]	@ (8001dac <HAL_RCC_ClockConfig+0x278>)
 8001d2a:	68db      	ldr	r3, [r3, #12]
 8001d2c:	4a20      	ldr	r2, [pc, #128]	@ (8001db0 <HAL_RCC_ClockConfig+0x27c>)
 8001d2e:	4013      	ands	r3, r2
 8001d30:	0019      	movs	r1, r3
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	68da      	ldr	r2, [r3, #12]
 8001d36:	4b1d      	ldr	r3, [pc, #116]	@ (8001dac <HAL_RCC_ClockConfig+0x278>)
 8001d38:	430a      	orrs	r2, r1
 8001d3a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	2208      	movs	r2, #8
 8001d42:	4013      	ands	r3, r2
 8001d44:	d00a      	beq.n	8001d5c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d46:	4b19      	ldr	r3, [pc, #100]	@ (8001dac <HAL_RCC_ClockConfig+0x278>)
 8001d48:	68db      	ldr	r3, [r3, #12]
 8001d4a:	4a1a      	ldr	r2, [pc, #104]	@ (8001db4 <HAL_RCC_ClockConfig+0x280>)
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	0019      	movs	r1, r3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	691b      	ldr	r3, [r3, #16]
 8001d54:	00da      	lsls	r2, r3, #3
 8001d56:	4b15      	ldr	r3, [pc, #84]	@ (8001dac <HAL_RCC_ClockConfig+0x278>)
 8001d58:	430a      	orrs	r2, r1
 8001d5a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d5c:	f000 f832 	bl	8001dc4 <HAL_RCC_GetSysClockFreq>
 8001d60:	0001      	movs	r1, r0
 8001d62:	4b12      	ldr	r3, [pc, #72]	@ (8001dac <HAL_RCC_ClockConfig+0x278>)
 8001d64:	68db      	ldr	r3, [r3, #12]
 8001d66:	091b      	lsrs	r3, r3, #4
 8001d68:	220f      	movs	r2, #15
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	4a12      	ldr	r2, [pc, #72]	@ (8001db8 <HAL_RCC_ClockConfig+0x284>)
 8001d6e:	5cd3      	ldrb	r3, [r2, r3]
 8001d70:	000a      	movs	r2, r1
 8001d72:	40da      	lsrs	r2, r3
 8001d74:	4b11      	ldr	r3, [pc, #68]	@ (8001dbc <HAL_RCC_ClockConfig+0x288>)
 8001d76:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001d78:	4b11      	ldr	r3, [pc, #68]	@ (8001dc0 <HAL_RCC_ClockConfig+0x28c>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	250b      	movs	r5, #11
 8001d7e:	197c      	adds	r4, r7, r5
 8001d80:	0018      	movs	r0, r3
 8001d82:	f7fe ffab 	bl	8000cdc <HAL_InitTick>
 8001d86:	0003      	movs	r3, r0
 8001d88:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001d8a:	197b      	adds	r3, r7, r5
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d002      	beq.n	8001d98 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001d92:	197b      	adds	r3, r7, r5
 8001d94:	781b      	ldrb	r3, [r3, #0]
 8001d96:	e000      	b.n	8001d9a <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001d98:	2300      	movs	r3, #0
}
 8001d9a:	0018      	movs	r0, r3
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	b004      	add	sp, #16
 8001da0:	bdb0      	pop	{r4, r5, r7, pc}
 8001da2:	46c0      	nop			@ (mov r8, r8)
 8001da4:	40022000 	.word	0x40022000
 8001da8:	00001388 	.word	0x00001388
 8001dac:	40021000 	.word	0x40021000
 8001db0:	fffff8ff 	.word	0xfffff8ff
 8001db4:	ffffc7ff 	.word	0xffffc7ff
 8001db8:	08003ae8 	.word	0x08003ae8
 8001dbc:	20000000 	.word	0x20000000
 8001dc0:	20000004 	.word	0x20000004

08001dc4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b086      	sub	sp, #24
 8001dc8:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001dca:	4b3c      	ldr	r3, [pc, #240]	@ (8001ebc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001dcc:	68db      	ldr	r3, [r3, #12]
 8001dce:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	220c      	movs	r2, #12
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	2b0c      	cmp	r3, #12
 8001dd8:	d013      	beq.n	8001e02 <HAL_RCC_GetSysClockFreq+0x3e>
 8001dda:	d85c      	bhi.n	8001e96 <HAL_RCC_GetSysClockFreq+0xd2>
 8001ddc:	2b04      	cmp	r3, #4
 8001dde:	d002      	beq.n	8001de6 <HAL_RCC_GetSysClockFreq+0x22>
 8001de0:	2b08      	cmp	r3, #8
 8001de2:	d00b      	beq.n	8001dfc <HAL_RCC_GetSysClockFreq+0x38>
 8001de4:	e057      	b.n	8001e96 <HAL_RCC_GetSysClockFreq+0xd2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001de6:	4b35      	ldr	r3, [pc, #212]	@ (8001ebc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	2210      	movs	r2, #16
 8001dec:	4013      	ands	r3, r2
 8001dee:	d002      	beq.n	8001df6 <HAL_RCC_GetSysClockFreq+0x32>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001df0:	4b33      	ldr	r3, [pc, #204]	@ (8001ec0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001df2:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001df4:	e05d      	b.n	8001eb2 <HAL_RCC_GetSysClockFreq+0xee>
        sysclockfreq =  HSI_VALUE;
 8001df6:	4b33      	ldr	r3, [pc, #204]	@ (8001ec4 <HAL_RCC_GetSysClockFreq+0x100>)
 8001df8:	613b      	str	r3, [r7, #16]
      break;
 8001dfa:	e05a      	b.n	8001eb2 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001dfc:	4b32      	ldr	r3, [pc, #200]	@ (8001ec8 <HAL_RCC_GetSysClockFreq+0x104>)
 8001dfe:	613b      	str	r3, [r7, #16]
      break;
 8001e00:	e057      	b.n	8001eb2 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	0c9b      	lsrs	r3, r3, #18
 8001e06:	220f      	movs	r2, #15
 8001e08:	4013      	ands	r3, r2
 8001e0a:	4a30      	ldr	r2, [pc, #192]	@ (8001ecc <HAL_RCC_GetSysClockFreq+0x108>)
 8001e0c:	5cd3      	ldrb	r3, [r2, r3]
 8001e0e:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	0d9b      	lsrs	r3, r3, #22
 8001e14:	2203      	movs	r2, #3
 8001e16:	4013      	ands	r3, r2
 8001e18:	3301      	adds	r3, #1
 8001e1a:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e1c:	4b27      	ldr	r3, [pc, #156]	@ (8001ebc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e1e:	68da      	ldr	r2, [r3, #12]
 8001e20:	2380      	movs	r3, #128	@ 0x80
 8001e22:	025b      	lsls	r3, r3, #9
 8001e24:	4013      	ands	r3, r2
 8001e26:	d00f      	beq.n	8001e48 <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((HSE_VALUE * pllm) / plld);
 8001e28:	68b9      	ldr	r1, [r7, #8]
 8001e2a:	000a      	movs	r2, r1
 8001e2c:	0152      	lsls	r2, r2, #5
 8001e2e:	1a52      	subs	r2, r2, r1
 8001e30:	0193      	lsls	r3, r2, #6
 8001e32:	1a9b      	subs	r3, r3, r2
 8001e34:	00db      	lsls	r3, r3, #3
 8001e36:	185b      	adds	r3, r3, r1
 8001e38:	025b      	lsls	r3, r3, #9
 8001e3a:	6879      	ldr	r1, [r7, #4]
 8001e3c:	0018      	movs	r0, r3
 8001e3e:	f7fe f96b 	bl	8000118 <__udivsi3>
 8001e42:	0003      	movs	r3, r0
 8001e44:	617b      	str	r3, [r7, #20]
 8001e46:	e023      	b.n	8001e90 <HAL_RCC_GetSysClockFreq+0xcc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001e48:	4b1c      	ldr	r3, [pc, #112]	@ (8001ebc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	2210      	movs	r2, #16
 8001e4e:	4013      	ands	r3, r2
 8001e50:	d00f      	beq.n	8001e72 <HAL_RCC_GetSysClockFreq+0xae>
        {
          pllvco = (uint32_t)((((HSI_VALUE >> 2)) * pllm) / plld);
 8001e52:	68b9      	ldr	r1, [r7, #8]
 8001e54:	000a      	movs	r2, r1
 8001e56:	0152      	lsls	r2, r2, #5
 8001e58:	1a52      	subs	r2, r2, r1
 8001e5a:	0193      	lsls	r3, r2, #6
 8001e5c:	1a9b      	subs	r3, r3, r2
 8001e5e:	00db      	lsls	r3, r3, #3
 8001e60:	185b      	adds	r3, r3, r1
 8001e62:	021b      	lsls	r3, r3, #8
 8001e64:	6879      	ldr	r1, [r7, #4]
 8001e66:	0018      	movs	r0, r3
 8001e68:	f7fe f956 	bl	8000118 <__udivsi3>
 8001e6c:	0003      	movs	r3, r0
 8001e6e:	617b      	str	r3, [r7, #20]
 8001e70:	e00e      	b.n	8001e90 <HAL_RCC_GetSysClockFreq+0xcc>
        }
        else
        {
         pllvco = (uint32_t)((HSI_VALUE * pllm) / plld);
 8001e72:	68b9      	ldr	r1, [r7, #8]
 8001e74:	000a      	movs	r2, r1
 8001e76:	0152      	lsls	r2, r2, #5
 8001e78:	1a52      	subs	r2, r2, r1
 8001e7a:	0193      	lsls	r3, r2, #6
 8001e7c:	1a9b      	subs	r3, r3, r2
 8001e7e:	00db      	lsls	r3, r3, #3
 8001e80:	185b      	adds	r3, r3, r1
 8001e82:	029b      	lsls	r3, r3, #10
 8001e84:	6879      	ldr	r1, [r7, #4]
 8001e86:	0018      	movs	r0, r3
 8001e88:	f7fe f946 	bl	8000118 <__udivsi3>
 8001e8c:	0003      	movs	r3, r0
 8001e8e:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	613b      	str	r3, [r7, #16]
      break;
 8001e94:	e00d      	b.n	8001eb2 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001e96:	4b09      	ldr	r3, [pc, #36]	@ (8001ebc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	0b5b      	lsrs	r3, r3, #13
 8001e9c:	2207      	movs	r2, #7
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	3301      	adds	r3, #1
 8001ea6:	2280      	movs	r2, #128	@ 0x80
 8001ea8:	0212      	lsls	r2, r2, #8
 8001eaa:	409a      	lsls	r2, r3
 8001eac:	0013      	movs	r3, r2
 8001eae:	613b      	str	r3, [r7, #16]
      break;
 8001eb0:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001eb2:	693b      	ldr	r3, [r7, #16]
}
 8001eb4:	0018      	movs	r0, r3
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	b006      	add	sp, #24
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	40021000 	.word	0x40021000
 8001ec0:	003d0900 	.word	0x003d0900
 8001ec4:	00f42400 	.word	0x00f42400
 8001ec8:	007a1200 	.word	0x007a1200
 8001ecc:	08003b00 	.word	0x08003b00

08001ed0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ed4:	4b02      	ldr	r3, [pc, #8]	@ (8001ee0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
}
 8001ed8:	0018      	movs	r0, r3
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	46c0      	nop			@ (mov r8, r8)
 8001ee0:	20000000 	.word	0x20000000

08001ee4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ee8:	f7ff fff2 	bl	8001ed0 <HAL_RCC_GetHCLKFreq>
 8001eec:	0001      	movs	r1, r0
 8001eee:	4b06      	ldr	r3, [pc, #24]	@ (8001f08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ef0:	68db      	ldr	r3, [r3, #12]
 8001ef2:	0a1b      	lsrs	r3, r3, #8
 8001ef4:	2207      	movs	r2, #7
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	4a04      	ldr	r2, [pc, #16]	@ (8001f0c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001efa:	5cd3      	ldrb	r3, [r2, r3]
 8001efc:	40d9      	lsrs	r1, r3
 8001efe:	000b      	movs	r3, r1
}
 8001f00:	0018      	movs	r0, r3
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	46c0      	nop			@ (mov r8, r8)
 8001f08:	40021000 	.word	0x40021000
 8001f0c:	08003af8 	.word	0x08003af8

08001f10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001f14:	f7ff ffdc 	bl	8001ed0 <HAL_RCC_GetHCLKFreq>
 8001f18:	0001      	movs	r1, r0
 8001f1a:	4b06      	ldr	r3, [pc, #24]	@ (8001f34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f1c:	68db      	ldr	r3, [r3, #12]
 8001f1e:	0adb      	lsrs	r3, r3, #11
 8001f20:	2207      	movs	r2, #7
 8001f22:	4013      	ands	r3, r2
 8001f24:	4a04      	ldr	r2, [pc, #16]	@ (8001f38 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001f26:	5cd3      	ldrb	r3, [r2, r3]
 8001f28:	40d9      	lsrs	r1, r3
 8001f2a:	000b      	movs	r3, r1
}
 8001f2c:	0018      	movs	r0, r3
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	46c0      	nop			@ (mov r8, r8)
 8001f34:	40021000 	.word	0x40021000
 8001f38:	08003af8 	.word	0x08003af8

08001f3c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b086      	sub	sp, #24
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8001f44:	2017      	movs	r0, #23
 8001f46:	183b      	adds	r3, r7, r0
 8001f48:	2200      	movs	r2, #0
 8001f4a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	2220      	movs	r2, #32
 8001f52:	4013      	ands	r3, r2
 8001f54:	d100      	bne.n	8001f58 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8001f56:	e0c7      	b.n	80020e8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f58:	4b9b      	ldr	r3, [pc, #620]	@ (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8001f5a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001f5c:	2380      	movs	r3, #128	@ 0x80
 8001f5e:	055b      	lsls	r3, r3, #21
 8001f60:	4013      	ands	r3, r2
 8001f62:	d109      	bne.n	8001f78 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f64:	4b98      	ldr	r3, [pc, #608]	@ (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8001f66:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001f68:	4b97      	ldr	r3, [pc, #604]	@ (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8001f6a:	2180      	movs	r1, #128	@ 0x80
 8001f6c:	0549      	lsls	r1, r1, #21
 8001f6e:	430a      	orrs	r2, r1
 8001f70:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8001f72:	183b      	adds	r3, r7, r0
 8001f74:	2201      	movs	r2, #1
 8001f76:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f78:	4b94      	ldr	r3, [pc, #592]	@ (80021cc <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	2380      	movs	r3, #128	@ 0x80
 8001f7e:	005b      	lsls	r3, r3, #1
 8001f80:	4013      	ands	r3, r2
 8001f82:	d11a      	bne.n	8001fba <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f84:	4b91      	ldr	r3, [pc, #580]	@ (80021cc <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	4b90      	ldr	r3, [pc, #576]	@ (80021cc <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8001f8a:	2180      	movs	r1, #128	@ 0x80
 8001f8c:	0049      	lsls	r1, r1, #1
 8001f8e:	430a      	orrs	r2, r1
 8001f90:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f92:	f7fe fee9 	bl	8000d68 <HAL_GetTick>
 8001f96:	0003      	movs	r3, r0
 8001f98:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f9a:	e008      	b.n	8001fae <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f9c:	f7fe fee4 	bl	8000d68 <HAL_GetTick>
 8001fa0:	0002      	movs	r2, r0
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	2b64      	cmp	r3, #100	@ 0x64
 8001fa8:	d901      	bls.n	8001fae <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8001faa:	2303      	movs	r3, #3
 8001fac:	e107      	b.n	80021be <HAL_RCCEx_PeriphCLKConfig+0x282>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fae:	4b87      	ldr	r3, [pc, #540]	@ (80021cc <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	2380      	movs	r3, #128	@ 0x80
 8001fb4:	005b      	lsls	r3, r3, #1
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	d0f0      	beq.n	8001f9c <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001fba:	4b83      	ldr	r3, [pc, #524]	@ (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	23c0      	movs	r3, #192	@ 0xc0
 8001fc0:	039b      	lsls	r3, r3, #14
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	685a      	ldr	r2, [r3, #4]
 8001fca:	23c0      	movs	r3, #192	@ 0xc0
 8001fcc:	039b      	lsls	r3, r3, #14
 8001fce:	4013      	ands	r3, r2
 8001fd0:	68fa      	ldr	r2, [r7, #12]
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	d013      	beq.n	8001ffe <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	685a      	ldr	r2, [r3, #4]
 8001fda:	23c0      	movs	r3, #192	@ 0xc0
 8001fdc:	029b      	lsls	r3, r3, #10
 8001fde:	401a      	ands	r2, r3
 8001fe0:	23c0      	movs	r3, #192	@ 0xc0
 8001fe2:	029b      	lsls	r3, r3, #10
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d10a      	bne.n	8001ffe <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001fe8:	4b77      	ldr	r3, [pc, #476]	@ (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	2380      	movs	r3, #128	@ 0x80
 8001fee:	029b      	lsls	r3, r3, #10
 8001ff0:	401a      	ands	r2, r3
 8001ff2:	2380      	movs	r3, #128	@ 0x80
 8001ff4:	029b      	lsls	r3, r3, #10
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	d101      	bne.n	8001ffe <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e0df      	b.n	80021be <HAL_RCCEx_PeriphCLKConfig+0x282>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001ffe:	4b72      	ldr	r3, [pc, #456]	@ (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8002000:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002002:	23c0      	movs	r3, #192	@ 0xc0
 8002004:	029b      	lsls	r3, r3, #10
 8002006:	4013      	ands	r3, r2
 8002008:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d03b      	beq.n	8002088 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	685a      	ldr	r2, [r3, #4]
 8002014:	23c0      	movs	r3, #192	@ 0xc0
 8002016:	029b      	lsls	r3, r3, #10
 8002018:	4013      	ands	r3, r2
 800201a:	68fa      	ldr	r2, [r7, #12]
 800201c:	429a      	cmp	r2, r3
 800201e:	d033      	beq.n	8002088 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	2220      	movs	r2, #32
 8002026:	4013      	ands	r3, r2
 8002028:	d02e      	beq.n	8002088 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800202a:	4b67      	ldr	r3, [pc, #412]	@ (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800202c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800202e:	4a68      	ldr	r2, [pc, #416]	@ (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8002030:	4013      	ands	r3, r2
 8002032:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002034:	4b64      	ldr	r3, [pc, #400]	@ (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8002036:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002038:	4b63      	ldr	r3, [pc, #396]	@ (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800203a:	2180      	movs	r1, #128	@ 0x80
 800203c:	0309      	lsls	r1, r1, #12
 800203e:	430a      	orrs	r2, r1
 8002040:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002042:	4b61      	ldr	r3, [pc, #388]	@ (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8002044:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002046:	4b60      	ldr	r3, [pc, #384]	@ (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8002048:	4962      	ldr	r1, [pc, #392]	@ (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 800204a:	400a      	ands	r2, r1
 800204c:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 800204e:	4b5e      	ldr	r3, [pc, #376]	@ (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8002050:	68fa      	ldr	r2, [r7, #12]
 8002052:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002054:	68fa      	ldr	r2, [r7, #12]
 8002056:	2380      	movs	r3, #128	@ 0x80
 8002058:	005b      	lsls	r3, r3, #1
 800205a:	4013      	ands	r3, r2
 800205c:	d014      	beq.n	8002088 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800205e:	f7fe fe83 	bl	8000d68 <HAL_GetTick>
 8002062:	0003      	movs	r3, r0
 8002064:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002066:	e009      	b.n	800207c <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002068:	f7fe fe7e 	bl	8000d68 <HAL_GetTick>
 800206c:	0002      	movs	r2, r0
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	4a59      	ldr	r2, [pc, #356]	@ (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d901      	bls.n	800207c <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8002078:	2303      	movs	r3, #3
 800207a:	e0a0      	b.n	80021be <HAL_RCCEx_PeriphCLKConfig+0x282>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800207c:	4b52      	ldr	r3, [pc, #328]	@ (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800207e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002080:	2380      	movs	r3, #128	@ 0x80
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	4013      	ands	r3, r2
 8002086:	d0ef      	beq.n	8002068 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	2220      	movs	r2, #32
 800208e:	4013      	ands	r3, r2
 8002090:	d01f      	beq.n	80020d2 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	685a      	ldr	r2, [r3, #4]
 8002096:	23c0      	movs	r3, #192	@ 0xc0
 8002098:	029b      	lsls	r3, r3, #10
 800209a:	401a      	ands	r2, r3
 800209c:	23c0      	movs	r3, #192	@ 0xc0
 800209e:	029b      	lsls	r3, r3, #10
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d10c      	bne.n	80020be <HAL_RCCEx_PeriphCLKConfig+0x182>
 80020a4:	4b48      	ldr	r3, [pc, #288]	@ (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a4c      	ldr	r2, [pc, #304]	@ (80021dc <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80020aa:	4013      	ands	r3, r2
 80020ac:	0019      	movs	r1, r3
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	685a      	ldr	r2, [r3, #4]
 80020b2:	23c0      	movs	r3, #192	@ 0xc0
 80020b4:	039b      	lsls	r3, r3, #14
 80020b6:	401a      	ands	r2, r3
 80020b8:	4b43      	ldr	r3, [pc, #268]	@ (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80020ba:	430a      	orrs	r2, r1
 80020bc:	601a      	str	r2, [r3, #0]
 80020be:	4b42      	ldr	r3, [pc, #264]	@ (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80020c0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	685a      	ldr	r2, [r3, #4]
 80020c6:	23c0      	movs	r3, #192	@ 0xc0
 80020c8:	029b      	lsls	r3, r3, #10
 80020ca:	401a      	ands	r2, r3
 80020cc:	4b3e      	ldr	r3, [pc, #248]	@ (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80020ce:	430a      	orrs	r2, r1
 80020d0:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80020d2:	2317      	movs	r3, #23
 80020d4:	18fb      	adds	r3, r7, r3
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d105      	bne.n	80020e8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020dc:	4b3a      	ldr	r3, [pc, #232]	@ (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80020de:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80020e0:	4b39      	ldr	r3, [pc, #228]	@ (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80020e2:	493f      	ldr	r1, [pc, #252]	@ (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 80020e4:	400a      	ands	r2, r1
 80020e6:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	2201      	movs	r2, #1
 80020ee:	4013      	ands	r3, r2
 80020f0:	d009      	beq.n	8002106 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80020f2:	4b35      	ldr	r3, [pc, #212]	@ (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80020f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020f6:	2203      	movs	r2, #3
 80020f8:	4393      	bics	r3, r2
 80020fa:	0019      	movs	r1, r3
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	689a      	ldr	r2, [r3, #8]
 8002100:	4b31      	ldr	r3, [pc, #196]	@ (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8002102:	430a      	orrs	r2, r1
 8002104:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	2202      	movs	r2, #2
 800210c:	4013      	ands	r3, r2
 800210e:	d009      	beq.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002110:	4b2d      	ldr	r3, [pc, #180]	@ (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8002112:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002114:	220c      	movs	r2, #12
 8002116:	4393      	bics	r3, r2
 8002118:	0019      	movs	r1, r3
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	68da      	ldr	r2, [r3, #12]
 800211e:	4b2a      	ldr	r3, [pc, #168]	@ (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8002120:	430a      	orrs	r2, r1
 8002122:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	2204      	movs	r2, #4
 800212a:	4013      	ands	r3, r2
 800212c:	d009      	beq.n	8002142 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800212e:	4b26      	ldr	r3, [pc, #152]	@ (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8002130:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002132:	4a2c      	ldr	r2, [pc, #176]	@ (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8002134:	4013      	ands	r3, r2
 8002136:	0019      	movs	r1, r3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	691a      	ldr	r2, [r3, #16]
 800213c:	4b22      	ldr	r3, [pc, #136]	@ (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800213e:	430a      	orrs	r2, r1
 8002140:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	2208      	movs	r2, #8
 8002148:	4013      	ands	r3, r2
 800214a:	d009      	beq.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800214c:	4b1e      	ldr	r3, [pc, #120]	@ (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800214e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002150:	4a25      	ldr	r2, [pc, #148]	@ (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8002152:	4013      	ands	r3, r2
 8002154:	0019      	movs	r1, r3
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	695a      	ldr	r2, [r3, #20]
 800215a:	4b1b      	ldr	r3, [pc, #108]	@ (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800215c:	430a      	orrs	r2, r1
 800215e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	2380      	movs	r3, #128	@ 0x80
 8002166:	005b      	lsls	r3, r3, #1
 8002168:	4013      	ands	r3, r2
 800216a:	d009      	beq.n	8002180 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800216c:	4b16      	ldr	r3, [pc, #88]	@ (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800216e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002170:	4a17      	ldr	r2, [pc, #92]	@ (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8002172:	4013      	ands	r3, r2
 8002174:	0019      	movs	r1, r3
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	699a      	ldr	r2, [r3, #24]
 800217a:	4b13      	ldr	r3, [pc, #76]	@ (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800217c:	430a      	orrs	r2, r1
 800217e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	2240      	movs	r2, #64	@ 0x40
 8002186:	4013      	ands	r3, r2
 8002188:	d009      	beq.n	800219e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800218a:	4b0f      	ldr	r3, [pc, #60]	@ (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800218c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800218e:	4a17      	ldr	r2, [pc, #92]	@ (80021ec <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8002190:	4013      	ands	r3, r2
 8002192:	0019      	movs	r1, r3
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6a1a      	ldr	r2, [r3, #32]
 8002198:	4b0b      	ldr	r3, [pc, #44]	@ (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800219a:	430a      	orrs	r2, r1
 800219c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	2280      	movs	r2, #128	@ 0x80
 80021a4:	4013      	ands	r3, r2
 80021a6:	d009      	beq.n	80021bc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80021a8:	4b07      	ldr	r3, [pc, #28]	@ (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80021aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021ac:	4a10      	ldr	r2, [pc, #64]	@ (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 80021ae:	4013      	ands	r3, r2
 80021b0:	0019      	movs	r1, r3
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	69da      	ldr	r2, [r3, #28]
 80021b6:	4b04      	ldr	r3, [pc, #16]	@ (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80021b8:	430a      	orrs	r2, r1
 80021ba:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80021bc:	2300      	movs	r3, #0
}
 80021be:	0018      	movs	r0, r3
 80021c0:	46bd      	mov	sp, r7
 80021c2:	b006      	add	sp, #24
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	46c0      	nop			@ (mov r8, r8)
 80021c8:	40021000 	.word	0x40021000
 80021cc:	40007000 	.word	0x40007000
 80021d0:	fffcffff 	.word	0xfffcffff
 80021d4:	fff7ffff 	.word	0xfff7ffff
 80021d8:	00001388 	.word	0x00001388
 80021dc:	ffcfffff 	.word	0xffcfffff
 80021e0:	efffffff 	.word	0xefffffff
 80021e4:	fffff3ff 	.word	0xfffff3ff
 80021e8:	ffffcfff 	.word	0xffffcfff
 80021ec:	fbffffff 	.word	0xfbffffff
 80021f0:	fff3ffff 	.word	0xfff3ffff

080021f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b082      	sub	sp, #8
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d101      	bne.n	8002206 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	e044      	b.n	8002290 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800220a:	2b00      	cmp	r3, #0
 800220c:	d107      	bne.n	800221e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2278      	movs	r2, #120	@ 0x78
 8002212:	2100      	movs	r1, #0
 8002214:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	0018      	movs	r0, r3
 800221a:	f7fe fc23 	bl	8000a64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2224      	movs	r2, #36	@ 0x24
 8002222:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	2101      	movs	r1, #1
 8002230:	438a      	bics	r2, r1
 8002232:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002238:	2b00      	cmp	r3, #0
 800223a:	d003      	beq.n	8002244 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	0018      	movs	r0, r3
 8002240:	f000 fee4 	bl	800300c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	0018      	movs	r0, r3
 8002248:	f000 fc42 	bl	8002ad0 <UART_SetConfig>
 800224c:	0003      	movs	r3, r0
 800224e:	2b01      	cmp	r3, #1
 8002250:	d101      	bne.n	8002256 <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e01c      	b.n	8002290 <HAL_UART_Init+0x9c>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	685a      	ldr	r2, [r3, #4]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	490d      	ldr	r1, [pc, #52]	@ (8002298 <HAL_UART_Init+0xa4>)
 8002262:	400a      	ands	r2, r1
 8002264:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	689a      	ldr	r2, [r3, #8]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	212a      	movs	r1, #42	@ 0x2a
 8002272:	438a      	bics	r2, r1
 8002274:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	2101      	movs	r1, #1
 8002282:	430a      	orrs	r2, r1
 8002284:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	0018      	movs	r0, r3
 800228a:	f000 ff73 	bl	8003174 <UART_CheckIdleState>
 800228e:	0003      	movs	r3, r0
}
 8002290:	0018      	movs	r0, r3
 8002292:	46bd      	mov	sp, r7
 8002294:	b002      	add	sp, #8
 8002296:	bd80      	pop	{r7, pc}
 8002298:	ffffb7ff 	.word	0xffffb7ff

0800229c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b08a      	sub	sp, #40	@ 0x28
 80022a0:	af02      	add	r7, sp, #8
 80022a2:	60f8      	str	r0, [r7, #12]
 80022a4:	60b9      	str	r1, [r7, #8]
 80022a6:	603b      	str	r3, [r7, #0]
 80022a8:	1dbb      	adds	r3, r7, #6
 80022aa:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80022b0:	2b20      	cmp	r3, #32
 80022b2:	d000      	beq.n	80022b6 <HAL_UART_Transmit+0x1a>
 80022b4:	e08c      	b.n	80023d0 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d003      	beq.n	80022c4 <HAL_UART_Transmit+0x28>
 80022bc:	1dbb      	adds	r3, r7, #6
 80022be:	881b      	ldrh	r3, [r3, #0]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d101      	bne.n	80022c8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	e084      	b.n	80023d2 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	689a      	ldr	r2, [r3, #8]
 80022cc:	2380      	movs	r3, #128	@ 0x80
 80022ce:	015b      	lsls	r3, r3, #5
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d109      	bne.n	80022e8 <HAL_UART_Transmit+0x4c>
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	691b      	ldr	r3, [r3, #16]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d105      	bne.n	80022e8 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	2201      	movs	r2, #1
 80022e0:	4013      	ands	r3, r2
 80022e2:	d001      	beq.n	80022e8 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	e074      	b.n	80023d2 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	2284      	movs	r2, #132	@ 0x84
 80022ec:	2100      	movs	r1, #0
 80022ee:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	2221      	movs	r2, #33	@ 0x21
 80022f4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80022f6:	f7fe fd37 	bl	8000d68 <HAL_GetTick>
 80022fa:	0003      	movs	r3, r0
 80022fc:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	1dba      	adds	r2, r7, #6
 8002302:	2150      	movs	r1, #80	@ 0x50
 8002304:	8812      	ldrh	r2, [r2, #0]
 8002306:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	1dba      	adds	r2, r7, #6
 800230c:	2152      	movs	r1, #82	@ 0x52
 800230e:	8812      	ldrh	r2, [r2, #0]
 8002310:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	689a      	ldr	r2, [r3, #8]
 8002316:	2380      	movs	r3, #128	@ 0x80
 8002318:	015b      	lsls	r3, r3, #5
 800231a:	429a      	cmp	r2, r3
 800231c:	d108      	bne.n	8002330 <HAL_UART_Transmit+0x94>
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	691b      	ldr	r3, [r3, #16]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d104      	bne.n	8002330 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8002326:	2300      	movs	r3, #0
 8002328:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	61bb      	str	r3, [r7, #24]
 800232e:	e003      	b.n	8002338 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002334:	2300      	movs	r3, #0
 8002336:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002338:	e02f      	b.n	800239a <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800233a:	697a      	ldr	r2, [r7, #20]
 800233c:	68f8      	ldr	r0, [r7, #12]
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	9300      	str	r3, [sp, #0]
 8002342:	0013      	movs	r3, r2
 8002344:	2200      	movs	r2, #0
 8002346:	2180      	movs	r1, #128	@ 0x80
 8002348:	f000 ffbc 	bl	80032c4 <UART_WaitOnFlagUntilTimeout>
 800234c:	1e03      	subs	r3, r0, #0
 800234e:	d004      	beq.n	800235a <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	2220      	movs	r2, #32
 8002354:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8002356:	2303      	movs	r3, #3
 8002358:	e03b      	b.n	80023d2 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d10b      	bne.n	8002378 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002360:	69bb      	ldr	r3, [r7, #24]
 8002362:	881b      	ldrh	r3, [r3, #0]
 8002364:	001a      	movs	r2, r3
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	05d2      	lsls	r2, r2, #23
 800236c:	0dd2      	lsrs	r2, r2, #23
 800236e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002370:	69bb      	ldr	r3, [r7, #24]
 8002372:	3302      	adds	r3, #2
 8002374:	61bb      	str	r3, [r7, #24]
 8002376:	e007      	b.n	8002388 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002378:	69fb      	ldr	r3, [r7, #28]
 800237a:	781a      	ldrb	r2, [r3, #0]
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	3301      	adds	r3, #1
 8002386:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	2252      	movs	r2, #82	@ 0x52
 800238c:	5a9b      	ldrh	r3, [r3, r2]
 800238e:	b29b      	uxth	r3, r3
 8002390:	3b01      	subs	r3, #1
 8002392:	b299      	uxth	r1, r3
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	2252      	movs	r2, #82	@ 0x52
 8002398:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	2252      	movs	r2, #82	@ 0x52
 800239e:	5a9b      	ldrh	r3, [r3, r2]
 80023a0:	b29b      	uxth	r3, r3
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d1c9      	bne.n	800233a <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80023a6:	697a      	ldr	r2, [r7, #20]
 80023a8:	68f8      	ldr	r0, [r7, #12]
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	9300      	str	r3, [sp, #0]
 80023ae:	0013      	movs	r3, r2
 80023b0:	2200      	movs	r2, #0
 80023b2:	2140      	movs	r1, #64	@ 0x40
 80023b4:	f000 ff86 	bl	80032c4 <UART_WaitOnFlagUntilTimeout>
 80023b8:	1e03      	subs	r3, r0, #0
 80023ba:	d004      	beq.n	80023c6 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2220      	movs	r2, #32
 80023c0:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80023c2:	2303      	movs	r3, #3
 80023c4:	e005      	b.n	80023d2 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	2220      	movs	r2, #32
 80023ca:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80023cc:	2300      	movs	r3, #0
 80023ce:	e000      	b.n	80023d2 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 80023d0:	2302      	movs	r3, #2
  }
}
 80023d2:	0018      	movs	r0, r3
 80023d4:	46bd      	mov	sp, r7
 80023d6:	b008      	add	sp, #32
 80023d8:	bd80      	pop	{r7, pc}
	...

080023dc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b088      	sub	sp, #32
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	60f8      	str	r0, [r7, #12]
 80023e4:	60b9      	str	r1, [r7, #8]
 80023e6:	1dbb      	adds	r3, r7, #6
 80023e8:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	2280      	movs	r2, #128	@ 0x80
 80023ee:	589b      	ldr	r3, [r3, r2]
 80023f0:	2b20      	cmp	r3, #32
 80023f2:	d14a      	bne.n	800248a <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d003      	beq.n	8002402 <HAL_UART_Receive_IT+0x26>
 80023fa:	1dbb      	adds	r3, r7, #6
 80023fc:	881b      	ldrh	r3, [r3, #0]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d101      	bne.n	8002406 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e042      	b.n	800248c <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	689a      	ldr	r2, [r3, #8]
 800240a:	2380      	movs	r3, #128	@ 0x80
 800240c:	015b      	lsls	r3, r3, #5
 800240e:	429a      	cmp	r2, r3
 8002410:	d109      	bne.n	8002426 <HAL_UART_Receive_IT+0x4a>
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	691b      	ldr	r3, [r3, #16]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d105      	bne.n	8002426 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	2201      	movs	r2, #1
 800241e:	4013      	ands	r3, r2
 8002420:	d001      	beq.n	8002426 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e032      	b.n	800248c <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2200      	movs	r2, #0
 800242a:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a18      	ldr	r2, [pc, #96]	@ (8002494 <HAL_UART_Receive_IT+0xb8>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d020      	beq.n	8002478 <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	685a      	ldr	r2, [r3, #4]
 800243c:	2380      	movs	r3, #128	@ 0x80
 800243e:	041b      	lsls	r3, r3, #16
 8002440:	4013      	ands	r3, r2
 8002442:	d019      	beq.n	8002478 <HAL_UART_Receive_IT+0x9c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002444:	f3ef 8310 	mrs	r3, PRIMASK
 8002448:	613b      	str	r3, [r7, #16]
  return(result);
 800244a:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800244c:	61fb      	str	r3, [r7, #28]
 800244e:	2301      	movs	r3, #1
 8002450:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	f383 8810 	msr	PRIMASK, r3
}
 8002458:	46c0      	nop			@ (mov r8, r8)
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	2180      	movs	r1, #128	@ 0x80
 8002466:	04c9      	lsls	r1, r1, #19
 8002468:	430a      	orrs	r2, r1
 800246a:	601a      	str	r2, [r3, #0]
 800246c:	69fb      	ldr	r3, [r7, #28]
 800246e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002470:	69bb      	ldr	r3, [r7, #24]
 8002472:	f383 8810 	msr	PRIMASK, r3
}
 8002476:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002478:	1dbb      	adds	r3, r7, #6
 800247a:	881a      	ldrh	r2, [r3, #0]
 800247c:	68b9      	ldr	r1, [r7, #8]
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	0018      	movs	r0, r3
 8002482:	f000 ff8f 	bl	80033a4 <UART_Start_Receive_IT>
 8002486:	0003      	movs	r3, r0
 8002488:	e000      	b.n	800248c <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 800248a:	2302      	movs	r3, #2
  }
}
 800248c:	0018      	movs	r0, r3
 800248e:	46bd      	mov	sp, r7
 8002490:	b008      	add	sp, #32
 8002492:	bd80      	pop	{r7, pc}
 8002494:	40004800 	.word	0x40004800

08002498 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002498:	b590      	push	{r4, r7, lr}
 800249a:	b0ab      	sub	sp, #172	@ 0xac
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	69db      	ldr	r3, [r3, #28]
 80024a6:	22a4      	movs	r2, #164	@ 0xa4
 80024a8:	18b9      	adds	r1, r7, r2
 80024aa:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	20a0      	movs	r0, #160	@ 0xa0
 80024b4:	1839      	adds	r1, r7, r0
 80024b6:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	219c      	movs	r1, #156	@ 0x9c
 80024c0:	1879      	adds	r1, r7, r1
 80024c2:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80024c4:	0011      	movs	r1, r2
 80024c6:	18bb      	adds	r3, r7, r2
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a99      	ldr	r2, [pc, #612]	@ (8002730 <HAL_UART_IRQHandler+0x298>)
 80024cc:	4013      	ands	r3, r2
 80024ce:	2298      	movs	r2, #152	@ 0x98
 80024d0:	18bc      	adds	r4, r7, r2
 80024d2:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80024d4:	18bb      	adds	r3, r7, r2
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d114      	bne.n	8002506 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80024dc:	187b      	adds	r3, r7, r1
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	2220      	movs	r2, #32
 80024e2:	4013      	ands	r3, r2
 80024e4:	d00f      	beq.n	8002506 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80024e6:	183b      	adds	r3, r7, r0
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	2220      	movs	r2, #32
 80024ec:	4013      	ands	r3, r2
 80024ee:	d00a      	beq.n	8002506 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d100      	bne.n	80024fa <HAL_UART_IRQHandler+0x62>
 80024f8:	e2be      	b.n	8002a78 <HAL_UART_IRQHandler+0x5e0>
      {
        huart->RxISR(huart);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	0010      	movs	r0, r2
 8002502:	4798      	blx	r3
      }
      return;
 8002504:	e2b8      	b.n	8002a78 <HAL_UART_IRQHandler+0x5e0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002506:	2398      	movs	r3, #152	@ 0x98
 8002508:	18fb      	adds	r3, r7, r3
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d100      	bne.n	8002512 <HAL_UART_IRQHandler+0x7a>
 8002510:	e114      	b.n	800273c <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002512:	239c      	movs	r3, #156	@ 0x9c
 8002514:	18fb      	adds	r3, r7, r3
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	2201      	movs	r2, #1
 800251a:	4013      	ands	r3, r2
 800251c:	d106      	bne.n	800252c <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800251e:	23a0      	movs	r3, #160	@ 0xa0
 8002520:	18fb      	adds	r3, r7, r3
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a83      	ldr	r2, [pc, #524]	@ (8002734 <HAL_UART_IRQHandler+0x29c>)
 8002526:	4013      	ands	r3, r2
 8002528:	d100      	bne.n	800252c <HAL_UART_IRQHandler+0x94>
 800252a:	e107      	b.n	800273c <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800252c:	23a4      	movs	r3, #164	@ 0xa4
 800252e:	18fb      	adds	r3, r7, r3
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	2201      	movs	r2, #1
 8002534:	4013      	ands	r3, r2
 8002536:	d012      	beq.n	800255e <HAL_UART_IRQHandler+0xc6>
 8002538:	23a0      	movs	r3, #160	@ 0xa0
 800253a:	18fb      	adds	r3, r7, r3
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	2380      	movs	r3, #128	@ 0x80
 8002540:	005b      	lsls	r3, r3, #1
 8002542:	4013      	ands	r3, r2
 8002544:	d00b      	beq.n	800255e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	2201      	movs	r2, #1
 800254c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2284      	movs	r2, #132	@ 0x84
 8002552:	589b      	ldr	r3, [r3, r2]
 8002554:	2201      	movs	r2, #1
 8002556:	431a      	orrs	r2, r3
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2184      	movs	r1, #132	@ 0x84
 800255c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800255e:	23a4      	movs	r3, #164	@ 0xa4
 8002560:	18fb      	adds	r3, r7, r3
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	2202      	movs	r2, #2
 8002566:	4013      	ands	r3, r2
 8002568:	d011      	beq.n	800258e <HAL_UART_IRQHandler+0xf6>
 800256a:	239c      	movs	r3, #156	@ 0x9c
 800256c:	18fb      	adds	r3, r7, r3
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	2201      	movs	r2, #1
 8002572:	4013      	ands	r3, r2
 8002574:	d00b      	beq.n	800258e <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	2202      	movs	r2, #2
 800257c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2284      	movs	r2, #132	@ 0x84
 8002582:	589b      	ldr	r3, [r3, r2]
 8002584:	2204      	movs	r2, #4
 8002586:	431a      	orrs	r2, r3
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2184      	movs	r1, #132	@ 0x84
 800258c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800258e:	23a4      	movs	r3, #164	@ 0xa4
 8002590:	18fb      	adds	r3, r7, r3
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	2204      	movs	r2, #4
 8002596:	4013      	ands	r3, r2
 8002598:	d011      	beq.n	80025be <HAL_UART_IRQHandler+0x126>
 800259a:	239c      	movs	r3, #156	@ 0x9c
 800259c:	18fb      	adds	r3, r7, r3
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	2201      	movs	r2, #1
 80025a2:	4013      	ands	r3, r2
 80025a4:	d00b      	beq.n	80025be <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	2204      	movs	r2, #4
 80025ac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2284      	movs	r2, #132	@ 0x84
 80025b2:	589b      	ldr	r3, [r3, r2]
 80025b4:	2202      	movs	r2, #2
 80025b6:	431a      	orrs	r2, r3
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2184      	movs	r1, #132	@ 0x84
 80025bc:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80025be:	23a4      	movs	r3, #164	@ 0xa4
 80025c0:	18fb      	adds	r3, r7, r3
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	2208      	movs	r2, #8
 80025c6:	4013      	ands	r3, r2
 80025c8:	d017      	beq.n	80025fa <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80025ca:	23a0      	movs	r3, #160	@ 0xa0
 80025cc:	18fb      	adds	r3, r7, r3
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	2220      	movs	r2, #32
 80025d2:	4013      	ands	r3, r2
 80025d4:	d105      	bne.n	80025e2 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80025d6:	239c      	movs	r3, #156	@ 0x9c
 80025d8:	18fb      	adds	r3, r7, r3
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	2201      	movs	r2, #1
 80025de:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80025e0:	d00b      	beq.n	80025fa <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	2208      	movs	r2, #8
 80025e8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2284      	movs	r2, #132	@ 0x84
 80025ee:	589b      	ldr	r3, [r3, r2]
 80025f0:	2208      	movs	r2, #8
 80025f2:	431a      	orrs	r2, r3
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2184      	movs	r1, #132	@ 0x84
 80025f8:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80025fa:	23a4      	movs	r3, #164	@ 0xa4
 80025fc:	18fb      	adds	r3, r7, r3
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	2380      	movs	r3, #128	@ 0x80
 8002602:	011b      	lsls	r3, r3, #4
 8002604:	4013      	ands	r3, r2
 8002606:	d013      	beq.n	8002630 <HAL_UART_IRQHandler+0x198>
 8002608:	23a0      	movs	r3, #160	@ 0xa0
 800260a:	18fb      	adds	r3, r7, r3
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	2380      	movs	r3, #128	@ 0x80
 8002610:	04db      	lsls	r3, r3, #19
 8002612:	4013      	ands	r3, r2
 8002614:	d00c      	beq.n	8002630 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	2280      	movs	r2, #128	@ 0x80
 800261c:	0112      	lsls	r2, r2, #4
 800261e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2284      	movs	r2, #132	@ 0x84
 8002624:	589b      	ldr	r3, [r3, r2]
 8002626:	2220      	movs	r2, #32
 8002628:	431a      	orrs	r2, r3
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2184      	movs	r1, #132	@ 0x84
 800262e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2284      	movs	r2, #132	@ 0x84
 8002634:	589b      	ldr	r3, [r3, r2]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d100      	bne.n	800263c <HAL_UART_IRQHandler+0x1a4>
 800263a:	e21f      	b.n	8002a7c <HAL_UART_IRQHandler+0x5e4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800263c:	23a4      	movs	r3, #164	@ 0xa4
 800263e:	18fb      	adds	r3, r7, r3
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	2220      	movs	r2, #32
 8002644:	4013      	ands	r3, r2
 8002646:	d00e      	beq.n	8002666 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002648:	23a0      	movs	r3, #160	@ 0xa0
 800264a:	18fb      	adds	r3, r7, r3
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	2220      	movs	r2, #32
 8002650:	4013      	ands	r3, r2
 8002652:	d008      	beq.n	8002666 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002658:	2b00      	cmp	r3, #0
 800265a:	d004      	beq.n	8002666 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002660:	687a      	ldr	r2, [r7, #4]
 8002662:	0010      	movs	r0, r2
 8002664:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2284      	movs	r2, #132	@ 0x84
 800266a:	589b      	ldr	r3, [r3, r2]
 800266c:	2194      	movs	r1, #148	@ 0x94
 800266e:	187a      	adds	r2, r7, r1
 8002670:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	2240      	movs	r2, #64	@ 0x40
 800267a:	4013      	ands	r3, r2
 800267c:	2b40      	cmp	r3, #64	@ 0x40
 800267e:	d004      	beq.n	800268a <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002680:	187b      	adds	r3, r7, r1
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	2228      	movs	r2, #40	@ 0x28
 8002686:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002688:	d047      	beq.n	800271a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	0018      	movs	r0, r3
 800268e:	f000 ff53 	bl	8003538 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	2240      	movs	r2, #64	@ 0x40
 800269a:	4013      	ands	r3, r2
 800269c:	2b40      	cmp	r3, #64	@ 0x40
 800269e:	d137      	bne.n	8002710 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80026a0:	f3ef 8310 	mrs	r3, PRIMASK
 80026a4:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 80026a6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80026a8:	2090      	movs	r0, #144	@ 0x90
 80026aa:	183a      	adds	r2, r7, r0
 80026ac:	6013      	str	r3, [r2, #0]
 80026ae:	2301      	movs	r3, #1
 80026b0:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026b2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80026b4:	f383 8810 	msr	PRIMASK, r3
}
 80026b8:	46c0      	nop			@ (mov r8, r8)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	689a      	ldr	r2, [r3, #8]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	2140      	movs	r1, #64	@ 0x40
 80026c6:	438a      	bics	r2, r1
 80026c8:	609a      	str	r2, [r3, #8]
 80026ca:	183b      	adds	r3, r7, r0
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026d0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80026d2:	f383 8810 	msr	PRIMASK, r3
}
 80026d6:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d012      	beq.n	8002706 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026e4:	4a14      	ldr	r2, [pc, #80]	@ (8002738 <HAL_UART_IRQHandler+0x2a0>)
 80026e6:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026ec:	0018      	movs	r0, r3
 80026ee:	f7fe fc87 	bl	8001000 <HAL_DMA_Abort_IT>
 80026f2:	1e03      	subs	r3, r0, #0
 80026f4:	d01a      	beq.n	800272c <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026fa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002700:	0018      	movs	r0, r3
 8002702:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002704:	e012      	b.n	800272c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	0018      	movs	r0, r3
 800270a:	f000 f9cd 	bl	8002aa8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800270e:	e00d      	b.n	800272c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	0018      	movs	r0, r3
 8002714:	f000 f9c8 	bl	8002aa8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002718:	e008      	b.n	800272c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	0018      	movs	r0, r3
 800271e:	f000 f9c3 	bl	8002aa8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2284      	movs	r2, #132	@ 0x84
 8002726:	2100      	movs	r1, #0
 8002728:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800272a:	e1a7      	b.n	8002a7c <HAL_UART_IRQHandler+0x5e4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800272c:	46c0      	nop			@ (mov r8, r8)
    return;
 800272e:	e1a5      	b.n	8002a7c <HAL_UART_IRQHandler+0x5e4>
 8002730:	0000080f 	.word	0x0000080f
 8002734:	04000120 	.word	0x04000120
 8002738:	08003601 	.word	0x08003601

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002740:	2b01      	cmp	r3, #1
 8002742:	d000      	beq.n	8002746 <HAL_UART_IRQHandler+0x2ae>
 8002744:	e159      	b.n	80029fa <HAL_UART_IRQHandler+0x562>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002746:	23a4      	movs	r3, #164	@ 0xa4
 8002748:	18fb      	adds	r3, r7, r3
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	2210      	movs	r2, #16
 800274e:	4013      	ands	r3, r2
 8002750:	d100      	bne.n	8002754 <HAL_UART_IRQHandler+0x2bc>
 8002752:	e152      	b.n	80029fa <HAL_UART_IRQHandler+0x562>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002754:	23a0      	movs	r3, #160	@ 0xa0
 8002756:	18fb      	adds	r3, r7, r3
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	2210      	movs	r2, #16
 800275c:	4013      	ands	r3, r2
 800275e:	d100      	bne.n	8002762 <HAL_UART_IRQHandler+0x2ca>
 8002760:	e14b      	b.n	80029fa <HAL_UART_IRQHandler+0x562>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	2210      	movs	r2, #16
 8002768:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	2240      	movs	r2, #64	@ 0x40
 8002772:	4013      	ands	r3, r2
 8002774:	2b40      	cmp	r3, #64	@ 0x40
 8002776:	d000      	beq.n	800277a <HAL_UART_IRQHandler+0x2e2>
 8002778:	e0bf      	b.n	80028fa <HAL_UART_IRQHandler+0x462>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	685a      	ldr	r2, [r3, #4]
 8002782:	217e      	movs	r1, #126	@ 0x7e
 8002784:	187b      	adds	r3, r7, r1
 8002786:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8002788:	187b      	adds	r3, r7, r1
 800278a:	881b      	ldrh	r3, [r3, #0]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d100      	bne.n	8002792 <HAL_UART_IRQHandler+0x2fa>
 8002790:	e095      	b.n	80028be <HAL_UART_IRQHandler+0x426>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2258      	movs	r2, #88	@ 0x58
 8002796:	5a9b      	ldrh	r3, [r3, r2]
 8002798:	187a      	adds	r2, r7, r1
 800279a:	8812      	ldrh	r2, [r2, #0]
 800279c:	429a      	cmp	r2, r3
 800279e:	d300      	bcc.n	80027a2 <HAL_UART_IRQHandler+0x30a>
 80027a0:	e08d      	b.n	80028be <HAL_UART_IRQHandler+0x426>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	187a      	adds	r2, r7, r1
 80027a6:	215a      	movs	r1, #90	@ 0x5a
 80027a8:	8812      	ldrh	r2, [r2, #0]
 80027aa:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	2220      	movs	r2, #32
 80027b6:	4013      	ands	r3, r2
 80027b8:	d16f      	bne.n	800289a <HAL_UART_IRQHandler+0x402>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027ba:	f3ef 8310 	mrs	r3, PRIMASK
 80027be:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80027c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80027c2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80027c4:	2301      	movs	r3, #1
 80027c6:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027ca:	f383 8810 	msr	PRIMASK, r3
}
 80027ce:	46c0      	nop			@ (mov r8, r8)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	49ad      	ldr	r1, [pc, #692]	@ (8002a90 <HAL_UART_IRQHandler+0x5f8>)
 80027dc:	400a      	ands	r2, r1
 80027de:	601a      	str	r2, [r3, #0]
 80027e0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80027e2:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027e6:	f383 8810 	msr	PRIMASK, r3
}
 80027ea:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027ec:	f3ef 8310 	mrs	r3, PRIMASK
 80027f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 80027f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027f4:	677b      	str	r3, [r7, #116]	@ 0x74
 80027f6:	2301      	movs	r3, #1
 80027f8:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80027fc:	f383 8810 	msr	PRIMASK, r3
}
 8002800:	46c0      	nop			@ (mov r8, r8)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	689a      	ldr	r2, [r3, #8]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	2101      	movs	r1, #1
 800280e:	438a      	bics	r2, r1
 8002810:	609a      	str	r2, [r3, #8]
 8002812:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002814:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002816:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002818:	f383 8810 	msr	PRIMASK, r3
}
 800281c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800281e:	f3ef 8310 	mrs	r3, PRIMASK
 8002822:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8002824:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002826:	673b      	str	r3, [r7, #112]	@ 0x70
 8002828:	2301      	movs	r3, #1
 800282a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800282c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800282e:	f383 8810 	msr	PRIMASK, r3
}
 8002832:	46c0      	nop			@ (mov r8, r8)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	689a      	ldr	r2, [r3, #8]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	2140      	movs	r1, #64	@ 0x40
 8002840:	438a      	bics	r2, r1
 8002842:	609a      	str	r2, [r3, #8]
 8002844:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002846:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002848:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800284a:	f383 8810 	msr	PRIMASK, r3
}
 800284e:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2280      	movs	r2, #128	@ 0x80
 8002854:	2120      	movs	r1, #32
 8002856:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2200      	movs	r2, #0
 800285c:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800285e:	f3ef 8310 	mrs	r3, PRIMASK
 8002862:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8002864:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002866:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002868:	2301      	movs	r3, #1
 800286a:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800286c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800286e:	f383 8810 	msr	PRIMASK, r3
}
 8002872:	46c0      	nop			@ (mov r8, r8)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	2110      	movs	r1, #16
 8002880:	438a      	bics	r2, r1
 8002882:	601a      	str	r2, [r3, #0]
 8002884:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002886:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002888:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800288a:	f383 8810 	msr	PRIMASK, r3
}
 800288e:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002894:	0018      	movs	r0, r3
 8002896:	f7fe fb73 	bl	8000f80 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2202      	movs	r2, #2
 800289e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2258      	movs	r2, #88	@ 0x58
 80028a4:	5a9a      	ldrh	r2, [r3, r2]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	215a      	movs	r1, #90	@ 0x5a
 80028aa:	5a5b      	ldrh	r3, [r3, r1]
 80028ac:	b29b      	uxth	r3, r3
 80028ae:	1ad3      	subs	r3, r2, r3
 80028b0:	b29a      	uxth	r2, r3
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	0011      	movs	r1, r2
 80028b6:	0018      	movs	r0, r3
 80028b8:	f000 f8fe 	bl	8002ab8 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80028bc:	e0e0      	b.n	8002a80 <HAL_UART_IRQHandler+0x5e8>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2258      	movs	r2, #88	@ 0x58
 80028c2:	5a9b      	ldrh	r3, [r3, r2]
 80028c4:	227e      	movs	r2, #126	@ 0x7e
 80028c6:	18ba      	adds	r2, r7, r2
 80028c8:	8812      	ldrh	r2, [r2, #0]
 80028ca:	429a      	cmp	r2, r3
 80028cc:	d000      	beq.n	80028d0 <HAL_UART_IRQHandler+0x438>
 80028ce:	e0d7      	b.n	8002a80 <HAL_UART_IRQHandler+0x5e8>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	2220      	movs	r2, #32
 80028da:	4013      	ands	r3, r2
 80028dc:	2b20      	cmp	r3, #32
 80028de:	d000      	beq.n	80028e2 <HAL_UART_IRQHandler+0x44a>
 80028e0:	e0ce      	b.n	8002a80 <HAL_UART_IRQHandler+0x5e8>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2202      	movs	r2, #2
 80028e6:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2258      	movs	r2, #88	@ 0x58
 80028ec:	5a9a      	ldrh	r2, [r3, r2]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	0011      	movs	r1, r2
 80028f2:	0018      	movs	r0, r3
 80028f4:	f000 f8e0 	bl	8002ab8 <HAL_UARTEx_RxEventCallback>
      return;
 80028f8:	e0c2      	b.n	8002a80 <HAL_UART_IRQHandler+0x5e8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2258      	movs	r2, #88	@ 0x58
 80028fe:	5a99      	ldrh	r1, [r3, r2]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	225a      	movs	r2, #90	@ 0x5a
 8002904:	5a9b      	ldrh	r3, [r3, r2]
 8002906:	b29a      	uxth	r2, r3
 8002908:	208e      	movs	r0, #142	@ 0x8e
 800290a:	183b      	adds	r3, r7, r0
 800290c:	1a8a      	subs	r2, r1, r2
 800290e:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	225a      	movs	r2, #90	@ 0x5a
 8002914:	5a9b      	ldrh	r3, [r3, r2]
 8002916:	b29b      	uxth	r3, r3
 8002918:	2b00      	cmp	r3, #0
 800291a:	d100      	bne.n	800291e <HAL_UART_IRQHandler+0x486>
 800291c:	e0b2      	b.n	8002a84 <HAL_UART_IRQHandler+0x5ec>
          && (nb_rx_data > 0U))
 800291e:	183b      	adds	r3, r7, r0
 8002920:	881b      	ldrh	r3, [r3, #0]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d100      	bne.n	8002928 <HAL_UART_IRQHandler+0x490>
 8002926:	e0ad      	b.n	8002a84 <HAL_UART_IRQHandler+0x5ec>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002928:	f3ef 8310 	mrs	r3, PRIMASK
 800292c:	60fb      	str	r3, [r7, #12]
  return(result);
 800292e:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002930:	2488      	movs	r4, #136	@ 0x88
 8002932:	193a      	adds	r2, r7, r4
 8002934:	6013      	str	r3, [r2, #0]
 8002936:	2301      	movs	r3, #1
 8002938:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	f383 8810 	msr	PRIMASK, r3
}
 8002940:	46c0      	nop			@ (mov r8, r8)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4951      	ldr	r1, [pc, #324]	@ (8002a94 <HAL_UART_IRQHandler+0x5fc>)
 800294e:	400a      	ands	r2, r1
 8002950:	601a      	str	r2, [r3, #0]
 8002952:	193b      	adds	r3, r7, r4
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	f383 8810 	msr	PRIMASK, r3
}
 800295e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002960:	f3ef 8310 	mrs	r3, PRIMASK
 8002964:	61bb      	str	r3, [r7, #24]
  return(result);
 8002966:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002968:	2484      	movs	r4, #132	@ 0x84
 800296a:	193a      	adds	r2, r7, r4
 800296c:	6013      	str	r3, [r2, #0]
 800296e:	2301      	movs	r3, #1
 8002970:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002972:	69fb      	ldr	r3, [r7, #28]
 8002974:	f383 8810 	msr	PRIMASK, r3
}
 8002978:	46c0      	nop			@ (mov r8, r8)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	689a      	ldr	r2, [r3, #8]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	2101      	movs	r1, #1
 8002986:	438a      	bics	r2, r1
 8002988:	609a      	str	r2, [r3, #8]
 800298a:	193b      	adds	r3, r7, r4
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002990:	6a3b      	ldr	r3, [r7, #32]
 8002992:	f383 8810 	msr	PRIMASK, r3
}
 8002996:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2280      	movs	r2, #128	@ 0x80
 800299c:	2120      	movs	r1, #32
 800299e:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2200      	movs	r2, #0
 80029a4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2200      	movs	r2, #0
 80029aa:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029ac:	f3ef 8310 	mrs	r3, PRIMASK
 80029b0:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80029b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029b4:	2480      	movs	r4, #128	@ 0x80
 80029b6:	193a      	adds	r2, r7, r4
 80029b8:	6013      	str	r3, [r2, #0]
 80029ba:	2301      	movs	r3, #1
 80029bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029c0:	f383 8810 	msr	PRIMASK, r3
}
 80029c4:	46c0      	nop			@ (mov r8, r8)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	2110      	movs	r1, #16
 80029d2:	438a      	bics	r2, r1
 80029d4:	601a      	str	r2, [r3, #0]
 80029d6:	193b      	adds	r3, r7, r4
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029de:	f383 8810 	msr	PRIMASK, r3
}
 80029e2:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2202      	movs	r2, #2
 80029e8:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80029ea:	183b      	adds	r3, r7, r0
 80029ec:	881a      	ldrh	r2, [r3, #0]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	0011      	movs	r1, r2
 80029f2:	0018      	movs	r0, r3
 80029f4:	f000 f860 	bl	8002ab8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80029f8:	e044      	b.n	8002a84 <HAL_UART_IRQHandler+0x5ec>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80029fa:	23a4      	movs	r3, #164	@ 0xa4
 80029fc:	18fb      	adds	r3, r7, r3
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	2380      	movs	r3, #128	@ 0x80
 8002a02:	035b      	lsls	r3, r3, #13
 8002a04:	4013      	ands	r3, r2
 8002a06:	d010      	beq.n	8002a2a <HAL_UART_IRQHandler+0x592>
 8002a08:	239c      	movs	r3, #156	@ 0x9c
 8002a0a:	18fb      	adds	r3, r7, r3
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	2380      	movs	r3, #128	@ 0x80
 8002a10:	03db      	lsls	r3, r3, #15
 8002a12:	4013      	ands	r3, r2
 8002a14:	d009      	beq.n	8002a2a <HAL_UART_IRQHandler+0x592>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	2280      	movs	r2, #128	@ 0x80
 8002a1c:	0352      	lsls	r2, r2, #13
 8002a1e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	0018      	movs	r0, r3
 8002a24:	f000 ffee 	bl	8003a04 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002a28:	e02f      	b.n	8002a8a <HAL_UART_IRQHandler+0x5f2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002a2a:	23a4      	movs	r3, #164	@ 0xa4
 8002a2c:	18fb      	adds	r3, r7, r3
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	2280      	movs	r2, #128	@ 0x80
 8002a32:	4013      	ands	r3, r2
 8002a34:	d00f      	beq.n	8002a56 <HAL_UART_IRQHandler+0x5be>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002a36:	23a0      	movs	r3, #160	@ 0xa0
 8002a38:	18fb      	adds	r3, r7, r3
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	2280      	movs	r2, #128	@ 0x80
 8002a3e:	4013      	ands	r3, r2
 8002a40:	d009      	beq.n	8002a56 <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d01e      	beq.n	8002a88 <HAL_UART_IRQHandler+0x5f0>
    {
      huart->TxISR(huart);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a4e:	687a      	ldr	r2, [r7, #4]
 8002a50:	0010      	movs	r0, r2
 8002a52:	4798      	blx	r3
    }
    return;
 8002a54:	e018      	b.n	8002a88 <HAL_UART_IRQHandler+0x5f0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002a56:	23a4      	movs	r3, #164	@ 0xa4
 8002a58:	18fb      	adds	r3, r7, r3
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	2240      	movs	r2, #64	@ 0x40
 8002a5e:	4013      	ands	r3, r2
 8002a60:	d013      	beq.n	8002a8a <HAL_UART_IRQHandler+0x5f2>
 8002a62:	23a0      	movs	r3, #160	@ 0xa0
 8002a64:	18fb      	adds	r3, r7, r3
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	2240      	movs	r2, #64	@ 0x40
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	d00d      	beq.n	8002a8a <HAL_UART_IRQHandler+0x5f2>
  {
    UART_EndTransmit_IT(huart);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	0018      	movs	r0, r3
 8002a72:	f000 fdd8 	bl	8003626 <UART_EndTransmit_IT>
    return;
 8002a76:	e008      	b.n	8002a8a <HAL_UART_IRQHandler+0x5f2>
      return;
 8002a78:	46c0      	nop			@ (mov r8, r8)
 8002a7a:	e006      	b.n	8002a8a <HAL_UART_IRQHandler+0x5f2>
    return;
 8002a7c:	46c0      	nop			@ (mov r8, r8)
 8002a7e:	e004      	b.n	8002a8a <HAL_UART_IRQHandler+0x5f2>
      return;
 8002a80:	46c0      	nop			@ (mov r8, r8)
 8002a82:	e002      	b.n	8002a8a <HAL_UART_IRQHandler+0x5f2>
      return;
 8002a84:	46c0      	nop			@ (mov r8, r8)
 8002a86:	e000      	b.n	8002a8a <HAL_UART_IRQHandler+0x5f2>
    return;
 8002a88:	46c0      	nop			@ (mov r8, r8)
  }

}
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	b02b      	add	sp, #172	@ 0xac
 8002a8e:	bd90      	pop	{r4, r7, pc}
 8002a90:	fffffeff 	.word	0xfffffeff
 8002a94:	fffffedf 	.word	0xfffffedf

08002a98 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b082      	sub	sp, #8
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002aa0:	46c0      	nop			@ (mov r8, r8)
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	b002      	add	sp, #8
 8002aa6:	bd80      	pop	{r7, pc}

08002aa8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b082      	sub	sp, #8
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002ab0:	46c0      	nop			@ (mov r8, r8)
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	b002      	add	sp, #8
 8002ab6:	bd80      	pop	{r7, pc}

08002ab8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b082      	sub	sp, #8
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	000a      	movs	r2, r1
 8002ac2:	1cbb      	adds	r3, r7, #2
 8002ac4:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002ac6:	46c0      	nop			@ (mov r8, r8)
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	b002      	add	sp, #8
 8002acc:	bd80      	pop	{r7, pc}
	...

08002ad0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ad0:	b5b0      	push	{r4, r5, r7, lr}
 8002ad2:	b08e      	sub	sp, #56	@ 0x38
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002ad8:	231a      	movs	r3, #26
 8002ada:	2218      	movs	r2, #24
 8002adc:	189b      	adds	r3, r3, r2
 8002ade:	19db      	adds	r3, r3, r7
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002ae4:	69fb      	ldr	r3, [r7, #28]
 8002ae6:	689a      	ldr	r2, [r3, #8]
 8002ae8:	69fb      	ldr	r3, [r7, #28]
 8002aea:	691b      	ldr	r3, [r3, #16]
 8002aec:	431a      	orrs	r2, r3
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	695b      	ldr	r3, [r3, #20]
 8002af2:	431a      	orrs	r2, r3
 8002af4:	69fb      	ldr	r3, [r7, #28]
 8002af6:	69db      	ldr	r3, [r3, #28]
 8002af8:	4313      	orrs	r3, r2
 8002afa:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002afc:	69fb      	ldr	r3, [r7, #28]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4ac3      	ldr	r2, [pc, #780]	@ (8002e10 <UART_SetConfig+0x340>)
 8002b04:	4013      	ands	r3, r2
 8002b06:	0019      	movs	r1, r3
 8002b08:	69fb      	ldr	r3, [r7, #28]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002b0e:	430a      	orrs	r2, r1
 8002b10:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	4abe      	ldr	r2, [pc, #760]	@ (8002e14 <UART_SetConfig+0x344>)
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	0019      	movs	r1, r3
 8002b1e:	69fb      	ldr	r3, [r7, #28]
 8002b20:	68da      	ldr	r2, [r3, #12]
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	430a      	orrs	r2, r1
 8002b28:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	699b      	ldr	r3, [r3, #24]
 8002b2e:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4ab8      	ldr	r2, [pc, #736]	@ (8002e18 <UART_SetConfig+0x348>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d004      	beq.n	8002b44 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	6a1b      	ldr	r3, [r3, #32]
 8002b3e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002b40:	4313      	orrs	r3, r2
 8002b42:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002b44:	69fb      	ldr	r3, [r7, #28]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	4ab4      	ldr	r2, [pc, #720]	@ (8002e1c <UART_SetConfig+0x34c>)
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	0019      	movs	r1, r3
 8002b50:	69fb      	ldr	r3, [r7, #28]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002b56:	430a      	orrs	r2, r1
 8002b58:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4ab0      	ldr	r2, [pc, #704]	@ (8002e20 <UART_SetConfig+0x350>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d131      	bne.n	8002bc8 <UART_SetConfig+0xf8>
 8002b64:	4baf      	ldr	r3, [pc, #700]	@ (8002e24 <UART_SetConfig+0x354>)
 8002b66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b68:	2203      	movs	r2, #3
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	2b03      	cmp	r3, #3
 8002b6e:	d01d      	beq.n	8002bac <UART_SetConfig+0xdc>
 8002b70:	d823      	bhi.n	8002bba <UART_SetConfig+0xea>
 8002b72:	2b02      	cmp	r3, #2
 8002b74:	d00c      	beq.n	8002b90 <UART_SetConfig+0xc0>
 8002b76:	d820      	bhi.n	8002bba <UART_SetConfig+0xea>
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d002      	beq.n	8002b82 <UART_SetConfig+0xb2>
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d00e      	beq.n	8002b9e <UART_SetConfig+0xce>
 8002b80:	e01b      	b.n	8002bba <UART_SetConfig+0xea>
 8002b82:	231b      	movs	r3, #27
 8002b84:	2218      	movs	r2, #24
 8002b86:	189b      	adds	r3, r3, r2
 8002b88:	19db      	adds	r3, r3, r7
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	701a      	strb	r2, [r3, #0]
 8002b8e:	e0b4      	b.n	8002cfa <UART_SetConfig+0x22a>
 8002b90:	231b      	movs	r3, #27
 8002b92:	2218      	movs	r2, #24
 8002b94:	189b      	adds	r3, r3, r2
 8002b96:	19db      	adds	r3, r3, r7
 8002b98:	2202      	movs	r2, #2
 8002b9a:	701a      	strb	r2, [r3, #0]
 8002b9c:	e0ad      	b.n	8002cfa <UART_SetConfig+0x22a>
 8002b9e:	231b      	movs	r3, #27
 8002ba0:	2218      	movs	r2, #24
 8002ba2:	189b      	adds	r3, r3, r2
 8002ba4:	19db      	adds	r3, r3, r7
 8002ba6:	2204      	movs	r2, #4
 8002ba8:	701a      	strb	r2, [r3, #0]
 8002baa:	e0a6      	b.n	8002cfa <UART_SetConfig+0x22a>
 8002bac:	231b      	movs	r3, #27
 8002bae:	2218      	movs	r2, #24
 8002bb0:	189b      	adds	r3, r3, r2
 8002bb2:	19db      	adds	r3, r3, r7
 8002bb4:	2208      	movs	r2, #8
 8002bb6:	701a      	strb	r2, [r3, #0]
 8002bb8:	e09f      	b.n	8002cfa <UART_SetConfig+0x22a>
 8002bba:	231b      	movs	r3, #27
 8002bbc:	2218      	movs	r2, #24
 8002bbe:	189b      	adds	r3, r3, r2
 8002bc0:	19db      	adds	r3, r3, r7
 8002bc2:	2210      	movs	r2, #16
 8002bc4:	701a      	strb	r2, [r3, #0]
 8002bc6:	e098      	b.n	8002cfa <UART_SetConfig+0x22a>
 8002bc8:	69fb      	ldr	r3, [r7, #28]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a96      	ldr	r2, [pc, #600]	@ (8002e28 <UART_SetConfig+0x358>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d131      	bne.n	8002c36 <UART_SetConfig+0x166>
 8002bd2:	4b94      	ldr	r3, [pc, #592]	@ (8002e24 <UART_SetConfig+0x354>)
 8002bd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bd6:	220c      	movs	r2, #12
 8002bd8:	4013      	ands	r3, r2
 8002bda:	2b0c      	cmp	r3, #12
 8002bdc:	d01d      	beq.n	8002c1a <UART_SetConfig+0x14a>
 8002bde:	d823      	bhi.n	8002c28 <UART_SetConfig+0x158>
 8002be0:	2b08      	cmp	r3, #8
 8002be2:	d00c      	beq.n	8002bfe <UART_SetConfig+0x12e>
 8002be4:	d820      	bhi.n	8002c28 <UART_SetConfig+0x158>
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d002      	beq.n	8002bf0 <UART_SetConfig+0x120>
 8002bea:	2b04      	cmp	r3, #4
 8002bec:	d00e      	beq.n	8002c0c <UART_SetConfig+0x13c>
 8002bee:	e01b      	b.n	8002c28 <UART_SetConfig+0x158>
 8002bf0:	231b      	movs	r3, #27
 8002bf2:	2218      	movs	r2, #24
 8002bf4:	189b      	adds	r3, r3, r2
 8002bf6:	19db      	adds	r3, r3, r7
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	701a      	strb	r2, [r3, #0]
 8002bfc:	e07d      	b.n	8002cfa <UART_SetConfig+0x22a>
 8002bfe:	231b      	movs	r3, #27
 8002c00:	2218      	movs	r2, #24
 8002c02:	189b      	adds	r3, r3, r2
 8002c04:	19db      	adds	r3, r3, r7
 8002c06:	2202      	movs	r2, #2
 8002c08:	701a      	strb	r2, [r3, #0]
 8002c0a:	e076      	b.n	8002cfa <UART_SetConfig+0x22a>
 8002c0c:	231b      	movs	r3, #27
 8002c0e:	2218      	movs	r2, #24
 8002c10:	189b      	adds	r3, r3, r2
 8002c12:	19db      	adds	r3, r3, r7
 8002c14:	2204      	movs	r2, #4
 8002c16:	701a      	strb	r2, [r3, #0]
 8002c18:	e06f      	b.n	8002cfa <UART_SetConfig+0x22a>
 8002c1a:	231b      	movs	r3, #27
 8002c1c:	2218      	movs	r2, #24
 8002c1e:	189b      	adds	r3, r3, r2
 8002c20:	19db      	adds	r3, r3, r7
 8002c22:	2208      	movs	r2, #8
 8002c24:	701a      	strb	r2, [r3, #0]
 8002c26:	e068      	b.n	8002cfa <UART_SetConfig+0x22a>
 8002c28:	231b      	movs	r3, #27
 8002c2a:	2218      	movs	r2, #24
 8002c2c:	189b      	adds	r3, r3, r2
 8002c2e:	19db      	adds	r3, r3, r7
 8002c30:	2210      	movs	r2, #16
 8002c32:	701a      	strb	r2, [r3, #0]
 8002c34:	e061      	b.n	8002cfa <UART_SetConfig+0x22a>
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a7c      	ldr	r2, [pc, #496]	@ (8002e2c <UART_SetConfig+0x35c>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d106      	bne.n	8002c4e <UART_SetConfig+0x17e>
 8002c40:	231b      	movs	r3, #27
 8002c42:	2218      	movs	r2, #24
 8002c44:	189b      	adds	r3, r3, r2
 8002c46:	19db      	adds	r3, r3, r7
 8002c48:	2200      	movs	r2, #0
 8002c4a:	701a      	strb	r2, [r3, #0]
 8002c4c:	e055      	b.n	8002cfa <UART_SetConfig+0x22a>
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a77      	ldr	r2, [pc, #476]	@ (8002e30 <UART_SetConfig+0x360>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d106      	bne.n	8002c66 <UART_SetConfig+0x196>
 8002c58:	231b      	movs	r3, #27
 8002c5a:	2218      	movs	r2, #24
 8002c5c:	189b      	adds	r3, r3, r2
 8002c5e:	19db      	adds	r3, r3, r7
 8002c60:	2200      	movs	r2, #0
 8002c62:	701a      	strb	r2, [r3, #0]
 8002c64:	e049      	b.n	8002cfa <UART_SetConfig+0x22a>
 8002c66:	69fb      	ldr	r3, [r7, #28]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a6b      	ldr	r2, [pc, #428]	@ (8002e18 <UART_SetConfig+0x348>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d13e      	bne.n	8002cee <UART_SetConfig+0x21e>
 8002c70:	4b6c      	ldr	r3, [pc, #432]	@ (8002e24 <UART_SetConfig+0x354>)
 8002c72:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002c74:	23c0      	movs	r3, #192	@ 0xc0
 8002c76:	011b      	lsls	r3, r3, #4
 8002c78:	4013      	ands	r3, r2
 8002c7a:	22c0      	movs	r2, #192	@ 0xc0
 8002c7c:	0112      	lsls	r2, r2, #4
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d027      	beq.n	8002cd2 <UART_SetConfig+0x202>
 8002c82:	22c0      	movs	r2, #192	@ 0xc0
 8002c84:	0112      	lsls	r2, r2, #4
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d82a      	bhi.n	8002ce0 <UART_SetConfig+0x210>
 8002c8a:	2280      	movs	r2, #128	@ 0x80
 8002c8c:	0112      	lsls	r2, r2, #4
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d011      	beq.n	8002cb6 <UART_SetConfig+0x1e6>
 8002c92:	2280      	movs	r2, #128	@ 0x80
 8002c94:	0112      	lsls	r2, r2, #4
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d822      	bhi.n	8002ce0 <UART_SetConfig+0x210>
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d004      	beq.n	8002ca8 <UART_SetConfig+0x1d8>
 8002c9e:	2280      	movs	r2, #128	@ 0x80
 8002ca0:	00d2      	lsls	r2, r2, #3
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d00e      	beq.n	8002cc4 <UART_SetConfig+0x1f4>
 8002ca6:	e01b      	b.n	8002ce0 <UART_SetConfig+0x210>
 8002ca8:	231b      	movs	r3, #27
 8002caa:	2218      	movs	r2, #24
 8002cac:	189b      	adds	r3, r3, r2
 8002cae:	19db      	adds	r3, r3, r7
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	701a      	strb	r2, [r3, #0]
 8002cb4:	e021      	b.n	8002cfa <UART_SetConfig+0x22a>
 8002cb6:	231b      	movs	r3, #27
 8002cb8:	2218      	movs	r2, #24
 8002cba:	189b      	adds	r3, r3, r2
 8002cbc:	19db      	adds	r3, r3, r7
 8002cbe:	2202      	movs	r2, #2
 8002cc0:	701a      	strb	r2, [r3, #0]
 8002cc2:	e01a      	b.n	8002cfa <UART_SetConfig+0x22a>
 8002cc4:	231b      	movs	r3, #27
 8002cc6:	2218      	movs	r2, #24
 8002cc8:	189b      	adds	r3, r3, r2
 8002cca:	19db      	adds	r3, r3, r7
 8002ccc:	2204      	movs	r2, #4
 8002cce:	701a      	strb	r2, [r3, #0]
 8002cd0:	e013      	b.n	8002cfa <UART_SetConfig+0x22a>
 8002cd2:	231b      	movs	r3, #27
 8002cd4:	2218      	movs	r2, #24
 8002cd6:	189b      	adds	r3, r3, r2
 8002cd8:	19db      	adds	r3, r3, r7
 8002cda:	2208      	movs	r2, #8
 8002cdc:	701a      	strb	r2, [r3, #0]
 8002cde:	e00c      	b.n	8002cfa <UART_SetConfig+0x22a>
 8002ce0:	231b      	movs	r3, #27
 8002ce2:	2218      	movs	r2, #24
 8002ce4:	189b      	adds	r3, r3, r2
 8002ce6:	19db      	adds	r3, r3, r7
 8002ce8:	2210      	movs	r2, #16
 8002cea:	701a      	strb	r2, [r3, #0]
 8002cec:	e005      	b.n	8002cfa <UART_SetConfig+0x22a>
 8002cee:	231b      	movs	r3, #27
 8002cf0:	2218      	movs	r2, #24
 8002cf2:	189b      	adds	r3, r3, r2
 8002cf4:	19db      	adds	r3, r3, r7
 8002cf6:	2210      	movs	r2, #16
 8002cf8:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002cfa:	69fb      	ldr	r3, [r7, #28]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a46      	ldr	r2, [pc, #280]	@ (8002e18 <UART_SetConfig+0x348>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d000      	beq.n	8002d06 <UART_SetConfig+0x236>
 8002d04:	e09a      	b.n	8002e3c <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002d06:	231b      	movs	r3, #27
 8002d08:	2218      	movs	r2, #24
 8002d0a:	189b      	adds	r3, r3, r2
 8002d0c:	19db      	adds	r3, r3, r7
 8002d0e:	781b      	ldrb	r3, [r3, #0]
 8002d10:	2b08      	cmp	r3, #8
 8002d12:	d01d      	beq.n	8002d50 <UART_SetConfig+0x280>
 8002d14:	dc20      	bgt.n	8002d58 <UART_SetConfig+0x288>
 8002d16:	2b04      	cmp	r3, #4
 8002d18:	d015      	beq.n	8002d46 <UART_SetConfig+0x276>
 8002d1a:	dc1d      	bgt.n	8002d58 <UART_SetConfig+0x288>
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d002      	beq.n	8002d26 <UART_SetConfig+0x256>
 8002d20:	2b02      	cmp	r3, #2
 8002d22:	d005      	beq.n	8002d30 <UART_SetConfig+0x260>
 8002d24:	e018      	b.n	8002d58 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d26:	f7ff f8dd 	bl	8001ee4 <HAL_RCC_GetPCLK1Freq>
 8002d2a:	0003      	movs	r3, r0
 8002d2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002d2e:	e01c      	b.n	8002d6a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002d30:	4b3c      	ldr	r3, [pc, #240]	@ (8002e24 <UART_SetConfig+0x354>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	2210      	movs	r2, #16
 8002d36:	4013      	ands	r3, r2
 8002d38:	d002      	beq.n	8002d40 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002d3a:	4b3e      	ldr	r3, [pc, #248]	@ (8002e34 <UART_SetConfig+0x364>)
 8002d3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002d3e:	e014      	b.n	8002d6a <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8002d40:	4b3d      	ldr	r3, [pc, #244]	@ (8002e38 <UART_SetConfig+0x368>)
 8002d42:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002d44:	e011      	b.n	8002d6a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d46:	f7ff f83d 	bl	8001dc4 <HAL_RCC_GetSysClockFreq>
 8002d4a:	0003      	movs	r3, r0
 8002d4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002d4e:	e00c      	b.n	8002d6a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d50:	2380      	movs	r3, #128	@ 0x80
 8002d52:	021b      	lsls	r3, r3, #8
 8002d54:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002d56:	e008      	b.n	8002d6a <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8002d5c:	231a      	movs	r3, #26
 8002d5e:	2218      	movs	r2, #24
 8002d60:	189b      	adds	r3, r3, r2
 8002d62:	19db      	adds	r3, r3, r7
 8002d64:	2201      	movs	r2, #1
 8002d66:	701a      	strb	r2, [r3, #0]
        break;
 8002d68:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002d6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d100      	bne.n	8002d72 <UART_SetConfig+0x2a2>
 8002d70:	e133      	b.n	8002fda <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	685a      	ldr	r2, [r3, #4]
 8002d76:	0013      	movs	r3, r2
 8002d78:	005b      	lsls	r3, r3, #1
 8002d7a:	189b      	adds	r3, r3, r2
 8002d7c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	d305      	bcc.n	8002d8e <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002d82:	69fb      	ldr	r3, [r7, #28]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002d88:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	d906      	bls.n	8002d9c <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 8002d8e:	231a      	movs	r3, #26
 8002d90:	2218      	movs	r2, #24
 8002d92:	189b      	adds	r3, r3, r2
 8002d94:	19db      	adds	r3, r3, r7
 8002d96:	2201      	movs	r2, #1
 8002d98:	701a      	strb	r2, [r3, #0]
 8002d9a:	e11e      	b.n	8002fda <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002d9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d9e:	613b      	str	r3, [r7, #16]
 8002da0:	2300      	movs	r3, #0
 8002da2:	617b      	str	r3, [r7, #20]
 8002da4:	6939      	ldr	r1, [r7, #16]
 8002da6:	697a      	ldr	r2, [r7, #20]
 8002da8:	000b      	movs	r3, r1
 8002daa:	0e1b      	lsrs	r3, r3, #24
 8002dac:	0010      	movs	r0, r2
 8002dae:	0205      	lsls	r5, r0, #8
 8002db0:	431d      	orrs	r5, r3
 8002db2:	000b      	movs	r3, r1
 8002db4:	021c      	lsls	r4, r3, #8
 8002db6:	69fb      	ldr	r3, [r7, #28]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	085b      	lsrs	r3, r3, #1
 8002dbc:	60bb      	str	r3, [r7, #8]
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	60fb      	str	r3, [r7, #12]
 8002dc2:	68b8      	ldr	r0, [r7, #8]
 8002dc4:	68f9      	ldr	r1, [r7, #12]
 8002dc6:	1900      	adds	r0, r0, r4
 8002dc8:	4169      	adcs	r1, r5
 8002dca:	69fb      	ldr	r3, [r7, #28]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	603b      	str	r3, [r7, #0]
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	607b      	str	r3, [r7, #4]
 8002dd4:	683a      	ldr	r2, [r7, #0]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	f7fd fa2a 	bl	8000230 <__aeabi_uldivmod>
 8002ddc:	0002      	movs	r2, r0
 8002dde:	000b      	movs	r3, r1
 8002de0:	0013      	movs	r3, r2
 8002de2:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002de4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002de6:	23c0      	movs	r3, #192	@ 0xc0
 8002de8:	009b      	lsls	r3, r3, #2
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d309      	bcc.n	8002e02 <UART_SetConfig+0x332>
 8002dee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002df0:	2380      	movs	r3, #128	@ 0x80
 8002df2:	035b      	lsls	r3, r3, #13
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d204      	bcs.n	8002e02 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 8002df8:	69fb      	ldr	r3, [r7, #28]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002dfe:	60da      	str	r2, [r3, #12]
 8002e00:	e0eb      	b.n	8002fda <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 8002e02:	231a      	movs	r3, #26
 8002e04:	2218      	movs	r2, #24
 8002e06:	189b      	adds	r3, r3, r2
 8002e08:	19db      	adds	r3, r3, r7
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	701a      	strb	r2, [r3, #0]
 8002e0e:	e0e4      	b.n	8002fda <UART_SetConfig+0x50a>
 8002e10:	efff69f3 	.word	0xefff69f3
 8002e14:	ffffcfff 	.word	0xffffcfff
 8002e18:	40004800 	.word	0x40004800
 8002e1c:	fffff4ff 	.word	0xfffff4ff
 8002e20:	40013800 	.word	0x40013800
 8002e24:	40021000 	.word	0x40021000
 8002e28:	40004400 	.word	0x40004400
 8002e2c:	40004c00 	.word	0x40004c00
 8002e30:	40005000 	.word	0x40005000
 8002e34:	003d0900 	.word	0x003d0900
 8002e38:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e3c:	69fb      	ldr	r3, [r7, #28]
 8002e3e:	69da      	ldr	r2, [r3, #28]
 8002e40:	2380      	movs	r3, #128	@ 0x80
 8002e42:	021b      	lsls	r3, r3, #8
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d000      	beq.n	8002e4a <UART_SetConfig+0x37a>
 8002e48:	e070      	b.n	8002f2c <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 8002e4a:	231b      	movs	r3, #27
 8002e4c:	2218      	movs	r2, #24
 8002e4e:	189b      	adds	r3, r3, r2
 8002e50:	19db      	adds	r3, r3, r7
 8002e52:	781b      	ldrb	r3, [r3, #0]
 8002e54:	2b08      	cmp	r3, #8
 8002e56:	d822      	bhi.n	8002e9e <UART_SetConfig+0x3ce>
 8002e58:	009a      	lsls	r2, r3, #2
 8002e5a:	4b67      	ldr	r3, [pc, #412]	@ (8002ff8 <UART_SetConfig+0x528>)
 8002e5c:	18d3      	adds	r3, r2, r3
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e62:	f7ff f83f 	bl	8001ee4 <HAL_RCC_GetPCLK1Freq>
 8002e66:	0003      	movs	r3, r0
 8002e68:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002e6a:	e021      	b.n	8002eb0 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002e6c:	f7ff f850 	bl	8001f10 <HAL_RCC_GetPCLK2Freq>
 8002e70:	0003      	movs	r3, r0
 8002e72:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002e74:	e01c      	b.n	8002eb0 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002e76:	4b61      	ldr	r3, [pc, #388]	@ (8002ffc <UART_SetConfig+0x52c>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	2210      	movs	r2, #16
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	d002      	beq.n	8002e86 <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002e80:	4b5f      	ldr	r3, [pc, #380]	@ (8003000 <UART_SetConfig+0x530>)
 8002e82:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002e84:	e014      	b.n	8002eb0 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 8002e86:	4b5f      	ldr	r3, [pc, #380]	@ (8003004 <UART_SetConfig+0x534>)
 8002e88:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002e8a:	e011      	b.n	8002eb0 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e8c:	f7fe ff9a 	bl	8001dc4 <HAL_RCC_GetSysClockFreq>
 8002e90:	0003      	movs	r3, r0
 8002e92:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002e94:	e00c      	b.n	8002eb0 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e96:	2380      	movs	r3, #128	@ 0x80
 8002e98:	021b      	lsls	r3, r3, #8
 8002e9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002e9c:	e008      	b.n	8002eb0 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8002ea2:	231a      	movs	r3, #26
 8002ea4:	2218      	movs	r2, #24
 8002ea6:	189b      	adds	r3, r3, r2
 8002ea8:	19db      	adds	r3, r3, r7
 8002eaa:	2201      	movs	r2, #1
 8002eac:	701a      	strb	r2, [r3, #0]
        break;
 8002eae:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002eb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d100      	bne.n	8002eb8 <UART_SetConfig+0x3e8>
 8002eb6:	e090      	b.n	8002fda <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002eb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002eba:	005a      	lsls	r2, r3, #1
 8002ebc:	69fb      	ldr	r3, [r7, #28]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	085b      	lsrs	r3, r3, #1
 8002ec2:	18d2      	adds	r2, r2, r3
 8002ec4:	69fb      	ldr	r3, [r7, #28]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	0019      	movs	r1, r3
 8002eca:	0010      	movs	r0, r2
 8002ecc:	f7fd f924 	bl	8000118 <__udivsi3>
 8002ed0:	0003      	movs	r3, r0
 8002ed2:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ed4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ed6:	2b0f      	cmp	r3, #15
 8002ed8:	d921      	bls.n	8002f1e <UART_SetConfig+0x44e>
 8002eda:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002edc:	2380      	movs	r3, #128	@ 0x80
 8002ede:	025b      	lsls	r3, r3, #9
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d21c      	bcs.n	8002f1e <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002ee4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ee6:	b29a      	uxth	r2, r3
 8002ee8:	200e      	movs	r0, #14
 8002eea:	2418      	movs	r4, #24
 8002eec:	1903      	adds	r3, r0, r4
 8002eee:	19db      	adds	r3, r3, r7
 8002ef0:	210f      	movs	r1, #15
 8002ef2:	438a      	bics	r2, r1
 8002ef4:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002ef6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ef8:	085b      	lsrs	r3, r3, #1
 8002efa:	b29b      	uxth	r3, r3
 8002efc:	2207      	movs	r2, #7
 8002efe:	4013      	ands	r3, r2
 8002f00:	b299      	uxth	r1, r3
 8002f02:	1903      	adds	r3, r0, r4
 8002f04:	19db      	adds	r3, r3, r7
 8002f06:	1902      	adds	r2, r0, r4
 8002f08:	19d2      	adds	r2, r2, r7
 8002f0a:	8812      	ldrh	r2, [r2, #0]
 8002f0c:	430a      	orrs	r2, r1
 8002f0e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002f10:	69fb      	ldr	r3, [r7, #28]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	1902      	adds	r2, r0, r4
 8002f16:	19d2      	adds	r2, r2, r7
 8002f18:	8812      	ldrh	r2, [r2, #0]
 8002f1a:	60da      	str	r2, [r3, #12]
 8002f1c:	e05d      	b.n	8002fda <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8002f1e:	231a      	movs	r3, #26
 8002f20:	2218      	movs	r2, #24
 8002f22:	189b      	adds	r3, r3, r2
 8002f24:	19db      	adds	r3, r3, r7
 8002f26:	2201      	movs	r2, #1
 8002f28:	701a      	strb	r2, [r3, #0]
 8002f2a:	e056      	b.n	8002fda <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002f2c:	231b      	movs	r3, #27
 8002f2e:	2218      	movs	r2, #24
 8002f30:	189b      	adds	r3, r3, r2
 8002f32:	19db      	adds	r3, r3, r7
 8002f34:	781b      	ldrb	r3, [r3, #0]
 8002f36:	2b08      	cmp	r3, #8
 8002f38:	d822      	bhi.n	8002f80 <UART_SetConfig+0x4b0>
 8002f3a:	009a      	lsls	r2, r3, #2
 8002f3c:	4b32      	ldr	r3, [pc, #200]	@ (8003008 <UART_SetConfig+0x538>)
 8002f3e:	18d3      	adds	r3, r2, r3
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f44:	f7fe ffce 	bl	8001ee4 <HAL_RCC_GetPCLK1Freq>
 8002f48:	0003      	movs	r3, r0
 8002f4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002f4c:	e021      	b.n	8002f92 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002f4e:	f7fe ffdf 	bl	8001f10 <HAL_RCC_GetPCLK2Freq>
 8002f52:	0003      	movs	r3, r0
 8002f54:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002f56:	e01c      	b.n	8002f92 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002f58:	4b28      	ldr	r3, [pc, #160]	@ (8002ffc <UART_SetConfig+0x52c>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	2210      	movs	r2, #16
 8002f5e:	4013      	ands	r3, r2
 8002f60:	d002      	beq.n	8002f68 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002f62:	4b27      	ldr	r3, [pc, #156]	@ (8003000 <UART_SetConfig+0x530>)
 8002f64:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002f66:	e014      	b.n	8002f92 <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 8002f68:	4b26      	ldr	r3, [pc, #152]	@ (8003004 <UART_SetConfig+0x534>)
 8002f6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002f6c:	e011      	b.n	8002f92 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f6e:	f7fe ff29 	bl	8001dc4 <HAL_RCC_GetSysClockFreq>
 8002f72:	0003      	movs	r3, r0
 8002f74:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002f76:	e00c      	b.n	8002f92 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f78:	2380      	movs	r3, #128	@ 0x80
 8002f7a:	021b      	lsls	r3, r3, #8
 8002f7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002f7e:	e008      	b.n	8002f92 <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8002f80:	2300      	movs	r3, #0
 8002f82:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8002f84:	231a      	movs	r3, #26
 8002f86:	2218      	movs	r2, #24
 8002f88:	189b      	adds	r3, r3, r2
 8002f8a:	19db      	adds	r3, r3, r7
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	701a      	strb	r2, [r3, #0]
        break;
 8002f90:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8002f92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d020      	beq.n	8002fda <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002f98:	69fb      	ldr	r3, [r7, #28]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	085a      	lsrs	r2, r3, #1
 8002f9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fa0:	18d2      	adds	r2, r2, r3
 8002fa2:	69fb      	ldr	r3, [r7, #28]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	0019      	movs	r1, r3
 8002fa8:	0010      	movs	r0, r2
 8002faa:	f7fd f8b5 	bl	8000118 <__udivsi3>
 8002fae:	0003      	movs	r3, r0
 8002fb0:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002fb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fb4:	2b0f      	cmp	r3, #15
 8002fb6:	d90a      	bls.n	8002fce <UART_SetConfig+0x4fe>
 8002fb8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002fba:	2380      	movs	r3, #128	@ 0x80
 8002fbc:	025b      	lsls	r3, r3, #9
 8002fbe:	429a      	cmp	r2, r3
 8002fc0:	d205      	bcs.n	8002fce <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002fc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fc4:	b29a      	uxth	r2, r3
 8002fc6:	69fb      	ldr	r3, [r7, #28]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	60da      	str	r2, [r3, #12]
 8002fcc:	e005      	b.n	8002fda <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8002fce:	231a      	movs	r3, #26
 8002fd0:	2218      	movs	r2, #24
 8002fd2:	189b      	adds	r3, r3, r2
 8002fd4:	19db      	adds	r3, r3, r7
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8002fe0:	69fb      	ldr	r3, [r7, #28]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8002fe6:	231a      	movs	r3, #26
 8002fe8:	2218      	movs	r2, #24
 8002fea:	189b      	adds	r3, r3, r2
 8002fec:	19db      	adds	r3, r3, r7
 8002fee:	781b      	ldrb	r3, [r3, #0]
}
 8002ff0:	0018      	movs	r0, r3
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	b00e      	add	sp, #56	@ 0x38
 8002ff6:	bdb0      	pop	{r4, r5, r7, pc}
 8002ff8:	08003b0c 	.word	0x08003b0c
 8002ffc:	40021000 	.word	0x40021000
 8003000:	003d0900 	.word	0x003d0900
 8003004:	00f42400 	.word	0x00f42400
 8003008:	08003b30 	.word	0x08003b30

0800300c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b082      	sub	sp, #8
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003018:	2208      	movs	r2, #8
 800301a:	4013      	ands	r3, r2
 800301c:	d00b      	beq.n	8003036 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	4a4a      	ldr	r2, [pc, #296]	@ (8003150 <UART_AdvFeatureConfig+0x144>)
 8003026:	4013      	ands	r3, r2
 8003028:	0019      	movs	r1, r3
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	430a      	orrs	r2, r1
 8003034:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800303a:	2201      	movs	r2, #1
 800303c:	4013      	ands	r3, r2
 800303e:	d00b      	beq.n	8003058 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	4a43      	ldr	r2, [pc, #268]	@ (8003154 <UART_AdvFeatureConfig+0x148>)
 8003048:	4013      	ands	r3, r2
 800304a:	0019      	movs	r1, r3
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	430a      	orrs	r2, r1
 8003056:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800305c:	2202      	movs	r2, #2
 800305e:	4013      	ands	r3, r2
 8003060:	d00b      	beq.n	800307a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	4a3b      	ldr	r2, [pc, #236]	@ (8003158 <UART_AdvFeatureConfig+0x14c>)
 800306a:	4013      	ands	r3, r2
 800306c:	0019      	movs	r1, r3
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	430a      	orrs	r2, r1
 8003078:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800307e:	2204      	movs	r2, #4
 8003080:	4013      	ands	r3, r2
 8003082:	d00b      	beq.n	800309c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	4a34      	ldr	r2, [pc, #208]	@ (800315c <UART_AdvFeatureConfig+0x150>)
 800308c:	4013      	ands	r3, r2
 800308e:	0019      	movs	r1, r3
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	430a      	orrs	r2, r1
 800309a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030a0:	2210      	movs	r2, #16
 80030a2:	4013      	ands	r3, r2
 80030a4:	d00b      	beq.n	80030be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	4a2c      	ldr	r2, [pc, #176]	@ (8003160 <UART_AdvFeatureConfig+0x154>)
 80030ae:	4013      	ands	r3, r2
 80030b0:	0019      	movs	r1, r3
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	430a      	orrs	r2, r1
 80030bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030c2:	2220      	movs	r2, #32
 80030c4:	4013      	ands	r3, r2
 80030c6:	d00b      	beq.n	80030e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	4a25      	ldr	r2, [pc, #148]	@ (8003164 <UART_AdvFeatureConfig+0x158>)
 80030d0:	4013      	ands	r3, r2
 80030d2:	0019      	movs	r1, r3
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	430a      	orrs	r2, r1
 80030de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030e4:	2240      	movs	r2, #64	@ 0x40
 80030e6:	4013      	ands	r3, r2
 80030e8:	d01d      	beq.n	8003126 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	4a1d      	ldr	r2, [pc, #116]	@ (8003168 <UART_AdvFeatureConfig+0x15c>)
 80030f2:	4013      	ands	r3, r2
 80030f4:	0019      	movs	r1, r3
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	430a      	orrs	r2, r1
 8003100:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003106:	2380      	movs	r3, #128	@ 0x80
 8003108:	035b      	lsls	r3, r3, #13
 800310a:	429a      	cmp	r2, r3
 800310c:	d10b      	bne.n	8003126 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	4a15      	ldr	r2, [pc, #84]	@ (800316c <UART_AdvFeatureConfig+0x160>)
 8003116:	4013      	ands	r3, r2
 8003118:	0019      	movs	r1, r3
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	430a      	orrs	r2, r1
 8003124:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800312a:	2280      	movs	r2, #128	@ 0x80
 800312c:	4013      	ands	r3, r2
 800312e:	d00b      	beq.n	8003148 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	4a0e      	ldr	r2, [pc, #56]	@ (8003170 <UART_AdvFeatureConfig+0x164>)
 8003138:	4013      	ands	r3, r2
 800313a:	0019      	movs	r1, r3
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	430a      	orrs	r2, r1
 8003146:	605a      	str	r2, [r3, #4]
  }
}
 8003148:	46c0      	nop			@ (mov r8, r8)
 800314a:	46bd      	mov	sp, r7
 800314c:	b002      	add	sp, #8
 800314e:	bd80      	pop	{r7, pc}
 8003150:	ffff7fff 	.word	0xffff7fff
 8003154:	fffdffff 	.word	0xfffdffff
 8003158:	fffeffff 	.word	0xfffeffff
 800315c:	fffbffff 	.word	0xfffbffff
 8003160:	ffffefff 	.word	0xffffefff
 8003164:	ffffdfff 	.word	0xffffdfff
 8003168:	ffefffff 	.word	0xffefffff
 800316c:	ff9fffff 	.word	0xff9fffff
 8003170:	fff7ffff 	.word	0xfff7ffff

08003174 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b092      	sub	sp, #72	@ 0x48
 8003178:	af02      	add	r7, sp, #8
 800317a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2284      	movs	r2, #132	@ 0x84
 8003180:	2100      	movs	r1, #0
 8003182:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003184:	f7fd fdf0 	bl	8000d68 <HAL_GetTick>
 8003188:	0003      	movs	r3, r0
 800318a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	2208      	movs	r2, #8
 8003194:	4013      	ands	r3, r2
 8003196:	2b08      	cmp	r3, #8
 8003198:	d12c      	bne.n	80031f4 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800319a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800319c:	2280      	movs	r2, #128	@ 0x80
 800319e:	0391      	lsls	r1, r2, #14
 80031a0:	6878      	ldr	r0, [r7, #4]
 80031a2:	4a46      	ldr	r2, [pc, #280]	@ (80032bc <UART_CheckIdleState+0x148>)
 80031a4:	9200      	str	r2, [sp, #0]
 80031a6:	2200      	movs	r2, #0
 80031a8:	f000 f88c 	bl	80032c4 <UART_WaitOnFlagUntilTimeout>
 80031ac:	1e03      	subs	r3, r0, #0
 80031ae:	d021      	beq.n	80031f4 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031b0:	f3ef 8310 	mrs	r3, PRIMASK
 80031b4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80031b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80031b8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80031ba:	2301      	movs	r3, #1
 80031bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031c0:	f383 8810 	msr	PRIMASK, r3
}
 80031c4:	46c0      	nop			@ (mov r8, r8)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	2180      	movs	r1, #128	@ 0x80
 80031d2:	438a      	bics	r2, r1
 80031d4:	601a      	str	r2, [r3, #0]
 80031d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031dc:	f383 8810 	msr	PRIMASK, r3
}
 80031e0:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2220      	movs	r2, #32
 80031e6:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2278      	movs	r2, #120	@ 0x78
 80031ec:	2100      	movs	r1, #0
 80031ee:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80031f0:	2303      	movs	r3, #3
 80031f2:	e05f      	b.n	80032b4 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	2204      	movs	r2, #4
 80031fc:	4013      	ands	r3, r2
 80031fe:	2b04      	cmp	r3, #4
 8003200:	d146      	bne.n	8003290 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003202:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003204:	2280      	movs	r2, #128	@ 0x80
 8003206:	03d1      	lsls	r1, r2, #15
 8003208:	6878      	ldr	r0, [r7, #4]
 800320a:	4a2c      	ldr	r2, [pc, #176]	@ (80032bc <UART_CheckIdleState+0x148>)
 800320c:	9200      	str	r2, [sp, #0]
 800320e:	2200      	movs	r2, #0
 8003210:	f000 f858 	bl	80032c4 <UART_WaitOnFlagUntilTimeout>
 8003214:	1e03      	subs	r3, r0, #0
 8003216:	d03b      	beq.n	8003290 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003218:	f3ef 8310 	mrs	r3, PRIMASK
 800321c:	60fb      	str	r3, [r7, #12]
  return(result);
 800321e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003220:	637b      	str	r3, [r7, #52]	@ 0x34
 8003222:	2301      	movs	r3, #1
 8003224:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	f383 8810 	msr	PRIMASK, r3
}
 800322c:	46c0      	nop			@ (mov r8, r8)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4921      	ldr	r1, [pc, #132]	@ (80032c0 <UART_CheckIdleState+0x14c>)
 800323a:	400a      	ands	r2, r1
 800323c:	601a      	str	r2, [r3, #0]
 800323e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003240:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	f383 8810 	msr	PRIMASK, r3
}
 8003248:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800324a:	f3ef 8310 	mrs	r3, PRIMASK
 800324e:	61bb      	str	r3, [r7, #24]
  return(result);
 8003250:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003252:	633b      	str	r3, [r7, #48]	@ 0x30
 8003254:	2301      	movs	r3, #1
 8003256:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003258:	69fb      	ldr	r3, [r7, #28]
 800325a:	f383 8810 	msr	PRIMASK, r3
}
 800325e:	46c0      	nop			@ (mov r8, r8)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	689a      	ldr	r2, [r3, #8]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	2101      	movs	r1, #1
 800326c:	438a      	bics	r2, r1
 800326e:	609a      	str	r2, [r3, #8]
 8003270:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003272:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003274:	6a3b      	ldr	r3, [r7, #32]
 8003276:	f383 8810 	msr	PRIMASK, r3
}
 800327a:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2280      	movs	r2, #128	@ 0x80
 8003280:	2120      	movs	r1, #32
 8003282:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2278      	movs	r2, #120	@ 0x78
 8003288:	2100      	movs	r1, #0
 800328a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800328c:	2303      	movs	r3, #3
 800328e:	e011      	b.n	80032b4 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2220      	movs	r2, #32
 8003294:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2280      	movs	r2, #128	@ 0x80
 800329a:	2120      	movs	r1, #32
 800329c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2200      	movs	r2, #0
 80032a2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2200      	movs	r2, #0
 80032a8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2278      	movs	r2, #120	@ 0x78
 80032ae:	2100      	movs	r1, #0
 80032b0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80032b2:	2300      	movs	r3, #0
}
 80032b4:	0018      	movs	r0, r3
 80032b6:	46bd      	mov	sp, r7
 80032b8:	b010      	add	sp, #64	@ 0x40
 80032ba:	bd80      	pop	{r7, pc}
 80032bc:	01ffffff 	.word	0x01ffffff
 80032c0:	fffffedf 	.word	0xfffffedf

080032c4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b084      	sub	sp, #16
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	60f8      	str	r0, [r7, #12]
 80032cc:	60b9      	str	r1, [r7, #8]
 80032ce:	603b      	str	r3, [r7, #0]
 80032d0:	1dfb      	adds	r3, r7, #7
 80032d2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032d4:	e051      	b.n	800337a <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032d6:	69bb      	ldr	r3, [r7, #24]
 80032d8:	3301      	adds	r3, #1
 80032da:	d04e      	beq.n	800337a <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032dc:	f7fd fd44 	bl	8000d68 <HAL_GetTick>
 80032e0:	0002      	movs	r2, r0
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	1ad3      	subs	r3, r2, r3
 80032e6:	69ba      	ldr	r2, [r7, #24]
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d302      	bcc.n	80032f2 <UART_WaitOnFlagUntilTimeout+0x2e>
 80032ec:	69bb      	ldr	r3, [r7, #24]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d101      	bne.n	80032f6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80032f2:	2303      	movs	r3, #3
 80032f4:	e051      	b.n	800339a <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	2204      	movs	r2, #4
 80032fe:	4013      	ands	r3, r2
 8003300:	d03b      	beq.n	800337a <UART_WaitOnFlagUntilTimeout+0xb6>
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	2b80      	cmp	r3, #128	@ 0x80
 8003306:	d038      	beq.n	800337a <UART_WaitOnFlagUntilTimeout+0xb6>
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	2b40      	cmp	r3, #64	@ 0x40
 800330c:	d035      	beq.n	800337a <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	69db      	ldr	r3, [r3, #28]
 8003314:	2208      	movs	r2, #8
 8003316:	4013      	ands	r3, r2
 8003318:	2b08      	cmp	r3, #8
 800331a:	d111      	bne.n	8003340 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	2208      	movs	r2, #8
 8003322:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	0018      	movs	r0, r3
 8003328:	f000 f906 	bl	8003538 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2284      	movs	r2, #132	@ 0x84
 8003330:	2108      	movs	r1, #8
 8003332:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2278      	movs	r2, #120	@ 0x78
 8003338:	2100      	movs	r1, #0
 800333a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	e02c      	b.n	800339a <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	69da      	ldr	r2, [r3, #28]
 8003346:	2380      	movs	r3, #128	@ 0x80
 8003348:	011b      	lsls	r3, r3, #4
 800334a:	401a      	ands	r2, r3
 800334c:	2380      	movs	r3, #128	@ 0x80
 800334e:	011b      	lsls	r3, r3, #4
 8003350:	429a      	cmp	r2, r3
 8003352:	d112      	bne.n	800337a <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	2280      	movs	r2, #128	@ 0x80
 800335a:	0112      	lsls	r2, r2, #4
 800335c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	0018      	movs	r0, r3
 8003362:	f000 f8e9 	bl	8003538 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2284      	movs	r2, #132	@ 0x84
 800336a:	2120      	movs	r1, #32
 800336c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2278      	movs	r2, #120	@ 0x78
 8003372:	2100      	movs	r1, #0
 8003374:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003376:	2303      	movs	r3, #3
 8003378:	e00f      	b.n	800339a <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	69db      	ldr	r3, [r3, #28]
 8003380:	68ba      	ldr	r2, [r7, #8]
 8003382:	4013      	ands	r3, r2
 8003384:	68ba      	ldr	r2, [r7, #8]
 8003386:	1ad3      	subs	r3, r2, r3
 8003388:	425a      	negs	r2, r3
 800338a:	4153      	adcs	r3, r2
 800338c:	b2db      	uxtb	r3, r3
 800338e:	001a      	movs	r2, r3
 8003390:	1dfb      	adds	r3, r7, #7
 8003392:	781b      	ldrb	r3, [r3, #0]
 8003394:	429a      	cmp	r2, r3
 8003396:	d09e      	beq.n	80032d6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003398:	2300      	movs	r3, #0
}
 800339a:	0018      	movs	r0, r3
 800339c:	46bd      	mov	sp, r7
 800339e:	b004      	add	sp, #16
 80033a0:	bd80      	pop	{r7, pc}
	...

080033a4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b090      	sub	sp, #64	@ 0x40
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	60f8      	str	r0, [r7, #12]
 80033ac:	60b9      	str	r1, [r7, #8]
 80033ae:	1dbb      	adds	r3, r7, #6
 80033b0:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	68ba      	ldr	r2, [r7, #8]
 80033b6:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	1dba      	adds	r2, r7, #6
 80033bc:	2158      	movs	r1, #88	@ 0x58
 80033be:	8812      	ldrh	r2, [r2, #0]
 80033c0:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	1dba      	adds	r2, r7, #6
 80033c6:	215a      	movs	r1, #90	@ 0x5a
 80033c8:	8812      	ldrh	r2, [r2, #0]
 80033ca:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2200      	movs	r2, #0
 80033d0:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	689a      	ldr	r2, [r3, #8]
 80033d6:	2380      	movs	r3, #128	@ 0x80
 80033d8:	015b      	lsls	r3, r3, #5
 80033da:	429a      	cmp	r2, r3
 80033dc:	d10d      	bne.n	80033fa <UART_Start_Receive_IT+0x56>
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	691b      	ldr	r3, [r3, #16]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d104      	bne.n	80033f0 <UART_Start_Receive_IT+0x4c>
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	225c      	movs	r2, #92	@ 0x5c
 80033ea:	4950      	ldr	r1, [pc, #320]	@ (800352c <UART_Start_Receive_IT+0x188>)
 80033ec:	5299      	strh	r1, [r3, r2]
 80033ee:	e02e      	b.n	800344e <UART_Start_Receive_IT+0xaa>
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	225c      	movs	r2, #92	@ 0x5c
 80033f4:	21ff      	movs	r1, #255	@ 0xff
 80033f6:	5299      	strh	r1, [r3, r2]
 80033f8:	e029      	b.n	800344e <UART_Start_Receive_IT+0xaa>
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d10d      	bne.n	800341e <UART_Start_Receive_IT+0x7a>
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	691b      	ldr	r3, [r3, #16]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d104      	bne.n	8003414 <UART_Start_Receive_IT+0x70>
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	225c      	movs	r2, #92	@ 0x5c
 800340e:	21ff      	movs	r1, #255	@ 0xff
 8003410:	5299      	strh	r1, [r3, r2]
 8003412:	e01c      	b.n	800344e <UART_Start_Receive_IT+0xaa>
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	225c      	movs	r2, #92	@ 0x5c
 8003418:	217f      	movs	r1, #127	@ 0x7f
 800341a:	5299      	strh	r1, [r3, r2]
 800341c:	e017      	b.n	800344e <UART_Start_Receive_IT+0xaa>
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	689a      	ldr	r2, [r3, #8]
 8003422:	2380      	movs	r3, #128	@ 0x80
 8003424:	055b      	lsls	r3, r3, #21
 8003426:	429a      	cmp	r2, r3
 8003428:	d10d      	bne.n	8003446 <UART_Start_Receive_IT+0xa2>
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	691b      	ldr	r3, [r3, #16]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d104      	bne.n	800343c <UART_Start_Receive_IT+0x98>
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	225c      	movs	r2, #92	@ 0x5c
 8003436:	217f      	movs	r1, #127	@ 0x7f
 8003438:	5299      	strh	r1, [r3, r2]
 800343a:	e008      	b.n	800344e <UART_Start_Receive_IT+0xaa>
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	225c      	movs	r2, #92	@ 0x5c
 8003440:	213f      	movs	r1, #63	@ 0x3f
 8003442:	5299      	strh	r1, [r3, r2]
 8003444:	e003      	b.n	800344e <UART_Start_Receive_IT+0xaa>
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	225c      	movs	r2, #92	@ 0x5c
 800344a:	2100      	movs	r1, #0
 800344c:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2284      	movs	r2, #132	@ 0x84
 8003452:	2100      	movs	r1, #0
 8003454:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2280      	movs	r2, #128	@ 0x80
 800345a:	2122      	movs	r1, #34	@ 0x22
 800345c:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800345e:	f3ef 8310 	mrs	r3, PRIMASK
 8003462:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8003464:	6abb      	ldr	r3, [r7, #40]	@ 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003466:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003468:	2301      	movs	r3, #1
 800346a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800346c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800346e:	f383 8810 	msr	PRIMASK, r3
}
 8003472:	46c0      	nop			@ (mov r8, r8)
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	689a      	ldr	r2, [r3, #8]
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	2101      	movs	r1, #1
 8003480:	430a      	orrs	r2, r1
 8003482:	609a      	str	r2, [r3, #8]
 8003484:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003486:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003488:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800348a:	f383 8810 	msr	PRIMASK, r3
}
 800348e:	46c0      	nop			@ (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	689a      	ldr	r2, [r3, #8]
 8003494:	2380      	movs	r3, #128	@ 0x80
 8003496:	015b      	lsls	r3, r3, #5
 8003498:	429a      	cmp	r2, r3
 800349a:	d107      	bne.n	80034ac <UART_Start_Receive_IT+0x108>
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	691b      	ldr	r3, [r3, #16]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d103      	bne.n	80034ac <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	4a22      	ldr	r2, [pc, #136]	@ (8003530 <UART_Start_Receive_IT+0x18c>)
 80034a8:	669a      	str	r2, [r3, #104]	@ 0x68
 80034aa:	e002      	b.n	80034b2 <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	4a21      	ldr	r2, [pc, #132]	@ (8003534 <UART_Start_Receive_IT+0x190>)
 80034b0:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	691b      	ldr	r3, [r3, #16]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d019      	beq.n	80034ee <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034ba:	f3ef 8310 	mrs	r3, PRIMASK
 80034be:	61fb      	str	r3, [r7, #28]
  return(result);
 80034c0:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80034c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80034c4:	2301      	movs	r3, #1
 80034c6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034c8:	6a3b      	ldr	r3, [r7, #32]
 80034ca:	f383 8810 	msr	PRIMASK, r3
}
 80034ce:	46c0      	nop			@ (mov r8, r8)
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	2190      	movs	r1, #144	@ 0x90
 80034dc:	0049      	lsls	r1, r1, #1
 80034de:	430a      	orrs	r2, r1
 80034e0:	601a      	str	r2, [r3, #0]
 80034e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034e4:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034e8:	f383 8810 	msr	PRIMASK, r3
}
 80034ec:	e018      	b.n	8003520 <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034ee:	f3ef 8310 	mrs	r3, PRIMASK
 80034f2:	613b      	str	r3, [r7, #16]
  return(result);
 80034f4:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80034f6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80034f8:	2301      	movs	r3, #1
 80034fa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	f383 8810 	msr	PRIMASK, r3
}
 8003502:	46c0      	nop			@ (mov r8, r8)
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	2120      	movs	r1, #32
 8003510:	430a      	orrs	r2, r1
 8003512:	601a      	str	r2, [r3, #0]
 8003514:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003516:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003518:	69bb      	ldr	r3, [r7, #24]
 800351a:	f383 8810 	msr	PRIMASK, r3
}
 800351e:	46c0      	nop			@ (mov r8, r8)
  }
  return HAL_OK;
 8003520:	2300      	movs	r3, #0
}
 8003522:	0018      	movs	r0, r3
 8003524:	46bd      	mov	sp, r7
 8003526:	b010      	add	sp, #64	@ 0x40
 8003528:	bd80      	pop	{r7, pc}
 800352a:	46c0      	nop			@ (mov r8, r8)
 800352c:	000001ff 	.word	0x000001ff
 8003530:	08003841 	.word	0x08003841
 8003534:	0800367d 	.word	0x0800367d

08003538 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b08e      	sub	sp, #56	@ 0x38
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003540:	f3ef 8310 	mrs	r3, PRIMASK
 8003544:	617b      	str	r3, [r7, #20]
  return(result);
 8003546:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003548:	637b      	str	r3, [r7, #52]	@ 0x34
 800354a:	2301      	movs	r3, #1
 800354c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800354e:	69bb      	ldr	r3, [r7, #24]
 8003550:	f383 8810 	msr	PRIMASK, r3
}
 8003554:	46c0      	nop			@ (mov r8, r8)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4926      	ldr	r1, [pc, #152]	@ (80035fc <UART_EndRxTransfer+0xc4>)
 8003562:	400a      	ands	r2, r1
 8003564:	601a      	str	r2, [r3, #0]
 8003566:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003568:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800356a:	69fb      	ldr	r3, [r7, #28]
 800356c:	f383 8810 	msr	PRIMASK, r3
}
 8003570:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003572:	f3ef 8310 	mrs	r3, PRIMASK
 8003576:	623b      	str	r3, [r7, #32]
  return(result);
 8003578:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800357a:	633b      	str	r3, [r7, #48]	@ 0x30
 800357c:	2301      	movs	r3, #1
 800357e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003582:	f383 8810 	msr	PRIMASK, r3
}
 8003586:	46c0      	nop			@ (mov r8, r8)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	689a      	ldr	r2, [r3, #8]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	2101      	movs	r1, #1
 8003594:	438a      	bics	r2, r1
 8003596:	609a      	str	r2, [r3, #8]
 8003598:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800359a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800359c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800359e:	f383 8810 	msr	PRIMASK, r3
}
 80035a2:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d118      	bne.n	80035de <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035ac:	f3ef 8310 	mrs	r3, PRIMASK
 80035b0:	60bb      	str	r3, [r7, #8]
  return(result);
 80035b2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80035b6:	2301      	movs	r3, #1
 80035b8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	f383 8810 	msr	PRIMASK, r3
}
 80035c0:	46c0      	nop			@ (mov r8, r8)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	2110      	movs	r1, #16
 80035ce:	438a      	bics	r2, r1
 80035d0:	601a      	str	r2, [r3, #0]
 80035d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035d4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	f383 8810 	msr	PRIMASK, r3
}
 80035dc:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2280      	movs	r2, #128	@ 0x80
 80035e2:	2120      	movs	r1, #32
 80035e4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2200      	movs	r2, #0
 80035ea:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2200      	movs	r2, #0
 80035f0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80035f2:	46c0      	nop			@ (mov r8, r8)
 80035f4:	46bd      	mov	sp, r7
 80035f6:	b00e      	add	sp, #56	@ 0x38
 80035f8:	bd80      	pop	{r7, pc}
 80035fa:	46c0      	nop			@ (mov r8, r8)
 80035fc:	fffffedf 	.word	0xfffffedf

08003600 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b084      	sub	sp, #16
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800360c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	225a      	movs	r2, #90	@ 0x5a
 8003612:	2100      	movs	r1, #0
 8003614:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	0018      	movs	r0, r3
 800361a:	f7ff fa45 	bl	8002aa8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800361e:	46c0      	nop			@ (mov r8, r8)
 8003620:	46bd      	mov	sp, r7
 8003622:	b004      	add	sp, #16
 8003624:	bd80      	pop	{r7, pc}

08003626 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003626:	b580      	push	{r7, lr}
 8003628:	b086      	sub	sp, #24
 800362a:	af00      	add	r7, sp, #0
 800362c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800362e:	f3ef 8310 	mrs	r3, PRIMASK
 8003632:	60bb      	str	r3, [r7, #8]
  return(result);
 8003634:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003636:	617b      	str	r3, [r7, #20]
 8003638:	2301      	movs	r3, #1
 800363a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	f383 8810 	msr	PRIMASK, r3
}
 8003642:	46c0      	nop			@ (mov r8, r8)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	2140      	movs	r1, #64	@ 0x40
 8003650:	438a      	bics	r2, r1
 8003652:	601a      	str	r2, [r3, #0]
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	f383 8810 	msr	PRIMASK, r3
}
 800365e:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2220      	movs	r2, #32
 8003664:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2200      	movs	r2, #0
 800366a:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	0018      	movs	r0, r3
 8003670:	f7ff fa12 	bl	8002a98 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003674:	46c0      	nop			@ (mov r8, r8)
 8003676:	46bd      	mov	sp, r7
 8003678:	b006      	add	sp, #24
 800367a:	bd80      	pop	{r7, pc}

0800367c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b094      	sub	sp, #80	@ 0x50
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003684:	204e      	movs	r0, #78	@ 0x4e
 8003686:	183b      	adds	r3, r7, r0
 8003688:	687a      	ldr	r2, [r7, #4]
 800368a:	215c      	movs	r1, #92	@ 0x5c
 800368c:	5a52      	ldrh	r2, [r2, r1]
 800368e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2280      	movs	r2, #128	@ 0x80
 8003694:	589b      	ldr	r3, [r3, r2]
 8003696:	2b22      	cmp	r3, #34	@ 0x22
 8003698:	d000      	beq.n	800369c <UART_RxISR_8BIT+0x20>
 800369a:	e0bf      	b.n	800381c <UART_RxISR_8BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80036a2:	214c      	movs	r1, #76	@ 0x4c
 80036a4:	187b      	adds	r3, r7, r1
 80036a6:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80036a8:	187b      	adds	r3, r7, r1
 80036aa:	881b      	ldrh	r3, [r3, #0]
 80036ac:	b2da      	uxtb	r2, r3
 80036ae:	183b      	adds	r3, r7, r0
 80036b0:	881b      	ldrh	r3, [r3, #0]
 80036b2:	b2d9      	uxtb	r1, r3
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036b8:	400a      	ands	r2, r1
 80036ba:	b2d2      	uxtb	r2, r2
 80036bc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036c2:	1c5a      	adds	r2, r3, #1
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	225a      	movs	r2, #90	@ 0x5a
 80036cc:	5a9b      	ldrh	r3, [r3, r2]
 80036ce:	b29b      	uxth	r3, r3
 80036d0:	3b01      	subs	r3, #1
 80036d2:	b299      	uxth	r1, r3
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	225a      	movs	r2, #90	@ 0x5a
 80036d8:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	225a      	movs	r2, #90	@ 0x5a
 80036de:	5a9b      	ldrh	r3, [r3, r2]
 80036e0:	b29b      	uxth	r3, r3
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d000      	beq.n	80036e8 <UART_RxISR_8BIT+0x6c>
 80036e6:	e0a1      	b.n	800382c <UART_RxISR_8BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036e8:	f3ef 8310 	mrs	r3, PRIMASK
 80036ec:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80036ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036f0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80036f2:	2301      	movs	r3, #1
 80036f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036f8:	f383 8810 	msr	PRIMASK, r3
}
 80036fc:	46c0      	nop			@ (mov r8, r8)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	494a      	ldr	r1, [pc, #296]	@ (8003834 <UART_RxISR_8BIT+0x1b8>)
 800370a:	400a      	ands	r2, r1
 800370c:	601a      	str	r2, [r3, #0]
 800370e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003710:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003712:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003714:	f383 8810 	msr	PRIMASK, r3
}
 8003718:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800371a:	f3ef 8310 	mrs	r3, PRIMASK
 800371e:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8003720:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003722:	647b      	str	r3, [r7, #68]	@ 0x44
 8003724:	2301      	movs	r3, #1
 8003726:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003728:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800372a:	f383 8810 	msr	PRIMASK, r3
}
 800372e:	46c0      	nop			@ (mov r8, r8)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	689a      	ldr	r2, [r3, #8]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	2101      	movs	r1, #1
 800373c:	438a      	bics	r2, r1
 800373e:	609a      	str	r2, [r3, #8]
 8003740:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003742:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003744:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003746:	f383 8810 	msr	PRIMASK, r3
}
 800374a:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2280      	movs	r2, #128	@ 0x80
 8003750:	2120      	movs	r1, #32
 8003752:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2200      	movs	r2, #0
 8003758:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2200      	movs	r2, #0
 800375e:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a34      	ldr	r2, [pc, #208]	@ (8003838 <UART_RxISR_8BIT+0x1bc>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d01f      	beq.n	80037aa <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	685a      	ldr	r2, [r3, #4]
 8003770:	2380      	movs	r3, #128	@ 0x80
 8003772:	041b      	lsls	r3, r3, #16
 8003774:	4013      	ands	r3, r2
 8003776:	d018      	beq.n	80037aa <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003778:	f3ef 8310 	mrs	r3, PRIMASK
 800377c:	61bb      	str	r3, [r7, #24]
  return(result);
 800377e:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003780:	643b      	str	r3, [r7, #64]	@ 0x40
 8003782:	2301      	movs	r3, #1
 8003784:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003786:	69fb      	ldr	r3, [r7, #28]
 8003788:	f383 8810 	msr	PRIMASK, r3
}
 800378c:	46c0      	nop			@ (mov r8, r8)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4928      	ldr	r1, [pc, #160]	@ (800383c <UART_RxISR_8BIT+0x1c0>)
 800379a:	400a      	ands	r2, r1
 800379c:	601a      	str	r2, [r3, #0]
 800379e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80037a0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037a2:	6a3b      	ldr	r3, [r7, #32]
 80037a4:	f383 8810 	msr	PRIMASK, r3
}
 80037a8:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	d12f      	bne.n	8003812 <UART_RxISR_8BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2200      	movs	r2, #0
 80037b6:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037b8:	f3ef 8310 	mrs	r3, PRIMASK
 80037bc:	60fb      	str	r3, [r7, #12]
  return(result);
 80037be:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80037c2:	2301      	movs	r3, #1
 80037c4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	f383 8810 	msr	PRIMASK, r3
}
 80037cc:	46c0      	nop			@ (mov r8, r8)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	2110      	movs	r1, #16
 80037da:	438a      	bics	r2, r1
 80037dc:	601a      	str	r2, [r3, #0]
 80037de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037e0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	f383 8810 	msr	PRIMASK, r3
}
 80037e8:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	69db      	ldr	r3, [r3, #28]
 80037f0:	2210      	movs	r2, #16
 80037f2:	4013      	ands	r3, r2
 80037f4:	2b10      	cmp	r3, #16
 80037f6:	d103      	bne.n	8003800 <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	2210      	movs	r2, #16
 80037fe:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2258      	movs	r2, #88	@ 0x58
 8003804:	5a9a      	ldrh	r2, [r3, r2]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	0011      	movs	r1, r2
 800380a:	0018      	movs	r0, r3
 800380c:	f7ff f954 	bl	8002ab8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003810:	e00c      	b.n	800382c <UART_RxISR_8BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	0018      	movs	r0, r3
 8003816:	f7fc ff8f 	bl	8000738 <HAL_UART_RxCpltCallback>
}
 800381a:	e007      	b.n	800382c <UART_RxISR_8BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	699a      	ldr	r2, [r3, #24]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	2108      	movs	r1, #8
 8003828:	430a      	orrs	r2, r1
 800382a:	619a      	str	r2, [r3, #24]
}
 800382c:	46c0      	nop			@ (mov r8, r8)
 800382e:	46bd      	mov	sp, r7
 8003830:	b014      	add	sp, #80	@ 0x50
 8003832:	bd80      	pop	{r7, pc}
 8003834:	fffffedf 	.word	0xfffffedf
 8003838:	40004800 	.word	0x40004800
 800383c:	fbffffff 	.word	0xfbffffff

08003840 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b094      	sub	sp, #80	@ 0x50
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003848:	204e      	movs	r0, #78	@ 0x4e
 800384a:	183b      	adds	r3, r7, r0
 800384c:	687a      	ldr	r2, [r7, #4]
 800384e:	215c      	movs	r1, #92	@ 0x5c
 8003850:	5a52      	ldrh	r2, [r2, r1]
 8003852:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2280      	movs	r2, #128	@ 0x80
 8003858:	589b      	ldr	r3, [r3, r2]
 800385a:	2b22      	cmp	r3, #34	@ 0x22
 800385c:	d000      	beq.n	8003860 <UART_RxISR_16BIT+0x20>
 800385e:	e0bf      	b.n	80039e0 <UART_RxISR_16BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003866:	214c      	movs	r1, #76	@ 0x4c
 8003868:	187b      	adds	r3, r7, r1
 800386a:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003870:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8003872:	187b      	adds	r3, r7, r1
 8003874:	183a      	adds	r2, r7, r0
 8003876:	881b      	ldrh	r3, [r3, #0]
 8003878:	8812      	ldrh	r2, [r2, #0]
 800387a:	4013      	ands	r3, r2
 800387c:	b29a      	uxth	r2, r3
 800387e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003880:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003886:	1c9a      	adds	r2, r3, #2
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	225a      	movs	r2, #90	@ 0x5a
 8003890:	5a9b      	ldrh	r3, [r3, r2]
 8003892:	b29b      	uxth	r3, r3
 8003894:	3b01      	subs	r3, #1
 8003896:	b299      	uxth	r1, r3
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	225a      	movs	r2, #90	@ 0x5a
 800389c:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	225a      	movs	r2, #90	@ 0x5a
 80038a2:	5a9b      	ldrh	r3, [r3, r2]
 80038a4:	b29b      	uxth	r3, r3
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d000      	beq.n	80038ac <UART_RxISR_16BIT+0x6c>
 80038aa:	e0a1      	b.n	80039f0 <UART_RxISR_16BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038ac:	f3ef 8310 	mrs	r3, PRIMASK
 80038b0:	623b      	str	r3, [r7, #32]
  return(result);
 80038b2:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80038b6:	2301      	movs	r3, #1
 80038b8:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038bc:	f383 8810 	msr	PRIMASK, r3
}
 80038c0:	46c0      	nop			@ (mov r8, r8)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	494a      	ldr	r1, [pc, #296]	@ (80039f8 <UART_RxISR_16BIT+0x1b8>)
 80038ce:	400a      	ands	r2, r1
 80038d0:	601a      	str	r2, [r3, #0]
 80038d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80038d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038d8:	f383 8810 	msr	PRIMASK, r3
}
 80038dc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038de:	f3ef 8310 	mrs	r3, PRIMASK
 80038e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 80038e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038e6:	643b      	str	r3, [r7, #64]	@ 0x40
 80038e8:	2301      	movs	r3, #1
 80038ea:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038ee:	f383 8810 	msr	PRIMASK, r3
}
 80038f2:	46c0      	nop			@ (mov r8, r8)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	689a      	ldr	r2, [r3, #8]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	2101      	movs	r1, #1
 8003900:	438a      	bics	r2, r1
 8003902:	609a      	str	r2, [r3, #8]
 8003904:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003906:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003908:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800390a:	f383 8810 	msr	PRIMASK, r3
}
 800390e:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2280      	movs	r2, #128	@ 0x80
 8003914:	2120      	movs	r1, #32
 8003916:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2200      	movs	r2, #0
 800391c:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2200      	movs	r2, #0
 8003922:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a34      	ldr	r2, [pc, #208]	@ (80039fc <UART_RxISR_16BIT+0x1bc>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d01f      	beq.n	800396e <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	685a      	ldr	r2, [r3, #4]
 8003934:	2380      	movs	r3, #128	@ 0x80
 8003936:	041b      	lsls	r3, r3, #16
 8003938:	4013      	ands	r3, r2
 800393a:	d018      	beq.n	800396e <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800393c:	f3ef 8310 	mrs	r3, PRIMASK
 8003940:	617b      	str	r3, [r7, #20]
  return(result);
 8003942:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003944:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003946:	2301      	movs	r3, #1
 8003948:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800394a:	69bb      	ldr	r3, [r7, #24]
 800394c:	f383 8810 	msr	PRIMASK, r3
}
 8003950:	46c0      	nop			@ (mov r8, r8)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	681a      	ldr	r2, [r3, #0]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4928      	ldr	r1, [pc, #160]	@ (8003a00 <UART_RxISR_16BIT+0x1c0>)
 800395e:	400a      	ands	r2, r1
 8003960:	601a      	str	r2, [r3, #0]
 8003962:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003964:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003966:	69fb      	ldr	r3, [r7, #28]
 8003968:	f383 8810 	msr	PRIMASK, r3
}
 800396c:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003972:	2b01      	cmp	r3, #1
 8003974:	d12f      	bne.n	80039d6 <UART_RxISR_16BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2200      	movs	r2, #0
 800397a:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800397c:	f3ef 8310 	mrs	r3, PRIMASK
 8003980:	60bb      	str	r3, [r7, #8]
  return(result);
 8003982:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003984:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003986:	2301      	movs	r3, #1
 8003988:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	f383 8810 	msr	PRIMASK, r3
}
 8003990:	46c0      	nop			@ (mov r8, r8)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	2110      	movs	r1, #16
 800399e:	438a      	bics	r2, r1
 80039a0:	601a      	str	r2, [r3, #0]
 80039a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039a4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	f383 8810 	msr	PRIMASK, r3
}
 80039ac:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	69db      	ldr	r3, [r3, #28]
 80039b4:	2210      	movs	r2, #16
 80039b6:	4013      	ands	r3, r2
 80039b8:	2b10      	cmp	r3, #16
 80039ba:	d103      	bne.n	80039c4 <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	2210      	movs	r2, #16
 80039c2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2258      	movs	r2, #88	@ 0x58
 80039c8:	5a9a      	ldrh	r2, [r3, r2]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	0011      	movs	r1, r2
 80039ce:	0018      	movs	r0, r3
 80039d0:	f7ff f872 	bl	8002ab8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80039d4:	e00c      	b.n	80039f0 <UART_RxISR_16BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	0018      	movs	r0, r3
 80039da:	f7fc fead 	bl	8000738 <HAL_UART_RxCpltCallback>
}
 80039de:	e007      	b.n	80039f0 <UART_RxISR_16BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	699a      	ldr	r2, [r3, #24]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	2108      	movs	r1, #8
 80039ec:	430a      	orrs	r2, r1
 80039ee:	619a      	str	r2, [r3, #24]
}
 80039f0:	46c0      	nop			@ (mov r8, r8)
 80039f2:	46bd      	mov	sp, r7
 80039f4:	b014      	add	sp, #80	@ 0x50
 80039f6:	bd80      	pop	{r7, pc}
 80039f8:	fffffedf 	.word	0xfffffedf
 80039fc:	40004800 	.word	0x40004800
 8003a00:	fbffffff 	.word	0xfbffffff

08003a04 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b082      	sub	sp, #8
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003a0c:	46c0      	nop			@ (mov r8, r8)
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	b002      	add	sp, #8
 8003a12:	bd80      	pop	{r7, pc}

08003a14 <memset>:
 8003a14:	0003      	movs	r3, r0
 8003a16:	1882      	adds	r2, r0, r2
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d100      	bne.n	8003a1e <memset+0xa>
 8003a1c:	4770      	bx	lr
 8003a1e:	7019      	strb	r1, [r3, #0]
 8003a20:	3301      	adds	r3, #1
 8003a22:	e7f9      	b.n	8003a18 <memset+0x4>

08003a24 <__libc_init_array>:
 8003a24:	b570      	push	{r4, r5, r6, lr}
 8003a26:	2600      	movs	r6, #0
 8003a28:	4c0c      	ldr	r4, [pc, #48]	@ (8003a5c <__libc_init_array+0x38>)
 8003a2a:	4d0d      	ldr	r5, [pc, #52]	@ (8003a60 <__libc_init_array+0x3c>)
 8003a2c:	1b64      	subs	r4, r4, r5
 8003a2e:	10a4      	asrs	r4, r4, #2
 8003a30:	42a6      	cmp	r6, r4
 8003a32:	d109      	bne.n	8003a48 <__libc_init_array+0x24>
 8003a34:	2600      	movs	r6, #0
 8003a36:	f000 f819 	bl	8003a6c <_init>
 8003a3a:	4c0a      	ldr	r4, [pc, #40]	@ (8003a64 <__libc_init_array+0x40>)
 8003a3c:	4d0a      	ldr	r5, [pc, #40]	@ (8003a68 <__libc_init_array+0x44>)
 8003a3e:	1b64      	subs	r4, r4, r5
 8003a40:	10a4      	asrs	r4, r4, #2
 8003a42:	42a6      	cmp	r6, r4
 8003a44:	d105      	bne.n	8003a52 <__libc_init_array+0x2e>
 8003a46:	bd70      	pop	{r4, r5, r6, pc}
 8003a48:	00b3      	lsls	r3, r6, #2
 8003a4a:	58eb      	ldr	r3, [r5, r3]
 8003a4c:	4798      	blx	r3
 8003a4e:	3601      	adds	r6, #1
 8003a50:	e7ee      	b.n	8003a30 <__libc_init_array+0xc>
 8003a52:	00b3      	lsls	r3, r6, #2
 8003a54:	58eb      	ldr	r3, [r5, r3]
 8003a56:	4798      	blx	r3
 8003a58:	3601      	adds	r6, #1
 8003a5a:	e7f2      	b.n	8003a42 <__libc_init_array+0x1e>
 8003a5c:	08003b5c 	.word	0x08003b5c
 8003a60:	08003b5c 	.word	0x08003b5c
 8003a64:	08003b60 	.word	0x08003b60
 8003a68:	08003b5c 	.word	0x08003b5c

08003a6c <_init>:
 8003a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a6e:	46c0      	nop			@ (mov r8, r8)
 8003a70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a72:	bc08      	pop	{r3}
 8003a74:	469e      	mov	lr, r3
 8003a76:	4770      	bx	lr

08003a78 <_fini>:
 8003a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a7a:	46c0      	nop			@ (mov r8, r8)
 8003a7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a7e:	bc08      	pop	{r3}
 8003a80:	469e      	mov	lr, r3
 8003a82:	4770      	bx	lr
